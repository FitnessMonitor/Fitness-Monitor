
avr_mmc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  0000ba54  0000bae8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000ba54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a97  0080018a  0080018a  0000bb72  2**0
                  ALLOC
  3 .stab         00002f94  00000000  00000000  0000bb74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004659  00000000  00000000  0000eb08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00013161  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000343  00000000  00000000  00013221  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000035de  00000000  00000000  00013564  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000009b8  00000000  00000000  00016b42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004706  00000000  00000000  000174fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000510  00000000  00000000  0001bc00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000873  00000000  00000000  0001c110  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005d93  00000000  00000000  0001c983  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000022b  00000000  00000000  00022716  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000120  00000000  00000000  00022941  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d0 21 	jmp	0x43a0	; 0x43a0 <__ctors_end>
       4:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
       8:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
       c:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      10:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      14:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      18:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      1c:	0c 94 34 23 	jmp	0x4668	; 0x4668 <__vector_7>
      20:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      24:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      28:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      2c:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      30:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      34:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      38:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      3c:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      40:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      44:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      48:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      4c:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      50:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      54:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      58:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      5c:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      60:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      64:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__bad_interrupt>
      68:	7a 2c       	mov	r7, r10
      6a:	30 24       	eor	r3, r0
      6c:	6d 2a       	or	r6, r29
      6e:	3d 2b       	or	r19, r29
      70:	71 2a       	or	r7, r17
      72:	30 24       	eor	r3, r0
      74:	12 2e       	mov	r1, r18
      76:	30 24       	eor	r3, r0
      78:	9f 27       	eor	r25, r31
      7a:	1b 2e       	mov	r1, r27
      7c:	71 2c       	mov	r7, r1
      7e:	c5 28       	or	r12, r5
      80:	40 2e       	mov	r4, r16
      82:	49 2c       	mov	r4, r9
      84:	53 2a       	or	r5, r19
      86:	30 24       	eor	r3, r0
      88:	2a 2e       	mov	r2, r26
      8a:	b5 2a       	or	r11, r21
      8c:	bf 27       	eor	r27, r31
      8e:	a0 2c       	mov	r10, r0
      90:	65 2c       	mov	r6, r5
      92:	42 2c       	mov	r4, r2
      94:	94 2b       	or	r25, r20
      96:	4b 2d       	mov	r20, r11
      98:	82 54       	subi	r24, 0x42	; 66
      9a:	8a 54       	subi	r24, 0x4A	; 74
      9c:	e0 54       	subi	r30, 0x40	; 64
      9e:	e6 54       	subi	r30, 0x46	; 70
      a0:	a8 55       	subi	r26, 0x58	; 88
      a2:	a8 55       	subi	r26, 0x58	; 88
      a4:	a8 55       	subi	r26, 0x58	; 88
      a6:	a8 55       	subi	r26, 0x58	; 88
      a8:	a8 55       	subi	r26, 0x58	; 88
      aa:	a8 55       	subi	r26, 0x58	; 88
      ac:	6d 55       	subi	r22, 0x5D	; 93
      ae:	72 55       	subi	r23, 0x52	; 82
      b0:	74 55       	subi	r23, 0x54	; 84
      b2:	81 55       	subi	r24, 0x51	; 81
      b4:	95 55       	subi	r25, 0x55	; 85

000000b6 <__c.1967>:
      b6:	25 75 2f 25 75 2f 25 75 20 25 30 32 75 3a 25 30     %u/%u/%u %02u:%0
      c6:	32 75 3a 25 30 32 75 0a 00                          2u:%02u..

000000cf <__c.1964>:
      cf:	54 68 65 20 64 72 69 76 65 20 25 75 20 77 69 6c     The drive %u wil
      df:	6c 20 62 65 20 66 6f 72 6d 61 74 74 65 64 2e 20     l be formatted. 
      ef:	41 72 65 20 79 6f 75 20 73 75 72 65 3f 20 28 59     Are you sure? (Y
      ff:	2f 6e 29 3d 00                                      /n)=.

00000104 <__c.1955>:
     104:	0a 25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65     .%lu bytes copie
     114:	64 2e 0a 00                                         d...

00000118 <__c.1951>:
     118:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 00                 .Copying....

00000124 <__c.1949>:
     124:	0a 43 72 65 61 74 69 6e 67 20 22 25 73 22 00        .Creating "%s".

00000133 <__c.1947>:
     133:	4f 70 65 6e 69 6e 67 20 22 25 73 22 00              Opening "%s".

00000140 <__c.1914>:
     140:	25 6c 75 20 62 79 74 65 73 20 77 72 69 74 74 65     %lu bytes writte
     150:	6e 20 77 69 74 68 20 25 6c 75 20 62 79 74 65 73     n with %lu bytes
     160:	2f 73 65 63 2e 0a 00                                /sec...

00000167 <__c.1904>:
     167:	25 6c 75 20 62 79 74 65 73 20 72 65 61 64 20 77     %lu bytes read w
     177:	69 74 68 20 25 6c 75 20 62 79 74 65 73 2f 73 65     ith %lu bytes/se
     187:	63 2e 0a 00                                         c...

0000018b <__c.1898>:
     18b:	66 70 74 72 20 3d 20 25 6c 75 28 30 78 25 6c 58     fptr = %lu(0x%lX
     19b:	29 0a 00                                            )..

0000019e <__c.1890>:
     19e:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     1ae:	72 65 65 0a 00                                      ree..

000001b3 <__c.1888>:
     1b3:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     1c3:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     1d3:	75 20 44 69 72 28 73 29 00                          u Dir(s).

000001dc <__c.1885>:
     1dc:	25 73 0a 00                                         %s..

000001e0 <__c.1880>:
     1e0:	25 63 25 63 25 63 25 63 25 63 20 25 75 2f 25 30     %c%c%c%c%c %u/%0
     1f0:	32 75 2f 25 30 32 75 20 25 30 32 75 3a 25 30 32     2u/%02u %02u:%02
     200:	75 20 25 39 6c 75 20 20 25 73 00                    u %9lu  %s.

0000020b <__c.1873>:
     20b:	0d 25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62     .%u files, %lu b
     21b:	79 74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73     ytes..%u folders
     22b:	2e 0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64     ..%lu KB total d
     23b:	69 73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b     isk space..%lu K
     24b:	42 20 61 76 61 69 6c 61 62 6c 65 2e 0a 00           B available...

00000259 <__c.1871>:
     259:	46 41 54 20 74 79 70 65 20 3d 20 46 41 54 25 75     FAT type = FAT%u
     269:	0a 42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 3d     .Bytes/Cluster =
     279:	20 25 6c 75 0a 4e 75 6d 62 65 72 20 6f 66 20 46      %lu.Number of F
     289:	41 54 73 20 3d 20 25 75 0a 52 6f 6f 74 20 44 49     ATs = %u.Root DI
     299:	52 20 65 6e 74 72 69 65 73 20 3d 20 25 75 0a 53     R entries = %u.S
     2a9:	65 63 74 6f 72 73 2f 46 41 54 20 3d 20 25 6c 75     ectors/FAT = %lu
     2b9:	0a 4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74     .Number of clust
     2c9:	65 72 73 20 3d 20 25 6c 75 0a 46 41 54 20 73 74     ers = %lu.FAT st
     2d9:	61 72 74 20 28 6c 62 61 29 20 3d 20 25 6c 75 0a     art (lba) = %lu.
     2e9:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     2f9:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 44 61     lustor) = %lu.Da
     309:	74 61 20 73 74 61 72 74 20 28 6c 62 61 29 20 3d     ta start (lba) =
     319:	20 25 6c 75 0a 0a 2e 2e 2e 00                        %lu......

00000323 <__c.1861>:
     323:	72 63 3d 25 75 0a 00                                rc=%u..

0000032a <__c.1858>:
     32a:	72 63 3d 25 75 0a 00                                rc=%u..

00000331 <__c.1854>:
     331:	3f 3f 3f 0a 00                                      ???..

00000336 <__c.1850>:
     336:	25 30 34 58 20 25 30 32 58 2d 00                    %04X %02X-.

00000341 <__c.1838>:
     341:	53 2f 4e 3a 20 25 73 0a 00                          S/N: %s..

0000034a <__c.1836>:
     34a:	4d 6f 64 65 6c 3a 20 25 73 0a 00                    Model: %s..

00000355 <__c.1831>:
     355:	53 44 20 53 74 61 74 75 73 3a 0a 00                 SD Status:..

00000361 <__c.1829>:
     361:	4f 43 52 3a 0a 00                                   OCR:..

00000367 <__c.1827>:
     367:	43 49 44 3a 0a 00                                   CID:..

0000036d <__c.1825>:
     36d:	43 53 44 3a 0a 00                                   CSD:..

00000373 <__c.1823>:
     373:	43 61 72 64 20 74 79 70 65 3a 20 25 75 0a 00        Card type: %u..

00000382 <__c.1821>:
     382:	45 72 61 73 65 20 62 6c 6f 63 6b 3a 20 25 6c 75     Erase block: %lu
     392:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

0000039c <__c.1819>:
     39c:	53 65 63 74 6f 72 20 73 69 7a 65 3a 20 25 75 0a     Sector size: %u.
	...

000003ad <__c.1817>:
     3ad:	44 72 69 76 65 20 73 69 7a 65 3a 20 25 6c 75 20     Drive size: %lu 
     3bd:	73 65 63 74 6f 72 73 0a 00                          sectors..

000003c6 <__c.1814>:
     3c6:	72 63 3d 25 64 0a 00                                rc=%d..

000003cd <__c.1808>:
     3cd:	53 65 63 74 6f 72 3a 25 6c 75 0a 00                 Sector:%lu..

000003d9 <__c.1806>:
     3d9:	72 63 3d 25 64 0a 00                                rc=%d..

000003e0 <__c.1801>:
     3e0:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000003f1 <__c.1797>:
     3f1:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000003fd <__c.1795>:
     3fd:	0a 46 61 74 46 73 20 6d 6f 64 75 6c 65 20 74 65     .FatFs module te
     40d:	73 74 20 6d 6f 6e 69 74 6f 72 20 66 6f 72 20 41     st monitor for A
     41d:	56 52 0a 00                                         VR..

00000421 <__c.1723>:
     421:	20 25 30 32 58 00                                    %02X.

00000427 <__c.1721>:
     427:	25 30 38 6c 58 20 00                                %08lX .

0000042e <__c.1768>:
     42e:	72 63 3d 25 75 20 46 52 5f 25 53 0a 00              rc=%u FR_%S..

0000043b <str.1754>:
     43b:	4f 4b 00 44 49 53 4b 5f 45 52 52 00 49 4e 54 5f     OK.DISK_ERR.INT_
     44b:	45 52 52 00 4e 4f 54 5f 52 45 41 44 59 00 4e 4f     ERR.NOT_READY.NO
     45b:	5f 46 49 4c 45 00 4e 4f 5f 50 41 54 48 00 49 4e     _FILE.NO_PATH.IN
     46b:	56 41 4c 49 44 5f 4e 41 4d 45 00 44 45 4e 49 45     VALID_NAME.DENIE
     47b:	44 00 45 58 49 53 54 00 49 4e 56 41 4c 49 44 5f     D.EXIST.INVALID_
     48b:	4f 42 4a 45 43 54 00 57 52 49 54 45 5f 50 52 4f     OBJECT.WRITE_PRO
     49b:	54 45 43 54 45 44 00 49 4e 56 41 4c 49 44 5f 44     TECTED.INVALID_D
     4ab:	52 49 56 45 00 4e 4f 54 5f 45 4e 41 42 4c 45 44     RIVE.NOT_ENABLED
     4bb:	00 4e 4f 5f 46 49 4c 45 5f 53 59 53 54 45 4d 00     .NO_FILE_SYSTEM.
     4cb:	4d 4b 46 53 5f 41 42 4f 52 54 45 44 00 54 49 4d     MKFS_ABORTED.TIM
     4db:	45 4f 55 54 00 4c 4f 43 4b 45 44 00 4e 4f 54 5f     EOUT.LOCKED.NOT_
     4eb:	45 4e 4f 55 47 48 5f 43 4f 52 45 00 54 4f 4f 5f     ENOUGH_CORE.TOO_
     4fb:	4d 41 4e 59 5f 4f 50 45 4e 5f 46 49 4c 45 53 00     MANY_OPEN_FILES.
	...

0000050c <tbl_upper.1523>:
     50c:	41 00 42 00 43 00 44 00 45 00 46 00 47 00 48 00     A.B.C.D.E.F.G.H.
     51c:	49 00 4a 00 4b 00 4c 00 4d 00 4e 00 4f 00 50 00     I.J.K.L.M.N.O.P.
     52c:	51 00 52 00 53 00 54 00 55 00 56 00 57 00 58 00     Q.R.S.T.U.V.W.X.
     53c:	59 00 5a 00 91 03 92 03 93 03 94 03 95 03 96 03     Y.Z.............
     54c:	97 03 98 03 99 03 9a 03 9b 03 9c 03 9d 03 9e 03     ................
     55c:	9f 03 a0 03 a1 03 a3 03 a4 03 a5 03 a6 03 a7 03     ................
     56c:	a8 03 a9 03 10 04 11 04 12 04 13 04 14 04 15 04     ................
     57c:	16 04 17 04 18 04 19 04 1a 04 1b 04 1c 04 1d 04     ................
     58c:	1e 04 1f 04 20 04 21 04 22 04 23 04 24 04 25 04     .... .!.".#.$.%.
     59c:	26 04 27 04 28 04 29 04 2a 04 2b 04 2c 04 2d 04     &.'.(.).*.+.,.-.
     5ac:	2e 04 2f 04 01 04 60 21 61 21 62 21 63 21 64 21     ../...`!a!b!c!d!
     5bc:	65 21 66 21 67 21 68 21 69 21 21 ff 22 ff 23 ff     e!f!g!h!i!!.".#.
     5cc:	24 ff 25 ff 26 ff 27 ff 28 ff 29 ff 2a ff 2b ff     $.%.&.'.(.).*.+.
     5dc:	2c ff 2d ff 2e ff 2f ff 30 ff 31 ff 32 ff 33 ff     ,.-.../.0.1.2.3.
     5ec:	34 ff 35 ff 36 ff 37 ff 38 ff 39 ff 3a ff 00 00     4.5.6.7.8.9.:...

000005fc <tbl_lower.1522>:
     5fc:	61 00 62 00 63 00 64 00 65 00 66 00 67 00 68 00     a.b.c.d.e.f.g.h.
     60c:	69 00 6a 00 6b 00 6c 00 6d 00 6e 00 6f 00 70 00     i.j.k.l.m.n.o.p.
     61c:	71 00 72 00 73 00 74 00 75 00 76 00 77 00 78 00     q.r.s.t.u.v.w.x.
     62c:	79 00 7a 00 b1 03 b2 03 b3 03 b4 03 b5 03 b6 03     y.z.............
     63c:	b7 03 b8 03 b9 03 ba 03 bb 03 bc 03 bd 03 be 03     ................
     64c:	bf 03 c0 03 c1 03 c3 03 c4 03 c5 03 c6 03 c7 03     ................
     65c:	c8 03 c9 03 30 04 31 04 32 04 33 04 34 04 35 04     ....0.1.2.3.4.5.
     66c:	36 04 37 04 38 04 39 04 3a 04 3b 04 3c 04 3d 04     6.7.8.9.:.;.<.=.
     67c:	3e 04 3f 04 40 04 41 04 42 04 43 04 44 04 45 04     >.?.@.A.B.C.D.E.
     68c:	46 04 47 04 48 04 49 04 4a 04 4b 04 4c 04 4d 04     F.G.H.I.J.K.L.M.
     69c:	4e 04 4f 04 51 04 70 21 71 21 72 21 73 21 74 21     N.O.Q.p!q!r!s!t!
     6ac:	75 21 76 21 77 21 78 21 79 21 41 ff 42 ff 43 ff     u!v!w!x!y!A.B.C.
     6bc:	44 ff 45 ff 46 ff 47 ff 48 ff 49 ff 4a ff 4b ff     D.E.F.G.H.I.J.K.
     6cc:	4c ff 4d ff 4e ff 4f ff 50 ff 51 ff 52 ff 53 ff     L.M.N.O.P.Q.R.S.
     6dc:	54 ff 55 ff 56 ff 57 ff 58 ff 59 ff 5a ff 00 00     T.U.V.W.X.Y.Z...

000006ec <uni2sjis>:
     6ec:	a7 00 98 81 a8 00 4e 81 b0 00 8b 81 b1 00 7d 81     ......N.......}.
     6fc:	b4 00 4c 81 b6 00 f7 81 d7 00 7e 81 f7 00 80 81     ..L.......~.....
     70c:	91 03 9f 83 92 03 a0 83 93 03 a1 83 94 03 a2 83     ................
     71c:	95 03 a3 83 96 03 a4 83 97 03 a5 83 98 03 a6 83     ................
     72c:	99 03 a7 83 9a 03 a8 83 9b 03 a9 83 9c 03 aa 83     ................
     73c:	9d 03 ab 83 9e 03 ac 83 9f 03 ad 83 a0 03 ae 83     ................
     74c:	a1 03 af 83 a3 03 b0 83 a4 03 b1 83 a5 03 b2 83     ................
     75c:	a6 03 b3 83 a7 03 b4 83 a8 03 b5 83 a9 03 b6 83     ................
     76c:	b1 03 bf 83 b2 03 c0 83 b3 03 c1 83 b4 03 c2 83     ................
     77c:	b5 03 c3 83 b6 03 c4 83 b7 03 c5 83 b8 03 c6 83     ................
     78c:	b9 03 c7 83 ba 03 c8 83 bb 03 c9 83 bc 03 ca 83     ................
     79c:	bd 03 cb 83 be 03 cc 83 bf 03 cd 83 c0 03 ce 83     ................
     7ac:	c1 03 cf 83 c3 03 d0 83 c4 03 d1 83 c5 03 d2 83     ................
     7bc:	c6 03 d3 83 c7 03 d4 83 c8 03 d5 83 c9 03 d6 83     ................
     7cc:	01 04 46 84 10 04 40 84 11 04 41 84 12 04 42 84     ..F...@...A...B.
     7dc:	13 04 43 84 14 04 44 84 15 04 45 84 16 04 47 84     ..C...D...E...G.
     7ec:	17 04 48 84 18 04 49 84 19 04 4a 84 1a 04 4b 84     ..H...I...J...K.
     7fc:	1b 04 4c 84 1c 04 4d 84 1d 04 4e 84 1e 04 4f 84     ..L...M...N...O.
     80c:	1f 04 50 84 20 04 51 84 21 04 52 84 22 04 53 84     ..P. .Q.!.R.".S.
     81c:	23 04 54 84 24 04 55 84 25 04 56 84 26 04 57 84     #.T.$.U.%.V.&.W.
     82c:	27 04 58 84 28 04 59 84 29 04 5a 84 2a 04 5b 84     '.X.(.Y.).Z.*.[.
     83c:	2b 04 5c 84 2c 04 5d 84 2d 04 5e 84 2e 04 5f 84     +.\.,.].-.^..._.
     84c:	2f 04 60 84 30 04 70 84 31 04 71 84 32 04 72 84     /.`.0.p.1.q.2.r.
     85c:	33 04 73 84 34 04 74 84 35 04 75 84 36 04 77 84     3.s.4.t.5.u.6.w.
     86c:	37 04 78 84 38 04 79 84 39 04 7a 84 3a 04 7b 84     7.x.8.y.9.z.:.{.
     87c:	3b 04 7c 84 3c 04 7d 84 3d 04 7e 84 3e 04 80 84     ;.|.<.}.=.~.>...
     88c:	3f 04 81 84 40 04 82 84 41 04 83 84 42 04 84 84     ?...@...A...B...
     89c:	43 04 85 84 44 04 86 84 45 04 87 84 46 04 88 84     C...D...E...F...
     8ac:	47 04 89 84 48 04 8a 84 49 04 8b 84 4a 04 8c 84     G...H...I...J...
     8bc:	4b 04 8d 84 4c 04 8e 84 4d 04 8f 84 4e 04 90 84     K...L...M...N...
     8cc:	4f 04 91 84 51 04 76 84 10 20 5d 81 15 20 5c 81     O...Q.v.. ].. \.
     8dc:	18 20 65 81 19 20 66 81 1c 20 67 81 1d 20 68 81     . e.. f.. g.. h.
     8ec:	20 20 f5 81 21 20 f6 81 25 20 64 81 26 20 63 81       ..! ..% d.& c.
     8fc:	30 20 f1 81 32 20 8c 81 33 20 8d 81 3b 20 a6 81     0 ..2 ..3 ..; ..
     90c:	03 21 8e 81 16 21 82 87 21 21 84 87 2b 21 f0 81     .!...!..!!..+!..
     91c:	60 21 54 87 61 21 55 87 62 21 56 87 63 21 57 87     `!T.a!U.b!V.c!W.
     92c:	64 21 58 87 65 21 59 87 66 21 5a 87 67 21 5b 87     d!X.e!Y.f!Z.g![.
     93c:	68 21 5c 87 69 21 5d 87 90 21 a9 81 91 21 aa 81     h!\.i!]..!...!..
     94c:	92 21 a8 81 93 21 ab 81 d2 21 cb 81 d4 21 cc 81     .!...!...!...!..
     95c:	00 22 cd 81 02 22 dd 81 03 22 ce 81 07 22 de 81     ."..."..."..."..
     96c:	08 22 b8 81 0b 22 b9 81 11 22 94 87 1a 22 e3 81     ."..."..."..."..
     97c:	1d 22 e5 81 1e 22 87 81 1f 22 98 87 20 22 da 81     ."..."...".. "..
     98c:	25 22 61 81 27 22 c8 81 28 22 c9 81 29 22 bf 81     %"a.'"..("..)"..
     99c:	2a 22 be 81 2b 22 e7 81 2c 22 e8 81 2e 22 93 87     *"..+"..,"..."..
     9ac:	34 22 88 81 35 22 e6 81 3d 22 e4 81 52 22 e0 81     4"..5"..="..R"..
     9bc:	60 22 82 81 61 22 df 81 66 22 85 81 67 22 86 81     `"..a"..f"..g"..
     9cc:	6a 22 e1 81 6b 22 e2 81 82 22 bc 81 83 22 bd 81     j"..k"..."..."..
     9dc:	86 22 ba 81 87 22 bb 81 a5 22 db 81 bf 22 99 87     ."..."..."..."..
     9ec:	12 23 dc 81 60 24 40 87 61 24 41 87 62 24 42 87     .#..`$@.a$A.b$B.
     9fc:	63 24 43 87 64 24 44 87 65 24 45 87 66 24 46 87     c$C.d$D.e$E.f$F.
     a0c:	67 24 47 87 68 24 48 87 69 24 49 87 6a 24 4a 87     g$G.h$H.i$I.j$J.
     a1c:	6b 24 4b 87 6c 24 4c 87 6d 24 4d 87 6e 24 4e 87     k$K.l$L.m$M.n$N.
     a2c:	6f 24 4f 87 70 24 50 87 71 24 51 87 72 24 52 87     o$O.p$P.q$Q.r$R.
     a3c:	73 24 53 87 00 25 9f 84 01 25 aa 84 02 25 a0 84     s$S..%...%...%..
     a4c:	03 25 ab 84 0c 25 a1 84 0f 25 ac 84 10 25 a2 84     .%...%...%...%..
     a5c:	13 25 ad 84 14 25 a4 84 17 25 af 84 18 25 a3 84     .%...%...%...%..
     a6c:	1b 25 ae 84 1c 25 a5 84 1d 25 ba 84 20 25 b5 84     .%...%...%.. %..
     a7c:	23 25 b0 84 24 25 a7 84 25 25 bc 84 28 25 b7 84     #%..$%..%%..(%..
     a8c:	2b 25 b2 84 2c 25 a6 84 2f 25 b6 84 30 25 bb 84     +%..,%../%..0%..
     a9c:	33 25 b1 84 34 25 a8 84 37 25 b8 84 38 25 bd 84     3%..4%..7%..8%..
     aac:	3b 25 b3 84 3c 25 a9 84 3f 25 b9 84 42 25 be 84     ;%..<%..?%..B%..
     abc:	4b 25 b4 84 a0 25 a1 81 a1 25 a0 81 b2 25 a3 81     K%...%...%...%..
     acc:	b3 25 a2 81 bc 25 a5 81 bd 25 a4 81 c6 25 9f 81     .%...%...%...%..
     adc:	c7 25 9e 81 cb 25 9b 81 ce 25 9d 81 cf 25 9c 81     .%...%...%...%..
     aec:	ef 25 fc 81 05 26 9a 81 06 26 99 81 40 26 8a 81     .%...&...&..@&..
     afc:	42 26 89 81 6a 26 f4 81 6d 26 f3 81 6f 26 f2 81     B&..j&..m&..o&..
     b0c:	00 30 40 81 01 30 41 81 02 30 42 81 03 30 56 81     .0@..0A..0B..0V.
     b1c:	05 30 58 81 06 30 59 81 07 30 5a 81 08 30 71 81     .0X..0Y..0Z..0q.
     b2c:	09 30 72 81 0a 30 73 81 0b 30 74 81 0c 30 75 81     .0r..0s..0t..0u.
     b3c:	0d 30 76 81 0e 30 77 81 0f 30 78 81 10 30 79 81     .0v..0w..0x..0y.
     b4c:	11 30 7a 81 12 30 a7 81 13 30 ac 81 14 30 6b 81     .0z..0...0...0k.
     b5c:	15 30 6c 81 1d 30 80 87 1f 30 81 87 41 30 9f 82     .0l..0...0..A0..
     b6c:	42 30 a0 82 43 30 a1 82 44 30 a2 82 45 30 a3 82     B0..C0..D0..E0..
     b7c:	46 30 a4 82 47 30 a5 82 48 30 a6 82 49 30 a7 82     F0..G0..H0..I0..
     b8c:	4a 30 a8 82 4b 30 a9 82 4c 30 aa 82 4d 30 ab 82     J0..K0..L0..M0..
     b9c:	4e 30 ac 82 4f 30 ad 82 50 30 ae 82 51 30 af 82     N0..O0..P0..Q0..
     bac:	52 30 b0 82 53 30 b1 82 54 30 b2 82 55 30 b3 82     R0..S0..T0..U0..
     bbc:	56 30 b4 82 57 30 b5 82 58 30 b6 82 59 30 b7 82     V0..W0..X0..Y0..
     bcc:	5a 30 b8 82 5b 30 b9 82 5c 30 ba 82 5d 30 bb 82     Z0..[0..\0..]0..
     bdc:	5e 30 bc 82 5f 30 bd 82 60 30 be 82 61 30 bf 82     ^0.._0..`0..a0..
     bec:	62 30 c0 82 63 30 c1 82 64 30 c2 82 65 30 c3 82     b0..c0..d0..e0..
     bfc:	66 30 c4 82 67 30 c5 82 68 30 c6 82 69 30 c7 82     f0..g0..h0..i0..
     c0c:	6a 30 c8 82 6b 30 c9 82 6c 30 ca 82 6d 30 cb 82     j0..k0..l0..m0..
     c1c:	6e 30 cc 82 6f 30 cd 82 70 30 ce 82 71 30 cf 82     n0..o0..p0..q0..
     c2c:	72 30 d0 82 73 30 d1 82 74 30 d2 82 75 30 d3 82     r0..s0..t0..u0..
     c3c:	76 30 d4 82 77 30 d5 82 78 30 d6 82 79 30 d7 82     v0..w0..x0..y0..
     c4c:	7a 30 d8 82 7b 30 d9 82 7c 30 da 82 7d 30 db 82     z0..{0..|0..}0..
     c5c:	7e 30 dc 82 7f 30 dd 82 80 30 de 82 81 30 df 82     ~0...0...0...0..
     c6c:	82 30 e0 82 83 30 e1 82 84 30 e2 82 85 30 e3 82     .0...0...0...0..
     c7c:	86 30 e4 82 87 30 e5 82 88 30 e6 82 89 30 e7 82     .0...0...0...0..
     c8c:	8a 30 e8 82 8b 30 e9 82 8c 30 ea 82 8d 30 eb 82     .0...0...0...0..
     c9c:	8e 30 ec 82 8f 30 ed 82 90 30 ee 82 91 30 ef 82     .0...0...0...0..
     cac:	92 30 f0 82 93 30 f1 82 9b 30 4a 81 9c 30 4b 81     .0...0...0J..0K.
     cbc:	9d 30 54 81 9e 30 55 81 a1 30 40 83 a2 30 41 83     .0T..0U..0@..0A.
     ccc:	a3 30 42 83 a4 30 43 83 a5 30 44 83 a6 30 45 83     .0B..0C..0D..0E.
     cdc:	a7 30 46 83 a8 30 47 83 a9 30 48 83 aa 30 49 83     .0F..0G..0H..0I.
     cec:	ab 30 4a 83 ac 30 4b 83 ad 30 4c 83 ae 30 4d 83     .0J..0K..0L..0M.
     cfc:	af 30 4e 83 b0 30 4f 83 b1 30 50 83 b2 30 51 83     .0N..0O..0P..0Q.
     d0c:	b3 30 52 83 b4 30 53 83 b5 30 54 83 b6 30 55 83     .0R..0S..0T..0U.
     d1c:	b7 30 56 83 b8 30 57 83 b9 30 58 83 ba 30 59 83     .0V..0W..0X..0Y.
     d2c:	bb 30 5a 83 bc 30 5b 83 bd 30 5c 83 be 30 5d 83     .0Z..0[..0\..0].
     d3c:	bf 30 5e 83 c0 30 5f 83 c1 30 60 83 c2 30 61 83     .0^..0_..0`..0a.
     d4c:	c3 30 62 83 c4 30 63 83 c5 30 64 83 c6 30 65 83     .0b..0c..0d..0e.
     d5c:	c7 30 66 83 c8 30 67 83 c9 30 68 83 ca 30 69 83     .0f..0g..0h..0i.
     d6c:	cb 30 6a 83 cc 30 6b 83 cd 30 6c 83 ce 30 6d 83     .0j..0k..0l..0m.
     d7c:	cf 30 6e 83 d0 30 6f 83 d1 30 70 83 d2 30 71 83     .0n..0o..0p..0q.
     d8c:	d3 30 72 83 d4 30 73 83 d5 30 74 83 d6 30 75 83     .0r..0s..0t..0u.
     d9c:	d7 30 76 83 d8 30 77 83 d9 30 78 83 da 30 79 83     .0v..0w..0x..0y.
     dac:	db 30 7a 83 dc 30 7b 83 dd 30 7c 83 de 30 7d 83     .0z..0{..0|..0}.
     dbc:	df 30 7e 83 e0 30 80 83 e1 30 81 83 e2 30 82 83     .0~..0...0...0..
     dcc:	e3 30 83 83 e4 30 84 83 e5 30 85 83 e6 30 86 83     .0...0...0...0..
     ddc:	e7 30 87 83 e8 30 88 83 e9 30 89 83 ea 30 8a 83     .0...0...0...0..
     dec:	eb 30 8b 83 ec 30 8c 83 ed 30 8d 83 ee 30 8e 83     .0...0...0...0..
     dfc:	ef 30 8f 83 f0 30 90 83 f1 30 91 83 f2 30 92 83     .0...0...0...0..
     e0c:	f3 30 93 83 f4 30 94 83 f5 30 95 83 f6 30 96 83     .0...0...0...0..
     e1c:	fb 30 45 81 fc 30 5b 81 fd 30 52 81 fe 30 53 81     .0E..0[..0R..0S.
     e2c:	31 32 8a 87 32 32 8b 87 39 32 8c 87 a4 32 85 87     12..22..92...2..
     e3c:	a5 32 86 87 a6 32 87 87 a7 32 88 87 a8 32 89 87     .2...2...2...2..
     e4c:	03 33 65 87 0d 33 69 87 14 33 60 87 18 33 63 87     .3e..3i..3`..3c.
     e5c:	22 33 61 87 23 33 6b 87 26 33 6a 87 27 33 64 87     "3a.#3k.&3j.'3d.
     e6c:	2b 33 6c 87 36 33 66 87 3b 33 6e 87 49 33 5f 87     +3l.63f.;3n.I3_.
     e7c:	4a 33 6d 87 4d 33 62 87 51 33 67 87 57 33 68 87     J3m.M3b.Q3g.W3h.
     e8c:	7b 33 7e 87 7c 33 8f 87 7d 33 8e 87 7e 33 8d 87     {3~.|3..}3..~3..
     e9c:	8e 33 72 87 8f 33 73 87 9c 33 6f 87 9d 33 70 87     .3r..3s..3o..3p.
     eac:	9e 33 71 87 a1 33 75 87 c4 33 74 87 cd 33 83 87     .3q..3u..3t..3..
     ebc:	00 4e ea 88 01 4e 9a 92 03 4e b5 8e 07 4e 9c 96     .N...N...N...N..
     ecc:	08 4e e4 8f 09 4e 4f 8e 0a 4e e3 8f 0b 4e ba 89     .N...NO..N...N..
     edc:	0d 4e 73 95 0e 4e 5e 97 11 4e 4e 89 14 4e 8e 8a     .Ns..N^..NN..N..
     eec:	15 4e a1 98 16 4e a2 90 18 4e 75 8b 19 4e b8 95     .N...N...Nu..N..
     efc:	1e 4e e5 8f 21 4e bc 97 26 4e c0 95 2a 4e a2 98     .N..!N..&N..*N..
     f0c:	2d 4e 86 92 32 4e f8 8b 38 4e db 8a 39 4e 4f 92     -N..2N..8N..9NO.
     f1c:	3b 4e e5 8e 3c 4e a5 98 43 4e 54 94 45 4e 76 8b     ;N..<N..CNT.ENv.
     f2c:	4b 4e 56 94 4d 4e e1 93 4e 4e c1 8c 4f 4e 52 96     KNV.MN..NN..ONR.
     f3c:	56 4e a8 98 57 4e e6 8f 59 4e b3 89 5d 4e e3 8b     VN..WN..YN..]N..
     f4c:	5e 4e ee 8c 5f 4e e7 96 71 4e 90 97 73 4e fb 93     ^N.._N..qN..sN..
     f5c:	7e 4e a3 8a 80 4e 54 8b 86 4e b9 97 88 4e 5c 97     ~N...NT..N...N\.
     f6c:	89 4e 88 91 8b 4e 96 8e 8c 4e f1 93 8e 4e b0 98     .N...N...N...N..
     f7c:	91 4e 5d 89 92 4e dd 8c 94 4e dc 8c 95 4e e4 88     .N]..N...N...N..
     f8c:	98 4e 6a 98 99 4e 69 98 9b 4e b1 8d 9c 4e 9f 88     .Nj..Ni..N...N..
     f9c:	9e 4e b1 98 a1 4e 53 96 a4 4e f0 8c a5 4e e5 88     .N...NS..N...N..
     fac:	a6 4e 92 96 a8 4e 9c 8b ab 4e 9d 8b ac 4e 9e 8b     .N...N...N...N..
     fbc:	ad 4e e0 92 ae 4e ba 97 ba 4e 6c 90 c0 4e 59 8f     .N...N...Nl..NY.
     fcc:	c1 4e 6d 90 c7 4e 77 8b ca 4e a1 8d cb 4e ee 89     .Nm..Nw..N...N..
     fdc:	cf 4e a7 95 d4 4e 65 8e d5 4e 64 8e d6 4e bc 91     .N...Ne..Nd..N..
     fec:	d8 4e 74 95 d9 4e e5 90 dd 4e 57 81 e3 4e e3 91     .Nt..N...NW..N..
     ffc:	e4 4e df 97 e5 4e c8 88 ee 4e bc 89 f0 4e c2 8b     .N...N...N...N..
    100c:	f2 4e 87 92 f6 4e 8f 8c fb 4e 43 94 01 4f e9 8a     .N...N...NC..O..
    101c:	0a 4f c9 88 0d 4f de 8c 0e 4f ea 8a 0f 4f 9a 95     .O...O...O...O..
    102c:	10 4f b0 94 11 4f 78 8b 1a 4f ef 89 1d 4f 60 93     .O...Ox..O...O`.
    103c:	2f 4f 8c 94 34 4f ba 94 36 4f e0 97 38 4f 4c 90     /O..4O..6O..8OL.
    104c:	3a 4f 66 8e 3c 4f 97 8e 3d 4f be 89 43 4f cf 92     :Of.<O..=O..CO..
    105c:	46 4f 41 92 47 4f c8 98 4d 4f ca 88 4e 4f e1 92     FOA.GO..MO..NO..
    106c:	4f 4f 5a 8f 50 4f b2 8d 51 4f 43 97 53 4f cc 91     OOZ.PO..QOC.SO..
    107c:	55 4f bd 89 57 4f c7 98 59 4f 5d 97 5b 4f c5 98     UO..WO..YO].[O..
    108c:	5c 4f ec 8d 73 4f c0 89 75 4f b9 95 7c 4f f1 8c     \O..sO..uO..|O..
    109c:	7f 4f 67 8e 83 4f a4 8a 86 4f d2 98 8b 4f e1 97     .Og..O...O...O..
    10ac:	8d 4f 98 8e 9b 4f 9f 8b 9d 4f cb 88 a0 4f a0 8b     .O...O...O...O..
    10bc:	a1 4f bf 89 ad 4f 99 96 ae 4f 8e 95 af 4f f2 8c     .O...O...O...O..
    10cc:	b5 4f 4e 90 b6 4f b5 97 bf 4f d6 95 c2 4f 57 8c     .ON..O...O...OW.
    10dc:	c3 4f a3 91 c4 4f e2 89 ca 4f 72 8f d7 4f ad 91     .O...O...Or..O..
    10ec:	dd 4f db 95 e1 4f 4d 90 e3 4f 93 96 ee 4f 43 8f     .O...OM..O...OC.
    10fc:	f3 4f 6f 94 f5 4f 55 95 f8 4f ee 95 fa 4f b4 89     .Oo..OU..O...O..
    110c:	09 50 71 91 0b 50 c2 8c 0d 50 7b 94 12 50 7c 93     .Pq..P...P{..P|.
    111c:	16 50 f4 8c 19 50 f3 8c 1f 50 d8 8e 23 50 ed 95     .P...P...P..#P..
    112c:	24 50 6c 92 26 50 91 8c 2b 50 cf 97 2d 50 60 98     $Pl.&P..+P..-P`.
    113c:	36 50 e4 8b 39 50 90 8c 49 50 cc 88 4f 50 ce 95     6P..9P..IP..OP..
    114c:	55 50 f1 98 5c 50 e2 92 65 50 92 8c 72 50 c3 8e     UP..\P..eP..rP..
    115c:	74 50 a4 91 75 50 e3 92 76 50 f4 8b 7d 50 55 8b     tP..uP..vP..}PU.
    116c:	8d 50 54 96 91 50 86 8c 98 50 50 8e 99 50 f5 94     .PT..P...PP..P..
    117c:	ac 50 c3 8d ad 50 62 97 b5 50 c2 8d b7 50 9d 8f     .P...Pb..P...P..
    118c:	be 50 58 8c c5 50 cd 8b cd 50 ad 93 cf 50 9c 91     .PX..P...P...P..
    119c:	d1 50 a1 8b d5 50 6c 96 da 50 bb 97 e7 50 6d 91     .P...Pl..P...Pm.
    11ac:	fb 50 c6 95 00 51 56 8b 04 51 ad 89 12 51 f2 8e     .P...QV..Q...Q..
    11bc:	1a 51 52 99 1f 51 9e 8f 2a 51 44 97 32 51 d7 96     .QR..Q..*QD.2Q..
    11cc:	41 51 f2 88 43 51 b3 8c 44 51 5a 8c 45 51 5b 8f     AQ..CQ..DQZ.EQ[.
    11dc:	46 51 9b 92 47 51 a2 8b 48 51 e6 90 49 51 f5 8c     FQ..GQ..HQ..IQ..
    11ec:	4b 51 8e 8d 4c 51 5b 99 4d 51 c6 96 4e 51 65 93     KQ..LQ[.MQ..NQe.
    11fc:	50 51 99 8e 52 51 5a 99 54 51 5c 99 5a 51 7d 93     PQ..RQZ.TQ\.ZQ}.
    120c:	5c 51 95 8a 65 51 fc 93 68 51 53 91 6b 51 aa 94     \Q..eQ..hQS.kQ..
    121c:	6c 51 f6 8c 6d 51 5a 98 71 51 a4 8b 75 51 ba 95     lQ..mQZ.qQ..uQ..
    122c:	76 51 b4 91 77 51 ef 8b 78 51 54 93 7c 51 93 8c     vQ..wQ..xQT.|Q..
    123c:	85 51 e0 93 86 51 7e 89 8a 51 fb 8d 8d 51 c4 8d     .Q...Q~..Q...Q..
    124c:	91 51 68 99 92 51 60 96 97 51 e7 8f 99 51 ca 8e     .Qh..Q`..Q...Q..
    125c:	a0 51 a5 8a a4 51 6c 99 a5 51 bb 96 a8 51 79 95     .Q...Ql..Q...Qy.
    126c:	ac 51 7e 93 b4 51 e1 8d b6 51 e8 96 b7 51 e2 97     .Q~..Q...Q...Q..
    127c:	c4 51 a6 90 c6 51 79 8f cb 51 9c 92 cc 51 bd 97     .Q...Qy..Q...Q..
    128c:	cd 51 80 93 dc 51 a3 ea dd 51 c3 8b e0 51 7b 99     .Q...Q...Q...Q{.
    129c:	e1 51 7d 96 e6 51 88 8f e7 51 fa 91 ea 51 e2 93     .Q}..Q...Q...Q..
    12ac:	f1 51 4d 8a f6 51 a5 8b f8 51 ca 93 f9 51 9a 89     .QM..Q...Q...Q..
    12bc:	fa 51 6f 8f fd 51 9f 94 00 52 81 93 03 52 6e 90     .Qo..Q...R...Rn.
    12cc:	06 52 aa 95 07 52 d8 90 08 52 a0 8a 0a 52 a7 8a     .R...R...R...R..
    12dc:	11 52 59 8c 17 52 f1 97 1d 52 89 8f 24 52 bb 94     .RY..R...R..$R..
    12ec:	25 52 ca 95 29 52 98 97 30 52 9e 93 36 52 a7 90     %R..)R..0R..6R..
    12fc:	37 52 fc 8d 38 52 94 8c 39 52 8b 99 3a 52 68 8e     7R..8R..9R..:Rh.
    130c:	3b 52 8f 8d 43 52 e4 92 47 52 a5 91 4a 52 ed 8d     ;R..CR..GR..JR..
    131c:	4d 52 4f 91 56 52 55 96 5b 52 84 8d 63 52 95 8c     MRO.VRU.[R..cR..
    132c:	64 52 dc 8d 65 52 8d 94 6a 52 92 99 6f 52 9b 95     dR..eR..jR..oR..
    133c:	70 52 e8 8f 72 52 84 8a 74 52 93 99 75 52 6e 91     pR..rR..tR..uRn.
    134c:	83 52 63 8a 87 52 80 8c 88 52 9c 99 89 52 ab 97     .Rc..R...R...R..
    135c:	9b 52 cd 97 9f 52 f7 8c a0 52 c1 89 a3 52 f2 97     .R...R...R...R..
    136c:	a9 52 95 8f aa 52 77 93 ab 52 85 8d b1 52 e3 97     .R...Rw..R...R..
    137c:	b4 52 4a 98 b9 52 f8 8c be 52 4e 8a c3 52 75 96     .RJ..R...RN..Ru.
    138c:	c5 52 ba 92 c7 52 45 97 c9 52 d7 95 d5 52 ae 93     .R...RE..R...R..
    139c:	d8 52 a8 8a d9 52 b1 96 dd 52 9f 8f df 52 e5 95     .R...R...R...R..
    13ac:	e2 52 a8 90 e4 52 ce 8b e7 52 a9 8a f2 52 4d 8c     .R...R...R...RM.
    13bc:	fa 52 d9 8e fe 52 f9 8c ff 52 dc 96 01 53 e6 96     .R...R...R...S..
    13cc:	02 53 f5 93 05 53 ef 95 16 53 bb 89 17 53 6b 96     .S...S...S...Sk.
    13dc:	19 53 fa 8d 1d 53 78 91 20 53 a0 8f 21 53 a7 8b     .S...Sx. S..!S..
    13ec:	2a 53 d9 94 39 53 43 95 3a 53 e6 8b 3b 53 e3 88     *S..9SC.:S..;S..
    13fc:	3f 53 bd 93 40 53 bd 99 41 53 5c 8f 43 53 e7 90     ?S..@S..AS\.CS..
    140c:	47 53 a1 8f 48 53 df 8c 4a 53 bc 94 4d 53 c2 99     GS..HS..JS..MS..
    141c:	51 53 da 94 52 53 b2 91 53 53 ec 91 54 53 a6 8b     QS..RS..SS..TS..
    142c:	57 53 ec 93 58 53 50 92 5a 53 8e 94 5c 53 6d 96     WS..XSP.ZS..\Sm.
    143c:	60 53 e8 90 66 53 54 8c 6f 53 4b 89 70 53 f3 88     `S..fST.oSK.pS..
    144c:	71 53 eb 8a 73 53 a6 91 74 53 70 8b 75 53 91 97     qS..sS..tSp.uS..
    145c:	78 53 b5 89 7f 53 a8 8b 82 53 ca 99 84 53 ef 96     xS...S...S...S..
    146c:	98 53 d0 97 9a 53 fa 8c 9f 53 b4 8c a0 53 cc 99     .S...S...S...S..
    147c:	a8 53 7e 90 a9 53 58 89 ad 53 7d 89 b3 53 b5 8c     .S~..SX..S}..S..
    148c:	bb 53 8e 8b c2 53 51 8e c8 53 94 96 c9 53 b3 8d     .S...SQ..S...S..
    149c:	ca 53 79 8b cb 53 46 97 cc 53 6f 91 cd 53 bd 94     .Sy..SF..So..S..
    14ac:	ce 53 fb 8e d4 53 66 8f d6 53 e6 8e d7 53 f3 8e     .S...Sf..S...S..
    14bc:	d9 53 96 8f db 53 be 94 e1 53 62 89 e2 53 70 91     .S...S...Sb..Sp.
    14cc:	e3 53 fb 8c e4 53 c3 8c e5 53 e5 8b e9 53 40 92     .S...S...S...S@.
    14dc:	ea 53 fc 91 eb 53 a9 8b ec 53 a2 8f ef 53 c2 89     .S...S...S...S..
    14ec:	f0 53 e4 91 f1 53 b6 8e f2 53 6a 8e f3 53 45 89     .S...S...Sj..SE.
    14fc:	f6 53 90 8a f7 53 86 8d f8 53 69 8e 03 54 68 8b     .S...S...Si..Th.
    150c:	04 54 65 8a 08 54 87 8d 09 54 67 8b 0a 54 dd 92     .Te..T...Tg..T..
    151c:	0b 54 44 89 0c 54 af 93 0d 54 bc 96 0e 54 40 8d     .TD..T...T...T@.
    152c:	0f 54 99 97 10 54 66 93 11 54 fc 8c 1b 54 4e 8c     .T...Tf..T...TN.
    153c:	1f 54 e1 8b 20 54 69 96 26 54 db 94 2b 54 dc 8a     .T.. Ti.&T..+T..
    154c:	38 54 7a 8b 39 54 81 90 3b 54 ab 95 3e 54 e1 8c     8Tz.9T..;T..>T..
    155c:	42 54 43 98 46 54 f0 95 48 54 e6 92 49 54 e0 8c     BTC.FT..HT..IT..
    156c:	4a 54 90 8d 51 54 db 93 68 54 fc 8e 6a 54 f4 8e     JT..QT..hT..jT..
    157c:	73 54 a1 96 7b 54 ef 99 7c 54 c4 8c 7d 54 bd 96     sT..{T..|T..}T..
    158c:	80 54 f0 99 8b 54 ee 8d 8c 54 61 98 8e 54 e9 99     .T...T...Ta..T..
    159c:	ac 54 f9 99 b2 54 e7 8d b3 54 50 8a bd 54 f4 88     .T...T...TP..T..
    15ac:	c0 54 a3 88 c1 54 69 95 c9 54 c6 8d e1 54 f5 88     .T...Ti..T...T..
    15bc:	e8 54 a3 8f e9 54 89 96 f2 54 4e 93 04 55 53 89     .T...T...TN..US.
    15cc:	06 55 b4 8d 07 55 4f 90 10 55 82 93 16 55 a0 88     .U...UO..U...U..
    15dc:	2f 55 42 97 31 55 a5 8f 3e 55 c1 91 44 55 ed 91     /UB.1U..>U..DU..
    15ec:	46 55 a4 8f 4f 55 e2 96 53 55 5b 8c 84 55 50 91     FU..OU..SU[..UP.
    15fc:	89 55 41 8d 8b 55 9d 92 98 55 62 9a 9a 55 ab 8a     .UA..U...Ub..U..
    160c:	9c 55 ec 8a 9d 55 85 8a a7 55 96 8c aa 55 72 91     .U...U...U...Ur.
    161c:	ab 55 69 8b ac 55 aa 8b ae 55 64 9a b0 55 f2 8b     .Ui..U...Ud..U..
    162c:	b6 55 63 89 e3 55 6b 8e 06 56 51 92 09 56 c3 89     .Uc..Uk..VQ..V..
    163c:	14 56 71 9a 17 56 a6 8f 18 56 52 89 29 56 dc 89     .Vq..V...VR.)V..
    164c:	31 56 fa 8f 42 56 5c 89 4c 56 58 91 5b 56 9a 8a     1V..BV\.LVX.[V..
    165c:	68 56 ed 8a 74 56 ac 95 78 56 d3 93 7a 56 b6 94     hV..tV..xV..zV..
    166c:	87 56 64 8a a2 56 58 94 c0 56 93 9a c1 56 91 9a     .Vd..VX..V...V..
    167c:	c3 56 92 9a d3 56 97 9a da 56 fa 8e db 56 6c 8e     .V...V...V...Vl.
    168c:	de 56 f1 89 e0 56 f6 88 e3 56 63 92 ee 56 99 9a     .V...V...Vc..V..
    169c:	f0 56 a2 8d f2 56 cd 88 f3 56 7d 90 fa 56 c5 8c     .V...V...V}..V..
    16ac:	fd 56 91 8d 03 57 de 95 0b 57 a0 9a 0f 57 97 8c     .V...W...W...W..
    16bc:	12 57 80 89 13 57 a2 9a 1f 57 79 93 27 57 b3 88     .W...W...Wy.'W..
    16cc:	28 57 dd 8d 2d 57 5c 8c 30 57 6e 92 42 57 e2 8d     (W..-W\.0Wn.BW..
    16dc:	47 57 cf 8b 4a 57 56 96 50 57 bf 8d 51 57 42 8d     GW..JWV.PW..QWB.
    16ec:	64 57 a3 8d 66 57 52 92 6a 57 d8 92 82 57 82 90     dW..fWR.jW...W..
    16fc:	8b 57 5e 8c a2 57 43 8d a3 57 5f 8a c3 57 ba 9a     .W^..WC..W_..W..
    170c:	cb 57 84 96 ce 57 e9 8f dc 57 57 94 df 57 e6 88     .W...W...WW..W..
    171c:	e0 57 75 95 f4 57 fb 8f f7 57 b7 8e f9 57 7c 94     .Wu..W...W...W|.
    172c:	fa 57 ee 8a fc 57 e9 8d 00 58 78 96 02 58 b0 93     .W...W...Xx..X..
    173c:	05 58 98 8c 06 58 cd 91 15 58 c2 91 21 58 c6 9a     .X...X...X..!X..
    174c:	24 58 e7 92 2a 58 ac 8a 30 58 81 89 31 58 f1 95     $X..*X..0X..1X..
    175c:	34 58 ea 8f 35 58 67 93 3a 58 e4 8d 40 58 bb 95     4X..5Xg.:X..@X..
    176c:	41 58 db 97 4a 58 f2 89 51 58 59 91 54 58 83 93     AX..JX..QXY.TX..
    177c:	57 58 68 93 58 58 84 93 59 58 b7 94 5a 58 cb 92     WXh.XX..YX..ZX..
    178c:	5e 58 c7 8d 69 58 96 89 6b 58 55 93 75 58 6f 90     ^X..iX..kXU.uXo.
    179c:	79 58 cd 9a 7e 58 6d 8f 83 58 ab 8b 93 58 e6 95     yX..~Xm..X...X..
    17ac:	97 58 9d 91 9c 58 c4 92 9f 58 d0 9a a8 58 6e 96     .X...X...X...Xn.
    17bc:	b3 58 ad 95 be 58 a4 8d c1 58 c7 95 c7 58 64 92     .X...X...X...Xd.
    17cc:	ca 58 f3 89 cc 58 eb 8f d5 58 88 8d eb 58 6d 8e     .X...X...X...Xm.
    17dc:	ec 58 70 90 ee 58 73 91 f0 58 ba 90 f1 58 eb 88     .Xp..Xs..X...X..
    17ec:	f2 58 84 94 f7 58 d9 92 09 59 cf 95 0f 59 c4 89     .X...X...Y...Y..
    17fc:	15 59 5b 97 16 59 4f 8a 19 59 67 8f 1a 59 bd 91     .Y[..YO..Yg..Y..
    180c:	1c 59 e9 96 22 59 b2 96 27 59 e5 91 29 59 56 93     .Y.."Y..'Y..)YV.
    181c:	2a 59 be 91 2b 59 76 95 2e 59 9b 89 31 59 b8 8e     *Y..+Yv..Y..1Y..
    182c:	37 59 ce 88 44 59 82 89 47 59 ef 8a 48 59 de 93     7Y..DY..GY..HY..
    183c:	49 59 f2 95 4f 59 74 91 51 59 5f 8c 54 59 7a 96     IY..OYt.QY_.TYz.
    184c:	57 59 85 93 65 59 9c 89 68 59 a7 8f 6a 59 44 92     WY..eY..hY..jYD.
    185c:	6e 59 b1 95 73 59 97 8f 74 59 7a 93 7d 59 44 8d     nY..sY..tYz.}YD.
    186c:	82 59 40 94 83 59 dc 94 84 59 cf 96 8a 59 44 94     .Y@..Y...Y...YD.
    187c:	93 59 57 8b 96 59 64 97 99 59 ad 96 a5 59 c3 91     .YW..Yd..Y...Y..
    188c:	a8 59 57 96 ac 59 69 93 b9 59 85 96 bb 59 c8 8d     .YW..Yi..Y...Y..
    189c:	be 59 a8 8f c9 59 6f 8e cb 59 6e 8e d0 59 b7 88     .Y...Yo..Yn..Y..
    18ac:	d1 59 c6 8c d3 59 a9 90 d4 59 cf 88 e5 59 57 89     .Y...Y...Y...YW.
    18bc:	e6 59 ad 8a ea 59 c3 96 eb 59 50 95 f6 59 a6 88     .Y...Y...YP..Y..
    18cc:	fb 59 f7 88 ff 59 70 8e 01 5a d0 88 03 5a a1 88     .Y...Yp..Z...Z..
    18dc:	18 5a ba 96 20 5a 50 90 29 5a d8 95 2f 5a e2 8c     .Z.. ZP.)Z../Z..
    18ec:	3c 5a a9 8f 41 5a 4b 98 46 5a 6b 94 5a 5a a5 8d     <Z..AZK.FZk.ZZ..
    18fc:	66 5a 77 95 7f 5a b9 96 92 5a 7d 94 9b 5a 51 95     fZw..Z...Z}..ZQ.
    190c:	c1 5a c5 89 c9 5a b9 8e cc 5a 99 8c e1 5a 84 92     .Z...Z...Z...Z..
    191c:	09 5b f0 8a 22 5b ec 8f 2c 5b da 92 30 5b 64 89     .[.."[..,[..0[d.
    192c:	50 5b 71 8e 54 5b 45 8d 57 5b 9a 8e 58 5b b6 91     P[q.T[E.W[..X[..
    193c:	5c 5b 79 8e 5d 5b 46 8d 5f 5b d0 96 63 5b 47 8b     \[y.][F._[..c[G.
    194c:	64 5b c7 8c 66 5b 77 8a 6b 5b b7 91 78 5b 7b 9b     d[..f[w.k[..x[{.
    195c:	85 5b ee 91 87 5b 46 89 88 5b e7 8e 89 5b c0 88     .[...[F..[...[..
    196c:	8b 5b 76 91 8c 5b ae 8a 8d 5b b3 8e 8f 5b 47 8d     .[v..[...[...[G.
    197c:	95 5b 86 93 97 5b 40 8f 98 5b af 8a 99 5b 88 92     .[...[@..[...[..
    198c:	9a 5b e8 92 9b 5b b6 88 9c 5b 58 8b 9d 5b f3 95     .[...[...[X..[..
    199c:	9f 5b c0 8e a2 5b 71 8b a3 5b e9 90 a4 5b ba 8e     .[...[q..[...[..
    19ac:	a5 5b 47 97 ae 5b 7b 8b b0 5b c9 8d b3 5b 51 8a     .[G..[{..[...[Q.
    19bc:	b4 5b 83 89 b5 5b aa 8f b6 5b c6 89 b9 5b 65 97     .[...[...[...[e.
    19cc:	bf 5b 68 8f c2 5b e2 8e c4 5b f1 8a c5 5b d0 93     .[h..[...[...[..
    19dc:	c6 5b a7 96 cc 5b 78 95 d2 5b a6 8a d3 5b f5 8b     .[...[x..[...[..
    19ec:	db 5b b0 8a dd 5b 51 90 df 5b 40 8e e1 5b c7 89     .[...[Q..[@..[..
    19fc:	e7 5b 4a 94 e9 5b 52 90 ee 5b be 97 f5 5b 9e 92     .[J..[R..[...[..
    1a0c:	f8 5b a1 90 fa 5b 9b 8e fe 5b ce 91 ff 5b f5 8e     .[...[...[...[..
    1a1c:	01 5c 95 95 02 5c ea 90 04 5c cb 8e 06 5c ab 8f     .\...\...\...\..
    1a2c:	09 5c d1 88 0a 5c b8 91 0b 5c 71 90 0e 5c b1 93     .\...\...\q..\..
    1a3c:	0f 5c ac 8f 11 5c ad 8f 16 5c eb 90 1a 5c ae 8f     .\...\...\...\..
    1a4c:	24 5c de 96 2d 5c c4 8b 31 5c 41 8f 3a 5c da 8e     $\..-\..1\A.:\..
    1a5c:	3b 5c 4b 90 3c 5c f2 93 3d 5c 73 90 3e 5c f6 94     ;\K.<\..=\s.>\..
    1a6c:	3f 5c 41 94 40 5c c7 8b 41 5c 9b 9b 45 5c 8f 8b     ?\A.@\..A\..E\..
    1a7c:	48 5c fc 8b 4a 5c cd 93 4b 5c ae 89 4d 5c 72 8e     H\..J\..K\..M\r.
    1a8c:	51 5c fb 8b 55 5c 57 93 5e 5c ae 91 60 5c 6a 93     Q\..U\W.^\..`\j.
    1a9c:	61 5c c6 8e 64 5c 77 91 65 5c 9a 97 6f 5c d4 93     a\..d\w.e\..o\..
    1aac:	71 5c 52 8e 79 5c a6 9b 90 5c f2 8a a1 5c aa 89     q\R.y\...\...\..
    1abc:	a8 5c 5a 91 a9 5c e2 8a ac 5c a6 96 b1 5c d0 91     .\Z..\...\...\..
    1acc:	b3 5c 78 8a b8 5c dd 8a e0 5c bb 93 e1 5c ac 8b     .\x..\...\...\..
    1adc:	e8 5c e3 89 ef 5c f5 95 f0 5c f4 95 f6 5c 87 93     .\...\...\...\..
    1aec:	fb 5c 73 8f 07 5d 92 90 0e 5d e8 8d 16 5d 52 8a     .\s..]...]...]R.
    1afc:	29 5d f6 95 50 5d 92 97 69 5d 93 90 6f 5d b5 8d     )]..P]..i]..o]..
    1b0c:	8b 5d 88 93 ba 5d e4 97 cc 5d de 8a dd 5d ec 90     .]...]...]...]..
    1b1c:	de 5d 42 8f e1 5d 84 8f e3 5d 83 91 e5 5d 48 8d     .]B..]...]...]H.
    1b2c:	e6 5d b6 8d e7 5d 49 8d e8 5d 90 8b eb 5d de 9b     .]...]I..]...]..
    1b3c:	ee 5d b7 8d f1 5d c8 8c f3 5d a4 96 f4 5d 62 94     .]...]...]...]b.
    1b4c:	f7 5d 4a 8d fb 5d aa 8a fd 5d 46 92 fe 5d d0 8b     .]J..]...]F..]..
    1b5c:	02 5e 73 8e 03 5e 7a 95 06 5e bf 94 0c 5e f3 8a     .^s..^z..^...^..
    1b6c:	16 5e 9f 92 1d 5e e9 92 25 5e 83 90 2b 5e 74 8e     .^...^..%^..+^t.
    1b7c:	2d 5e c8 90 2f 5e d1 91 30 5e 41 8b 33 5e a0 92     -^../^..0^A.3^..
    1b8c:	38 5e ed 8f 3d 5e 58 96 45 5e 9d 95 4c 5e 79 96     8^..=^X.E^..L^y.
    1b9c:	55 5e 8b 96 61 5e a6 94 63 5e bc 95 72 5e b1 8a     U^..a^..c^..r^..
    1bac:	73 5e bd 95 74 5e 4e 94 78 5e 4b 8d 79 5e b2 8a     s^..t^N.x^K.y^..
    1bbc:	7b 5e b6 8c 7c 5e 63 97 7d 5e 48 97 7e 5e f4 8a     {^..|^c.}^H.~^..
    1bcc:	81 5e a1 92 83 5e 4c 8d 84 5e af 8f 87 5e dd 94     .^...^L..^...^..
    1bdc:	8a 5e b0 8f 8f 5e 98 8f 95 5e ea 92 96 5e f7 95     .^...^...^...^..
    1bec:	97 5e 58 93 9a 5e 4d 8d 9c 5e 7b 95 a6 5e 78 93     .^X..^M..^{..^x.
    1bfc:	a7 5e c0 8d ab 5e c9 8c ad 5e eb 92 b5 5e c1 88     .^...^...^...^..
    1c0c:	b6 5e 8e 8f b7 5e 4e 8d b8 5e 66 97 c3 5e 70 94     .^...^N..^f..^p.
    1c1c:	c9 5e f5 97 ca 5e 4c 98 d3 5e 66 8a df 5e 5f 95     .^...^L..^f..^_.
    1c2c:	e0 5e b1 8f e2 5e 45 9c e3 5e 41 9c f6 5e 84 89     .^...^E..^A..^..
    1c3c:	f7 5e ec 92 fa 5e 9a 8c fb 5e f4 89 fc 5e 55 94     .^...^...^...^U.
    1c4c:	ff 5e f9 93 01 5f d9 95 04 5f 4d 98 0a 5f be 95     .^..._..._M.._..
    1c5c:	0d 5f af 98 0f 5f ae 8e 10 5f f3 93 13 5f 7c 8b     ._..._..._..._|.
    1c6c:	14 5f a2 92 15 5f f8 88 17 5f a4 95 18 5f 4f 8d     ._..._..._..._O.
    1c7c:	1b 5f 6f 92 1f 5f ed 92 25 5f ed 96 26 5f b7 8c     ._o.._..%_..&_..
    1c8c:	27 5f ca 8c 31 5f e3 8e 35 5f a3 92 37 5f ad 8b     '_..1_..5_..7_..
    1c9c:	3c 5f 4a 95 3e 5f 65 92 4a 5f ae 8b 53 5f 96 93     <_J.>_e.J_..S_..
    1cac:	57 5f 61 9c 59 5f 62 9c 61 5f 63 9c 62 5f 60 8c     W_a.Y_b.a_c.b_`.
    1cbc:	66 5f 46 95 69 5f ca 8d 6a 5f 56 95 6b 5f a4 92     f_F.i_..j_V.k_..
    1ccc:	6c 5f 6a 95 70 5f b2 8f 71 5f 65 89 77 5f 66 9c     l_j.p_..q_e.w_f.
    1cdc:	79 5f f0 96 7c 5f de 94 80 5f 9d 89 81 5f aa 90     y_..|_..._..._..
    1cec:	84 5f 61 8c 85 5f d2 91 8a 5f 6a 9c 8b 5f a5 97     ._a.._..._j.._..
    1cfc:	8c 5f e3 8c 90 5f 99 8f 92 5f 6b 93 93 5f 5d 8f     ._..._..._k.._].
    1d0c:	97 5f be 93 98 5f 70 9c a1 5f e4 8c a9 5f 9c 95     ._..._p.._..._..
    1d1c:	aa 5f 7a 8f ae 5f f7 94 b3 5f bf 93 b4 5f a5 92     ._z.._..._..._..
    1d2c:	b9 5f 4f 93 bd 5f 4a 8b c3 5f 53 90 c5 5f 4b 95     ._O.._J.._S.._K.
    1d3c:	cc 5f f5 8a cd 5f 45 94 d7 5f 75 8e d8 5f 59 96     ._..._E.._u.._Y.
    1d4c:	d9 5f 5a 96 dc 5f 9e 89 e0 5f 89 92 eb 5f f5 89     ._Z.._..._..._..
    1d5c:	f5 5f 4f 94 fd 5f 9a 8d 12 60 7b 93 16 60 7c 95     ._O.._...`{..`|.
    1d6c:	1c 60 e5 97 1d 60 76 8e 20 60 d3 91 25 60 7d 8b     .`...`v. `..%`}.
    1d7c:	27 60 ab 90 28 60 85 89 2a 60 f6 89 2f 60 af 8b     '`..(`..*`../`..
    1d8c:	4b 60 f6 97 4d 60 92 9c 50 60 b0 8b 52 60 50 8d     K`..M`..P`..R`P.
    1d9c:	55 60 9a 8f 62 60 f8 89 65 60 70 92 68 60 a6 8d     U`..b`..e`p.h`..
    1dac:	69 60 b6 89 6b 60 98 9c 6d 60 b1 8b 6f 60 a7 91     i`..k`..m`..o`..
    1dbc:	70 60 86 8a 75 60 62 8c 89 60 bb 8e 8c 60 ee 92     p`..u`b..`...`..
    1dcc:	94 60 f7 89 9f 60 e5 8c a0 60 49 97 a3 60 b3 8a     .`...`...`I..`..
    1ddc:	a6 60 78 89 a9 60 59 94 aa 60 ab 88 b2 60 df 94     .`x..`Y..`...`..
    1dec:	b6 60 e3 96 bc 60 89 93 c5 60 ee 8f c7 60 d5 93     .`...`...`...`..
    1dfc:	d1 60 66 98 da 60 9b 8d dc 60 c9 90 df 60 d2 88     .`f..`...`...`..
    1e0c:	e3 60 79 91 e8 60 53 8e f0 60 c4 91 f3 60 7a 91     .`y..`S..`...`z.
    1e1c:	f9 60 e4 8e 01 61 44 8f 08 61 fa 96 09 61 f9 96     .`...aD..a...a..
    1e2c:	0f 61 d3 88 1a 61 f0 8b 1b 61 a4 88 1f 61 b4 8a     .a...a...a...a..
    1e3c:	48 61 9c 8e 4b 61 d4 91 4c 61 51 8d 4e 61 54 90     Ha..Ka..LaQ.NaT.
    1e4c:	55 61 e7 95 62 61 9d 96 63 61 b5 8a 67 61 64 8c     Ua..ba..ca..gad.
    1e5c:	68 61 53 8a 6e 61 b6 97 70 61 d4 88 76 61 63 8c     haS.na..pa..vac.
    1e6c:	7e 61 7c 97 82 61 4a 97 8e 61 9e 91 90 61 f7 97     ~a|..aJ..a...a..
    1e7c:	91 61 df 9c 94 61 dc 9c a4 61 ae 95 a7 61 b2 93     .a...a...a...a..
    1e8c:	a9 61 65 8c b2 61 9b 8c b6 61 af 89 be 61 b6 8a     .ae..a...a...a..
    1e9c:	c7 61 a7 8d d0 61 f9 89 f2 61 a6 92 f8 61 9c 8c     .a...a...a...a..
    1eac:	0a 62 e8 95 0e 62 5e 8f 10 62 ac 90 11 62 e4 89     .b...b^..b...b..
    1ebc:	12 62 fa 89 16 62 bd 88 1a 62 ca 90 1f 62 81 8c     .b...b...b...b..
    1ecc:	26 62 ed 90 2e 62 43 9d 2f 62 59 8b 30 62 44 9d     &b...bC./bY.0bD.
    1edc:	34 62 d5 91 38 62 cb 8c 3b 62 df 96 3f 62 5b 96     4b..8b..;b..?b[.
    1eec:	40 62 8a 8f 47 62 ee 90 49 62 e0 94 4b 62 e8 8e     @b..Gb..Ib..Kb..
    1efc:	4d 62 cb 8d 53 62 c5 91 55 62 a5 95 58 62 ef 91     Mb..Sb..Ub..Xb..
    1f0c:	6e 62 af 95 71 62 b5 88 76 62 7d 95 79 62 e1 94     nb..qb..vb}.yb..
    1f1c:	7f 62 b3 8f 80 62 5a 8b 84 62 b4 8f 8a 62 63 94     .b...bZ..b...bc.
    1f2c:	91 62 7d 97 95 62 8a 93 97 62 52 8d 98 62 dc 90     .b}..b...bR..b..
    1f3c:	9c 62 b2 94 9e 62 f0 91 ab 62 e2 94 b1 62 f8 95     .b...b...b...b..
    1f4c:	b5 62 ef 92 b9 62 95 96 bc 62 9f 89 bd 62 8a 92     .b...b...b...b..
    1f5c:	c5 62 53 92 c9 62 66 9d cd 62 8f 94 d0 62 fb 89     .bS..bf..b...b..
    1f6c:	d2 62 91 8b d3 62 f1 91 d8 62 53 8d d9 62 d9 90     .b...b...bS..b..
    1f7c:	db 62 b5 8f dd 62 71 94 e0 62 92 8b e1 62 67 8a     .b...bq..b...bg.
    1f8c:	ec 62 87 8a ed 62 40 90 f3 62 9d 8c f6 62 41 8e     .b...b@..b...bA.
    1f9c:	f7 62 89 8d fe 62 45 8f 01 63 9d 8e 07 63 77 8e     .b...bE..c...cw.
    1fac:	09 63 c2 88 11 63 a7 92 19 63 93 8b 1f 63 b2 8b     .c...c...c...c..
    1fbc:	28 63 a5 88 2b 63 c1 8d 2f 63 55 90 3a 63 f0 92     (c..+c../cU.:c..
    1fcc:	3d 63 d2 94 3f 63 7d 91 49 63 a8 91 4c 63 4a 8e     =c..?c}.Ic..LcJ.
    1fdc:	55 63 df 95 57 63 bb 92 5c 63 7b 91 67 63 f9 95     Uc..Wc..\c{.gc..
    1fec:	68 63 cc 8e 6e 63 98 90 72 63 9e 8c 77 63 b7 8f     hc..nc..rc..wc..
    1ffc:	7a 63 e6 93 7b 63 50 94 83 63 7c 91 88 63 f6 8e     zc..{cP..c|..c..
    200c:	8c 63 b6 8f 92 63 72 94 98 63 40 8c 9b 63 7c 8a     .c...cr..c@..c|.
    201c:	a0 63 a9 97 a1 63 cc 8d a2 63 54 92 a5 63 da 90     .c...c...cT..c..
    202c:	a7 63 54 8d a8 63 84 90 a9 63 86 89 aa 63 5b 91     .cT..c...c...c[.
    203c:	ac 63 64 8b b2 63 66 8c b4 63 cd 92 bb 63 7e 91     .cd..cf..c...c~.
    204c:	c3 63 b5 91 c4 63 89 9d c9 63 86 9d cf 63 60 95     .c...c...c...c`.
    205c:	d0 63 f1 92 d6 63 4b 97 da 63 67 97 db 63 b7 8a     .c...cK..cg..c..
    206c:	e1 63 ac 88 ee 63 f6 8a f4 63 87 89 f6 63 88 9d     .c...c...c...c..
    207c:	fa 63 68 97 0d 64 b9 91 16 64 8a 9d 2c 64 c0 94     .ch..d...d..,d..
    208c:	2d 64 8b 93 3a 64 67 8c 3e 64 ef 8d 42 64 db 90     -d..:dg.>d..Bd..
    209c:	58 64 45 93 69 64 80 96 78 64 cc 96 7a 64 a0 90     XdE.id..xd..zd..
    20ac:	83 64 82 8c 92 64 54 8e 9a 64 51 94 9e 64 b3 93     .d...dT..dQ..d..
    20bc:	a4 64 50 93 a5 64 9b 9d ab 64 8f 95 ad 64 64 94     .dP..d...d...dd.
    20cc:	ae 64 42 8e b0 64 ef 90 b2 64 6f 96 b9 64 68 8a     .dB..d...do..dh.
    20dc:	c1 64 69 97 cd 64 80 91 e2 64 46 93 e6 64 43 8e     .di..d...dF..dC.
    20ec:	ec 64 5b 8b fe 64 ef 8f 2a 65 98 9d 2f 65 78 8e     .d[..d..*e../ex.
    20fc:	39 65 fc 89 3b 65 55 8d 3e 65 fa 95 3f 65 ad 90     9e..;eU.>e..?e..
    210c:	45 65 cc 8c 4f 65 71 95 51 65 7e 8b 57 65 73 94     Ee..Oeq.Qe~.Wes.
    211c:	59 65 b3 8b 62 65 b8 8a 63 65 55 8e 66 65 d6 93     Ye..be..ceU.fe..
    212c:	6c 65 68 8c 70 65 94 90 74 65 ae 90 75 65 47 93     leh.pe..te..ueG.
    213c:	77 65 7e 95 87 65 b6 95 89 65 c4 90 8c 65 6b 95     we~..e...e...ek.
    214c:	8e 65 d6 8d 90 65 e3 94 91 65 c1 94 97 65 6c 93     .e...e...e...el.
    215c:	99 65 bf 97 9c 65 ce 8e a1 65 b4 88 a4 65 d2 8b     .e...e...e...e..
    216c:	a5 65 cb 90 a7 65 80 95 ac 65 61 8e ad 65 66 92     .e...e...ea..ef.
    217c:	af 65 7a 8e b0 65 56 90 b9 65 fb 95 bc 65 97 89     .ez..eV..e...e..
    218c:	bd 65 7b 8e c5 65 b7 97 cb 65 f9 90 cf 65 b0 91     .e{..e...e...e..
    219c:	d7 65 f8 8a e2 65 f9 8a e5 65 fa 93 e6 65 55 92     .e...e...e...eU.
    21ac:	e7 65 8c 8b e8 65 7c 8e e9 65 81 91 ec 65 7b 8f     .e...e|..e...e{.
    21bc:	ed 65 ae 88 fa 65 a0 89 02 66 56 8d 06 66 a9 8d     .e...e...fV..f..
    21cc:	07 66 b8 8f 0c 66 b9 8f 0e 66 be 96 0f 66 a8 8d     .f...f...f...f..
    21dc:	13 66 d5 88 14 66 cc 90 1f 66 af 90 20 66 66 89     .f...f...f.. ff.
    21ec:	25 66 74 8f 27 66 86 96 28 66 f0 8d 2d 66 ba 8f     %ft.'f..(f..-f..
    21fc:	2f 66 a5 90 34 66 e3 9d 3c 66 8b 92 42 66 9e 8e     /f..4f..<f..Bf..
    220c:	43 66 57 8d 4b 66 57 90 52 66 4e 8e 66 66 41 8a     CfW.KfW.RfN.ffA.
    221c:	69 66 d3 94 6e 66 81 95 6f 66 69 8c 74 66 b0 90     if..nf..ofi.tf..
    222c:	76 66 bb 8f 7a 66 71 92 81 66 c5 8b 87 66 c9 89     vf..zfq..f...f..
    223c:	91 66 8b 8f 96 66 67 92 97 66 c3 88 a2 66 a8 92     .f...fg..f...f..
    224c:	a6 66 ef 97 ab 66 62 8e ae 66 e9 95 b4 66 5c 96     .f...fb..f...f\.
    225c:	c7 66 dc 93 d9 66 8c 8f dc 66 6a 97 dd 66 98 94     .f...f...fj..f..
    226c:	f2 66 c8 8b f3 66 67 89 f4 66 58 8d f8 66 91 8f     .f...fg..fX..f..
    227c:	f9 66 82 91 fd 66 5d 91 fe 66 5c 91 ff 66 d6 91     .f...f]..f\..f..
    228c:	00 67 c5 8d 03 67 f0 98 08 67 8e 8c 09 67 4c 97     .g...g...g...gL.
    229c:	0b 67 fc 95 0d 67 9e 95 14 67 f1 8d 15 67 bd 92     .g...g...g...g..
    22ac:	17 67 4e 98 1b 67 5d 96 1d 67 a9 92 1f 67 fa 8a     .gN..g]..g...g..
    22bc:	28 67 d8 96 2a 67 a2 96 2b 67 96 96 2c 67 7b 96     (g..*g..+g..,g{.
    22cc:	2d 67 44 8e 31 67 e9 8e 34 67 70 96 3a 67 f7 8a     -gD.1g..4gp.:g..
    22dc:	3d 67 80 8b 46 67 57 9e 49 67 99 90 4e 67 9b 97     =g..FgW.Ig..Ng..
    22ec:	4f 67 c7 88 50 67 de 8d 51 67 ba 91 53 67 db 8e     Og..Pg..Qg..Sg..
    22fc:	56 67 f1 8f 5c 67 6d 93 5e 67 58 9e 5f 67 a9 91     Vg..\gm.^gX._g..
    230c:	61 67 f0 8f 62 67 db 96 65 67 88 97 6d 67 59 8d     ag..bg..eg..mgY.
    231c:	6f 67 74 94 71 67 8c 93 75 67 6e 8b 77 67 66 94     ogt.qg..ugn.wgf.
    232c:	7e 67 bc 8f 7f 67 c2 94 87 67 f8 94 90 67 cd 90     ~g...g...g...g..
    233c:	95 67 8d 96 97 67 d1 97 9a 67 87 96 9c 67 ca 89     .g...g...g...g..
    234c:	9d 67 7d 8e a0 67 67 98 a2 67 95 90 af 67 cd 8c     .g}..gg..g...g..
    235c:	b6 67 cb 89 c1 67 c6 91 c4 67 bf 95 ca 67 41 95     .g...g...g...gA.
    236c:	cf 67 90 94 d0 67 5e 96 d1 67 b9 8a d3 67 f5 90     .g...g^..g...g..
    237c:	d4 67 5f 8f d8 67 d1 92 da 67 4d 97 f1 67 8c 92     .g_..g...gM..g..
    238c:	f3 67 f6 96 f4 67 c4 8e f5 67 f2 8d fb 67 b8 8d     .g...g...g...g..
    239c:	fe 67 8f 96 ff 67 60 8a 02 68 cc 92 03 68 c8 93     .g...g`..h...h..
    23ac:	04 68 68 89 13 68 f0 90 16 68 b2 90 17 68 49 8c     .hh..h...h...hI.
    23bc:	21 68 5a 8d 22 68 9c 8a 2a 68 94 8a 34 68 f1 90     !hZ."h..*h..4h..
    23cc:	38 68 6a 8a 39 68 aa 8d 3c 68 69 8a 3d 68 cd 8d     8hj.9h..<hi.=h..
    23dc:	41 68 85 8c 42 68 6a 8c 43 68 8d 93 48 68 c4 88     Ah..Bhj.Ch..Hh..
    23ec:	50 68 cb 8b 51 68 4b 8c 53 68 ba 8a 54 68 6a 8b     Ph..QhK.Sh..Thj.
    23fc:	5c 68 f7 8d 5d 68 91 96 5f 68 56 8e 67 68 4f 95     \h..]h.._hV.ghO.
    240c:	76 68 b1 89 81 68 c0 97 85 68 7e 94 93 68 b2 88     vh...h...h~..h..
    241c:	97 68 5b 8d a2 68 bd 8f a7 68 e6 8c a8 68 9c 97     .h[..h...h...h..
    242c:	af 68 f2 92 b0 68 42 8a b1 68 ab 8d b5 68 90 9e     .h...hB..h...h..
    243c:	b6 68 81 8a bc 68 8e 93 c4 68 fc 8a c9 68 c7 96     .h...h...h...h..
    244c:	cb 68 fb 8a cd 68 9e 9e d2 68 5f 96 da 68 49 92     .h...h...h_..hI.
    245c:	df 68 8f 93 ee 68 58 90 f2 68 b1 90 fa 68 bb 8a     .h...hX..h...h..
    246c:	00 69 6f 98 05 69 d6 88 0b 69 b8 96 0d 69 41 90     .io..i...i...iA.
    247c:	0e 69 c5 92 19 69 9a 90 1b 69 91 8a 1c 69 9f 8c     .i...i...i...i..
    248c:	34 69 cc 93 3f 69 d6 92 4a 69 6b 97 53 69 96 95     4i..?i..Jik.Si..
    249c:	55 69 c8 91 5a 69 5e 91 60 69 ed 93 62 69 e8 93     Ui..Zi^.`i..bi..
    24ac:	6d 69 c6 8b 6f 69 7c 8f 73 69 80 94 75 69 c9 8b     mi..oi|.si..ui..
    24bc:	7c 69 4f 98 7d 69 79 8a 82 69 54 8a 8a 69 e5 8d     |iO.}iy..iT..i..
    24cc:	8e 69 7c 89 94 69 50 98 9b 69 59 90 ae 69 c4 9e     .i|..iP..iY..i..
    24dc:	c7 69 a0 ea cb 69 5c 8d cc 69 c6 92 cd 69 84 91     .i...i\..i...i..
    24ec:	d8 69 6c 97 d9 69 8a 96 fb 69 ce 92 fd 69 85 91     .il..i...i...i..
    24fc:	0b 6a f3 94 17 6a 94 92 19 6a 57 95 1f 6a be 8f     .j...j...jW..j..
    250c:	21 6a cd 96 29 6a a0 8c 2a 6a a1 89 2b 6a 7e 8a     !j..)j..*j..+j~.
    251c:	35 6a bf 8f 39 6a f7 8e 3a 6a 92 8a 3d 6a 4d 92     5j..9j..:j..=jM.
    252c:	4b 6a b4 8b 58 6a 6b 8b 59 6a f2 9e 5f 6a 40 8b     Kj..Xjk.Yj.._j@.
    253c:	61 6a c9 93 7f 6a 80 8a 80 6a 68 92 8e 6a e7 8c     aj...j...jh..j..
    254c:	ac 6a 47 9f b8 6a 45 9f bb 6a 42 9f c2 6a 44 9f     .jG..jE..jB..jD.
    255c:	d3 6a 45 98 db 6a f9 8b e8 6a a5 94 04 6b 93 97     .jE..j...j...k..
    256c:	05 6b 4f 9f 1d 6b 54 89 20 6b 87 8c 21 6b 9f 8e     .kO..kT. k..!k..
    257c:	23 6b d3 8b 27 6b a2 89 32 6b 7e 97 3a 6b 5c 8b     #k..'k..2k~.:k\.
    258c:	3d 6b d4 8b 3e 6b bc 8a 4c 6b cc 89 4e 6b 56 92     =k..>k..Lk..NkV.
    259c:	53 6b bd 8a 62 6b 7e 8e 63 6b b3 90 64 6b 9f 8d     Sk..bk~.ck..dk..
    25ac:	66 6b 90 95 69 6b e0 95 6a 6b 63 98 6f 6b 95 8e     fk..ik..jkc.ok..
    25bc:	73 6b ce 8d 74 6b f0 97 7b 6b 80 8e 86 6b 77 96     sk..tk..{k...kw.
    25cc:	89 6b 7d 8f 8a 6b ea 8e 8b 6b 63 8e 96 6b 42 90     .k}..k...kc..kB.
    25dc:	b2 6b 72 9f b4 6b a3 89 b5 6b 69 92 ba 6b 45 8e     .kr..k...ki..kE.
    25ec:	bb 6b 6b 8a bf 6b 61 93 c5 6b 42 8b cd 6b ea 95     .kk..ka..kB..k..
    25fc:	ce 6b 88 96 d2 6b c5 93 d4 6b e4 94 d8 6b f9 94     .k...k...k...k..
    260c:	db 6b d1 96 ec 6b 7b 9f ef 6b 7e 9f 0f 6c 81 8e     .k...k{..k~..l..
    261c:	11 6c af 96 17 6c 43 8b 23 6c 86 9f 34 6c 85 90     .l...lC.#l..4l..
    262c:	37 6c 58 95 38 6c 69 89 3e 6c c3 94 40 6c f3 92     7lX.8li.>l..@l..
    263c:	41 6c 60 8f 42 6c 81 8b 4e 6c c4 94 50 6c ac 8e     Al`.Bl..Nl..Pl..
    264c:	57 6c be 8a 5a 6c 98 89 5d 6c f0 93 5f 6c 5d 8d     Wl..Zl..]l.._l].
    265c:	60 6c 72 92 70 6c bf 91 72 6c 82 8b 7a 6c 88 8c     `lr.pl..rl..zl..
    266c:	7d 6c 44 8b 83 6c 80 97 88 6c be 92 8c 6c d7 93     }lD..l...l...l..
    267c:	93 6c 42 8c 96 6c ab 89 99 6c b9 8d a1 6c 76 96     .lB..l...l...lv.
    268c:	a2 6c f2 91 ab 6c 97 96 b3 6c cd 89 b8 6c a6 95     .l...l...l...l..
    269c:	b9 6c fb 96 bb 6c a1 8e bc 6c c0 8f bf 6c 88 89     .l...l...l...l..
    26ac:	c1 6c b5 8b c9 6c f2 90 ca 6c 91 94 cc 6c e5 94     .l...l...l...l..
    26bc:	d5 6c 40 96 e1 6c 41 96 e2 6c 67 94 e3 6c 83 8b     .l@..lA..lg..l..
    26cc:	e5 6c 44 93 e8 6c 8d 92 f0 6c d7 91 f3 6c 6a 89     .lD..l...l...lj.
    26dc:	0b 6d 6d 97 17 6d f4 90 1b 6d 8c 97 1e 6d b4 93     .mm..m...m...m..
    26ec:	25 6d c3 92 29 6d 6b 89 2a 6d 5e 8d 32 6d 46 8f     %m..)mk.*m^.2mF.
    26fc:	3b 6d 88 8a 3e 6d 68 94 41 6d ac 97 44 6d f2 8f     ;m..>mh.Am..Dm..
    270c:	45 6d f3 90 5c 6d 6c 95 66 6d 59 89 69 6d 5f 8d     Em..\ml.fmY.im_.
    271c:	6a 6d 51 98 6c 6d 5c 8a 6e 6d 82 95 74 6d 81 97     jmQ.lm\.nm..tm..
    272c:	77 6d 43 8a 78 6d 5a 90 88 6d c1 8f 8c 6d 4f 97     wmC.xmZ..m...mO.
    273c:	99 6d dc 97 9b 6d 93 93 9c 6d c0 93 af 6d 55 8a     .m...m...m...mU.
    274c:	b2 6d 74 89 bc 6d c1 97 c0 6d 84 97 cb 6d d2 97     .mt..m...m...m..
    275c:	d1 6d 69 8f d8 6d 91 93 e1 6d 57 92 eb 6d fa 88     .mi..m...mW..m..
    276c:	f1 6d 5b 90 f3 6d 7e 8f f5 6d a3 95 f7 6d ac 8d     .m[..m~..m...m..
    277c:	fb 6d 59 93 05 6e b4 90 07 6e 89 8a 08 6e cf 8d     .mY..n...n...n..
    278c:	09 6e c2 8f 0b 6e 61 8f 13 6e 6b 8c 1a 6e 8d 8f     .n...na..nk..n..
    279c:	1b 6e b8 8c 20 6e 94 8b 21 6e 6e 93 25 6e ad 88     .n.. n..!nn.%n..
    27ac:	26 6e 51 89 29 6e b7 89 2c 6e aa 91 2f 6e 60 8d     &nQ.)n..,n../n`.
    27bc:	4a 6e a9 96 56 6e ce 8c 58 6e c3 8f 5b 6e 58 92     Jn..Vn..Xn..[nX.
    27cc:	67 6e 4e 97 6f 6e 92 93 7e 6e 70 98 7f 6e bc 8e     gnN.on..~np..n..
    27dc:	80 6e 9e 96 8c 6e ac 94 90 6e b9 8c 96 6e 80 8f     .n...n...n...n..
    27ec:	9c 6e ad 97 9d 6e 61 8d a2 6e ec 88 b6 6e 6e 97     .n...na..n...nn.
    27fc:	ba 6e 4d 93 c5 6e c5 96 cb 6e a0 8e cc 6e fc 9f     .nM..n...n...n..
    280c:	d1 6e 8a 8a d3 6e e6 9f dd 6e ea 91 de 6e d8 91     .n...n...n...n..
    281c:	f2 6e f8 9f f4 6e 48 93 01 6f 99 8b 02 6f 59 95     .n...nH..o...oY.
    282c:	06 6f bd 8e 09 6f 97 8d 0f 6f 52 98 11 6f f2 9f     .o...o...oR..o..
    283c:	14 6f 89 89 15 6f 86 91 20 6f 99 94 22 6f bf 8a     .o...o.. o.."o..
    284c:	23 6f f8 97 2b 6f 9f 96 2c 6f d0 92 31 6f f9 9f     #o..+o..,o..1o..
    285c:	38 6f 51 91 45 6f c1 8a 54 6f 89 8c 5c 6f f6 90     8oQ.Eo..To..\o..
    286c:	5f 6f 83 8a 64 6f 81 8f 6e 6f aa 92 70 6f d7 92     _o..do..no..po..
    287c:	84 6f 9f 90 97 6f c0 8a a4 6f 56 e0 b1 6f 62 93     .o...o...oV..ob.
    288c:	c0 6f 83 8c c1 6f f7 91 c3 6f 5a 94 e0 6f 8a 8d     .o...o...oZ..o..
    289c:	e1 6f 47 94 eb 6f 94 97 ef 6f f3 91 15 70 6d 95     .oG..o...o...pm.
    28ac:	1e 70 d2 93 26 70 95 92 27 70 eb 91 2c 70 a3 90     .p..&p..'p..,p..
    28bc:	4c 70 f3 9f 58 70 e5 93 6b 70 ce 89 6f 70 94 93     Lp..Xp..kp..op..
    28cc:	70 70 44 8a 78 70 84 8b 7c 70 dc 8e 7d 70 d0 8d     ppD.xp..|p..}p..
    28dc:	89 70 46 98 8a 70 86 90 8e 70 8a 89 92 70 75 e0     .pF..p...p...pu.
    28ec:	99 70 74 e0 ac 70 78 e0 ad 70 59 92 b8 70 79 e0     .pt..px..pY..py.
    28fc:	b9 70 5f 93 ba 70 d7 88 c8 70 f3 97 cf 70 47 89     .p_..p...p...pG.
    290c:	d9 70 80 e0 dd 70 7e e0 f9 70 42 96 09 71 81 e0     .p...p~..pB..q..
    291c:	14 71 8b 89 19 71 84 e0 1a 71 b0 95 1c 71 83 e0     .q...q...q...q..
    292c:	21 71 b3 96 26 71 c5 8f 36 71 52 91 3c 71 c4 8f     !q..&q..6qR.<q..
    293c:	49 71 f9 97 4c 71 8a e0 4e 71 f7 90 59 71 8c 89     Iq..Lq..Nq..Yq..
    294c:	64 71 81 94 67 71 c6 8f 69 71 cf 94 6e 71 cf 8e     dq..gq..iq..nq..
    295c:	7d 71 f8 90 8a 71 46 8c 8f 71 8d e0 94 71 6f 97     }q...qF..q...qo.
    296c:	9f 71 6e 8f a8 71 91 e0 b1 71 4d 94 c3 71 52 94     .qn..q...qM..qR.
    297c:	c8 71 95 93 c9 71 97 e0 ce 71 99 e0 d0 71 d3 97     .q...q...q...q..
    298c:	d2 71 96 e0 d5 71 8d 89 d7 71 93 e0 e5 71 87 91     .q...q...q...q..
    299c:	e6 71 57 8e ed 71 43 90 fb 71 8e e0 06 72 9a 94     .qW..qC..q...r..
    29ac:	2a 72 dc 92 2c 72 a6 e0 2d 72 a5 e0 32 72 a8 e0     *r..,r..-r..2r..
    29bc:	35 72 dd 8e 36 72 83 95 3a 72 ea 96 3d 72 75 91     5r..6r..:r..=ru.
    29cc:	3e 72 a2 8e 47 72 d0 95 48 72 c5 94 4c 72 76 94     >r..Gr..Hr..Lrv.
    29dc:	52 72 ab 92 59 72 e5 89 5b 72 8d 8b 5d 72 c4 96     Rr..Yr..[r..]r..
    29ec:	5f 72 b4 96 61 72 b2 89 62 72 53 98 67 72 71 96     _r..ar..brS.grq.
    29fc:	69 72 a8 95 72 72 b5 90 79 72 c1 93 7d 72 a1 8c     ir..rr..yr..}r..
    2a0c:	80 72 d2 8d a0 72 5d 8b ac 72 a2 8c af 72 c6 94     .r...r]..r...r..
    2a1c:	b6 72 f3 8f c2 72 b6 8b d0 72 cf 8c d7 72 e7 8b     .r...r...r...r..
    2a2c:	d9 72 5f 91 db 72 9d 8d e1 72 c2 e0 e2 72 c0 e0     .r_..r...r...r..
    2a3c:	e9 72 eb 8e ec 72 c6 93 ed 72 b7 8b f8 72 4b 92     .r...r...r...rK.
    2a4c:	f9 72 c3 e0 fc 72 54 98 fd 72 82 94 1b 73 d2 96     .r...rT..r...s..
    2a5c:	1f 73 c2 97 25 73 ce e0 2a 73 96 92 2b 73 4c 94     .s..%s..*s..+sL.
    2a6c:	2e 73 a3 8c 36 73 50 97 37 73 51 97 3e 73 cf e0     .s..6sP.7sQ.>s..
    2a7c:	3f 73 8e 89 44 73 96 8d 45 73 82 8e 63 73 62 8f     ?s..Ds..Es..csb.
    2a8c:	68 73 d5 e0 70 73 d6 e0 72 73 6c 8a 84 73 ba 8c     hs..ps..rsl..s..
    2a9c:	87 73 a6 97 89 73 ca 8b 8b 73 a4 89 96 73 e8 8b     .s...s...s...s..
    2aac:	a9 73 df 8a b2 73 e6 97 c0 73 df e0 c2 73 cf 89     .s...s...s...s..
    2abc:	ca 73 58 8e cd 73 bf 92 e0 73 ec 8e ea 73 5d 8c     .sX..s...s...s].
    2acc:	ed 73 c7 94 fe 73 bb 8c 03 74 85 8b 06 74 9d 97     .s...s...t...t..
    2adc:	09 74 ae 97 22 74 f4 91 33 74 d4 97 34 74 d5 8b     .t.."t..3t..4t..
    2aec:	35 74 fa 94 36 74 69 94 5a 74 e8 8c 5b 74 6c 89     5t..6ti.Zt..[tl.
    2afc:	5e 74 90 90 60 74 da 97 6a 74 f3 e0 73 74 ba 8d     ^t..`t..jt..st..
    2b0c:	83 74 9e 97 b0 74 c2 8a bd 74 a3 8e dc 74 5a 89     .t...t...t...tZ.
    2b1c:	e2 74 5a 95 e6 74 a2 8a f6 74 72 95 11 75 99 8d     .tZ..t...tr..u..
    2b2c:	18 75 c3 8a 1a 75 72 90 1c 75 5b 93 1f 75 b6 90     .u...ur..u[..u..
    2b3c:	23 75 59 8e 25 75 99 89 26 75 53 e1 28 75 70 97     #uY.%u..&uS.(up.
    2b4c:	2b 75 e1 95 30 75 63 93 31 75 52 97 32 75 62 8d     +u..0uc.1uR.2ub.
    2b5c:	33 75 5c 90 37 75 6a 92 3a 75 ac 92 3b 75 e6 89     3u\.7uj.:u..;u..
    2b6c:	46 75 5b e1 4c 75 45 8a 4f 75 d8 88 51 75 a8 94     Fu[.LuE.Ou..Qu..
    2b7c:	54 75 c8 94 59 75 af 97 5c 75 7b 92 5d 75 a4 90     Tu..Yu..\u{.]u..
    2b8c:	60 75 a9 94 62 75 4c 95 65 75 aa 97 66 75 6c 8c     `u..buL.eu..ful.
    2b9c:	6a 75 d4 94 70 75 d9 88 73 75 f4 8f 77 75 eb 93     ju..pu..su..wu..
    2bac:	7f 75 45 8b 8b 75 44 95 8e 75 61 91 8f 75 60 91     .uE..uD..ua..u`.
    2bbc:	91 75 5e 8b ab 75 75 89 b2 75 e6 94 b5 75 72 e1     .u^..uu..u...ur.
    2bcc:	b9 75 5d 90 bd 75 73 e1 be 75 be 8e c5 75 61 95     .u]..us..u...ua.
    2bdc:	c7 75 c7 8f d2 75 79 e1 d4 75 a4 8e d5 75 ad 8d     .u...uy..u...u..
    2bec:	d8 75 97 93 db 75 c9 92 e2 75 9f 97 e9 75 89 91     .u...u...u...u..
    2bfc:	f4 75 73 92 42 76 c3 97 4c 76 e0 8a 52 76 fc 96     .us.Bv..Lv..Rv..
    2c0c:	56 76 c8 95 7a 76 ad 94 7b 76 6f 93 7d 76 92 94     Vv..zv..{vo.}v..
    2c1c:	7e 76 53 95 84 76 49 93 86 76 46 8a 87 76 63 8d     ~vS..vI..vF..vc.
    2c2c:	90 76 48 8e ae 76 e7 94 bf 76 4d 8e c3 76 75 94     .vH..v...vM..vu.
    2c3c:	c6 76 7e 96 c8 76 6d 89 ca 76 76 89 d7 76 90 93     .v~..vm..vv..v..
    2c4c:	db 76 b7 90 df 76 bf 96 e3 76 c4 8a e4 76 d5 94     .v...v...v...v..
    2c5c:	ee 76 da 96 f2 76 d3 96 f4 76 bc 92 f8 76 8a 91     .v...v...v...v..
    2c6c:	fe 76 82 8f 01 77 c8 8f 09 77 fb 94 0b 77 c5 8a     .v...w...w...w..
    2c7c:	0c 77 a7 8c 1f 77 5e 90 20 77 b0 96 37 77 c5 e1     .w...w^. w..7w..
    2c8c:	3a 77 ad 92 3c 77 e1 8a 40 77 85 92 61 77 87 90     :w..<w..@w..aw..
    2c9c:	63 77 c2 93 66 77 72 96 68 77 c9 e1 6b 77 ca e1     cw..fwr.hw..kw..
    2cac:	7e 77 ce e1 91 77 d2 e1 a5 77 cb 95 ac 77 75 8f     ~w...w...w...wu.
    2cbc:	ad 77 c4 97 b3 77 b5 93 bc 77 d9 e1 db 77 b5 96     .w...w...w...w..
    2ccc:	e2 77 ee 96 e5 77 6d 92 e7 77 8a 94 e9 77 e9 8b     .w...wm..w...w..
    2cdc:	ed 77 5a 92 ee 77 e2 e1 ef 77 b8 8b f3 77 ce 90     .wZ..w...w...w..
    2cec:	02 78 bb 8d 12 78 e5 e1 14 78 a4 8c 15 78 d3 8d     .x...x...x...x..
    2cfc:	25 78 75 93 26 78 d4 8d 27 78 6d 8b 32 78 43 96     %xu.&x..'xm.2xC.
    2d0c:	34 78 6a 94 3a 78 76 93 3f 78 7b 8d 45 78 e9 e1     4xj.:xv.?x{.Ex..
    2d1c:	5d 78 c9 8f 6b 78 b0 97 6c 78 64 8d 6f 78 a5 8c     ]x..kx..lxd.ox..
    2d2c:	72 78 a1 94 7c 78 ed e1 81 78 e9 8c 87 78 f4 92     rx..|x...x...x..
    2d3c:	8d 78 56 8a 91 78 e8 94 93 78 4f 89 95 78 ea 8d     .xV..x...xO..x..
    2d4c:	97 78 71 98 a7 78 c9 95 a9 78 d7 90 af 78 f3 e1     .xq..x...x...x..
    2d5c:	ba 78 6d 8a c1 78 a5 8e d0 78 d6 94 e8 78 81 96     .xm..x...x...x..
    2d6c:	ef 78 e9 88 01 79 ca 8f 0e 79 62 91 2b 79 49 e2     .x...y...yb.+yI.
    2d7c:	3a 79 a6 8e 3c 79 e7 97 3e 79 d0 8e 40 79 4a e2     :y..<y..>y..@yJ.
    2d8c:	41 79 56 8c 47 79 5f 8b 48 79 46 8b 49 79 83 8e     AyV.Gy_.HyF.Iy..
    2d9c:	50 79 53 97 53 79 50 e2 56 79 63 91 57 79 4c e2     PyS.SyP.Vyc.WyL.
    2dac:	5d 79 6a 8f 5e 79 5f 90 5f 79 4d e2 60 79 4b e2     ]yj.^y_._yM.`yK.
    2dbc:	62 79 49 94 65 79 cb 8f 68 79 5b 95 6d 79 d5 8d     byI.ey..hy[.my..
    2dcc:	77 79 98 93 81 79 d6 8b 84 79 5c 98 85 79 54 91     wy...y...y\..yT.
    2ddc:	8a 79 53 e2 8d 79 d0 89 8e 79 f5 92 8f 79 9f 95     .yS..y...y...y..
    2dec:	a6 79 9a 8b b0 79 48 94 bd 79 d7 8b be 79 d1 89     .y...yH..y...y..
    2dfc:	bf 79 c3 93 c0 79 47 8f c1 79 84 8e cb 79 48 8f     .y...yG..y...yH.
    2e0c:	d1 79 c8 89 d2 79 62 95 d8 79 e9 94 df 79 64 91     .y...yb..y...yd.
    2e1c:	e4 79 89 94 e6 79 60 90 e9 79 81 92 f0 79 cc 8f     .y...y`..y...y..
    2e2c:	fb 79 da 88 00 7a 48 8b 0b 7a f6 92 0e 7a c5 90     .y...zH..z...z..
    2e3c:	14 7a ab 96 17 7a 42 95 1a 7a 74 92 1c 7a c5 97     .z...zB..zt..z..
    2e4c:	1f 7a 67 e2 2e 7a ed 8e 32 7a ee 88 3c 7a d2 89     .zg..z..2z..<z..
    2e5c:	3d 7a 6d 8c 3f 7a 65 8d 40 7a 92 8d 42 7a e4 95     =zm.?ze.@z..Bz..
    2e6c:	46 7a 73 96 4d 7a cf 90 4e 7a 6e 89 4f 7a b8 89     Fzs.Mz..Nzn.Oz..
    2e7c:	50 7a aa 88 57 7a 6e e2 63 7a f5 8f 6b 7a 6e 8a     Pz..Wzn.cz..kzn.
    2e8c:	74 7a 8a 8c 76 7a 86 8b 7a 7a f3 8b 7f 7a fa 90     tz..vz..zz...z..
    2e9c:	81 7a cb 93 83 7a de 90 84 7a f3 8d 92 7a 82 92     .z...z...z...z..
    2eac:	93 7a 8b 91 9f 7a 41 8c aa 7a 45 8c ae 7a 87 8b     .z...zA..zE..z..
    2ebc:	af 7a 71 97 ba 7a 4d 89 c3 7a 96 8a cb 7a a7 97     .zq..zM..z...z..
    2ecc:	dc 7a b3 97 e0 7a cd 8f e3 7a 76 8f e5 7a b6 93     .z...z...zv..z..
    2edc:	ea 7a 47 92 ef 7a 5b 92 f6 7a a3 8b f9 7a 7c 92     .zG..z[..z...z|.
    2eec:	fa 7a b1 8e ff 7a c6 8a 08 7b 88 8b 11 7b ce 8f     .z...z...{...{..
    2efc:	1b 7b 4a 93 20 7b 7d 8a 25 7b 79 90 26 7b 84 95     .{J. {}.%{y.&{..
    2f0c:	2c 7b e6 91 39 7b f9 8d 46 7b 4d 95 48 7b a4 94     ,{..9{..F{M.H{..
    2f1c:	49 7b 99 93 4b 7b d8 8b 4d 7b a1 e2 4f 7b b3 94     I{..K{..M{..O{..
    2f2c:	50 7b 9e e2 51 7b 7d 92 52 7b 9b 93 54 7b 9a 93     P{..Q{}.R{..T{..
    2f3c:	56 7b f4 8d 86 7b cd 95 87 7b d3 89 8b 7b b3 e2     V{...{...{...{..
    2f4c:	92 7b b4 e2 94 7b 93 94 95 7b a5 96 97 7b 5a 8e     .{...{...{...{Z.
    2f5c:	a1 7b c7 8a aa 7b 5c 92 ad 7b fb 90 b1 7b a0 94     .{...{\..{...{..
    2f6c:	b8 7b a2 94 c0 7b df 90 c4 7b cd 94 c7 7b d1 95     .{...{...{...{..
    2f7c:	c9 7b 7a 92 e0 7b c2 8e e4 7b c4 93 ed 7b 55 98     .{z..{...{...{U.
    2f8c:	21 7c c8 8a 38 7c f4 94 3e 7c fa 97 3f 7c eb 95     !|..8|..>|..?|..
    2f9c:	4d 7c d0 90 73 7c c4 95 7e 7c e0 96 81 7c cc 8b     M|..s|..~|...|..
    2fac:	82 7c 48 8c 89 7c b2 95 8b 7c 88 90 8d 7c ae 96     .|H..|...|...|..
    2fbc:	92 7c b1 97 95 7c 94 94 97 7c 65 91 98 7c 53 94     .|...|...|e..|S.
    2fcc:	9b 7c 6c 8f 9f 7c be 88 a5 7c 9f 8a a7 7c cf 8f     .|l..|...|...|..
    2fdc:	bd 7c ee e2 be 7c b8 90 c0 7c ef e2 ca 7c d0 8c     .|...|...|...|..
    2fec:	ce 7c 57 91 d6 7c 9c 93 de 7c b3 95 df 7c 8c 91     .|W..|...|...|..
    2ffc:	e0 7c 66 8d e7 7c c6 97 f8 7c 85 8e fb 7c 6e 8c     .|f..|...|...|n.
    300c:	fe 7c 8a 8b 00 7d 49 8b 04 7d f1 96 05 7d 67 8d     .|...}I..}...}g.
    301c:	0b 7d e4 96 0d 7d 5b 94 10 7d 52 95 14 7d 83 8f     .}...}[..}R..}..
    302c:	17 7d d1 8e 18 7d 68 8d 19 7d 86 8e 1a 7d 89 8b     .}...}h..}...}..
    303c:	1b 7d b4 95 20 7d 66 91 21 7d 61 96 22 7d f5 8d     .}.. }f.!}a."}..
    304c:	2b 7d 87 8e 2c 7d db 92 2f 7d dd 97 30 7d d7 8d     +}..,}../}..0}..
    305c:	33 7d 61 90 39 7d d0 8f 3a 7d ae 8d 42 7d 49 8f     3}a.9}..:}..B}I.
    306c:	43 7d bc 8c 44 7d 67 91 46 7d 4a e3 4c 7d 6f 8c     C}..D}g.F}J.L}o.
    307c:	50 7d 8b 8c 5e 7d 69 8d 61 7d 8d 97 62 7d ba 88     P}..^}i.a}..b}..
    308c:	66 7d 8b 8b 68 7d 4f e3 71 7d 9d 93 75 7d 47 8a     f}..h}O.q}..u}G.
    309c:	76 7d e2 90 79 7d a6 8c 99 7d 70 8c 9a 7d b1 91     v}..y}...}p..}..
    30ac:	9c 7d 8e 91 ac 7d f8 8e ad 7d db 88 b1 7d 6a 8d     .}...}...}...}j.
    30bc:	b2 7d d4 96 b4 7d d4 92 bb 7d 5d 92 be 7d bb 88     .}...}...}]..}..
    30cc:	bf 7d c8 96 ca 7d d9 8b cb 7d ea 94 cf 7d 8d 91     .}...}...}...}..
    30dc:	d1 7d ce 97 d2 7d 8f 8f da 7d fc 90 e0 7d f7 92     .}...}...}...}..
    30ec:	e8 7d d2 95 e9 7d c9 8a ec 7d c9 96 ef 7d dc 88     .}...}...}...}..
    30fc:	f4 7d fb 97 fb 7d 6b e3 01 7e 8f 89 04 7e ea 93     .}...}k..~...~..
    310c:	0a 7e 6f e3 1b 7e 9b 94 1e 7e c8 8e 23 7e 70 e3     .~o..~...~..#~p.
    311c:	26 7e 63 8f 2b 7e 44 96 2e 7e 6b 8f 3e 7e d1 90     &~c.+~D..~k.>~..
    312c:	41 7e c9 94 4a 7e 40 91 4b 7e 71 8c 4d 7e 4a 8f     A~..J~@.K~q.M~J.
    313c:	54 7e 44 90 55 7e 55 91 6d 7e 9a 96 70 7e 4a 8c     T~D.U~U.m~..p~J.
    314c:	82 7e 5b 8e 8f 7e 5a 93 36 7f ca 8a 6a 7f df 8d     .~[..~Z.6...j...
    315c:	6b 7f 72 8c 6e 7f 75 92 70 7f b1 94 72 7f 90 8f     k.r.n.u.p...r...
    316c:	75 7f 6c 94 77 7f eb 94 85 7f 85 97 8a 7f 72 97     u.l.w.........r.
    317c:	8e 7f fc 94 a4 7f 51 8c a8 7f 41 91 a9 7f 60 8b     ......Q...A...`.
    318c:	bd 7f 48 89 c1 7f a5 89 c5 7f c0 e3 c6 7f c1 e3     ..H.............
    319c:	cc 7f 82 97 d2 7f 4b 8f d4 7f c4 e3 e0 7f 89 90     ......K.........
    31ac:	e6 7f c6 e3 eb 7f e3 8a f0 7f cb 8a fb 7f 7c 96     ..............|.
    31bc:	fc 7f 83 97 00 80 73 97 01 80 56 98 03 80 6c 8d     ......s...V...l.
    31cc:	05 80 d2 8e 0c 80 a7 8e 10 80 cf 91 12 80 ce e3     ................
    31dc:	15 80 6b 8d 17 80 d5 96 33 80 a8 8e 36 80 eb 96     ..k.....3...6...
    31ec:	3d 80 5e 92 4a 80 d6 e3 56 80 b9 90 5a 80 da e3     =.^.J...V...Z...
    31fc:	5e 80 b7 95 61 80 8f 91 6f 80 fc 97 73 80 de e3     ^...a...o...s...
    320c:	74 80 ae 92 76 80 e1 e3 77 80 45 90 7e 80 57 98     t...v...w.E.~.W.
    321c:	87 80 a3 94 89 80 f7 93 8b 80 5d 98 8c 80 a7 94     ..........].....
    322c:	96 80 d1 8f 98 80 49 95 9b 80 e8 e3 9d 80 cc 8a     ......I.........
    323c:	a1 80 d2 8c a2 80 88 8e a5 80 ec 94 a9 80 a8 8c     ................
    324c:	aa 80 62 96 af 80 6d 8d b1 80 6e 8d b2 80 e7 88     ..b...m...n.....
    325c:	b4 80 e6 8d ba 80 78 94 c3 80 dd 88 c6 80 5f 92     ......x......._.
    326c:	cc 80 77 94 ce 80 d9 91 da 80 f3 e3 de 80 45 96     ..w...........E.
    327c:	e1 80 d3 8c e4 80 fb 88 f1 80 f7 e3 f4 80 b7 93     ................
    328c:	f8 80 b9 8b fd 80 5c 94 02 81 89 8e 05 81 ba 8b     ......\.........
    329c:	06 81 c6 90 07 81 65 98 08 81 ac 96 0a 81 d2 90     ......e.........
    32ac:	1a 81 72 8b 31 81 45 92 33 81 5d 94 39 81 af 92     ..r.1.E.3.].9...
    32bc:	4b 81 fc e3 4e 81 74 90 50 81 85 95 54 81 6f 8d     K...N.t.P...T.o.
    32cc:	55 81 72 98 5f 81 54 e4 6b 81 ee 8e 70 81 98 8d     U.r._.T.k...p...
    32dc:	78 81 b0 92 79 81 a0 95 7a 81 42 91 7f 81 da 91     x...y...z.B.....
    32ec:	8f 81 70 8d 9a 81 86 95 9c 81 8c 96 9d 81 47 95     ..p...........G.
    32fc:	a0 81 50 e4 a8 81 63 96 b3 81 56 91 b5 81 58 e4     ..P...c...V...X.
    330c:	bf 81 5e 94 c6 81 b0 89 d3 81 9f 91 e3 81 62 90     ..^...........b.
    331c:	e5 81 e7 89 e8 81 d5 97 ea 81 a9 8e ed 81 4c 8f     ..............L.
    332c:	f3 81 8a 8e f4 81 76 92 fc 81 50 89 08 82 bb 8b     ......v...P.....
    333c:	0c 82 e3 90 0e 82 c9 8e 10 82 72 e4 17 82 dc 95     ..........r.....
    334c:	18 82 da 8a 1b 82 43 91 1c 82 77 8f 1e 82 91 95     ......C...w.....
    335c:	1f 82 4d 8f 2a 82 71 8d 2c 82 ca 94 35 82 c7 91     ..M.*.q.,...5...
    336c:	36 82 95 94 37 82 bd 8c 39 82 44 91 47 82 f8 92     6...7...9.D.G...
    337c:	5a 82 7c e4 64 82 7e e4 66 82 cd 8a 6e 82 af 8d     Z.|.d.~.f...n...
    338c:	6f 82 c7 97 72 82 46 90 76 82 90 89 8b 82 f0 88     o...r.F.v.......
    339c:	99 82 87 95 9d 82 c5 8e a5 82 48 8a a6 82 b0 88     ..........H.....
    33ac:	ad 82 6d 94 af 82 63 90 b1 82 d4 89 b3 82 46 96     ..m...c.......F.
    33bc:	b8 82 7c 8c b9 82 da 8b bd 82 e8 89 c5 82 a1 8a     ..|.............
    33cc:	d1 82 91 89 d3 82 e8 97 d4 82 db 91 d7 82 63 95     ..............c.
    33dc:	db 82 d5 89 e5 82 e1 8e e6 82 ea 8b e7 82 97 92     ................
    33ec:	eb 82 cf 93 f1 82 70 89 fa 82 95 e4 02 83 ce 96     ......p.........
    33fc:	04 83 d6 89 05 83 9d 8a 0e 83 73 8c 1c 83 a9 88     ..........s.....
    340c:	28 83 ef 88 2b 83 a9 e4 34 83 a0 e4 36 83 83 92     (...+...4...6...
    341c:	38 83 f9 91 39 83 a5 e4 40 83 a4 e4 49 83 90 91     8...9...@...I...
    342c:	4a 83 74 8c 4f 83 60 89 52 83 72 8d 58 83 91 91     J.t.O.`.R.r.X...
    343c:	77 83 d7 89 7b 83 ac 89 9e 83 ce 8a a2 83 b0 e4     w...{...........
    344c:	ab 83 9c 94 b1 83 89 97 c5 83 9b 90 ca 83 65 8b     ..............e.
    345c:	cc 83 db 8b d3 83 d9 89 d6 83 d2 8f dc 83 d8 8d     ................
    346c:	df 83 70 93 e9 83 ec 95 ef 83 d8 89 f0 83 d4 8c     ..p.............
    347c:	f1 83 48 95 04 84 b8 93 0c 84 47 96 0e 84 de 88     ..H.......G.....
    348c:	29 84 8b 94 31 84 9e 8a 3d 84 8e 97 49 84 74 97     )...1...=...I.t.
    349c:	4e 84 a8 97 57 84 98 92 5b 84 8b 8a 61 84 92 95     N...W...[...a...
    34ac:	63 84 9f 93 66 84 af 88 6c 84 92 91 71 84 4b 94     c...f...l...q.K.
    34bc:	75 84 a8 88 7a 84 98 95 8b 84 d3 8f 90 84 4e 8f     u...z.........N.
    34cc:	94 84 aa 8e 99 84 d6 96 9c 84 66 95 9f 84 e5 e4     ..........f.....
    34dc:	b2 84 97 8a b8 84 f6 8f bb 84 e8 e4 bc 84 93 91     ................
    34ec:	c4 84 7e 92 c9 84 75 97 cb 84 57 8a d1 84 aa 96     ..~...u...W.....
    34fc:	ec 84 48 96 ee 84 40 98 00 85 c1 8e 11 85 cc 95     ..H...@.........
    350c:	13 85 a0 96 1a 85 55 89 26 85 d3 92 2d 85 fc 88     ......U.&...-...
    351c:	35 85 a0 91 3d 85 c1 95 43 85 d7 94 49 85 d4 8f     5...=...C...I...
    352c:	4a 85 c7 8e 4e 85 bc 8b 57 85 99 95 68 85 6e 98     J...N...W...h.n.
    353c:	69 85 a0 93 6a 85 93 95 7e 85 51 e5 84 85 96 94     i...j...~.Q.....
    354c:	97 85 92 89 99 85 e3 93 a6 85 45 91 a9 85 46 8e     ..........E...F.
    355c:	aa 85 64 90 ab 85 4f 8c ac 85 f2 96 ae 85 f7 96     ..d...O.........
    356c:	af 85 92 8f c1 85 6d 98 cd 85 95 97 e4 85 a1 93     ......m.........
    357c:	e9 85 cb 94 f7 85 93 8f fb 85 94 91 07 86 68 91     ..............h.
    358c:	2d 86 96 97 4e 86 d5 8c 50 86 73 8b 5a 86 95 8b     -...N...P.s.Z...
    359c:	5c 86 b8 97 5e 86 f1 8b 6b 86 8e 92 79 86 f8 93     \...^...k...y...
    35ac:	7b 86 b8 88 8a 86 e1 89 95 86 5c 8e a4 86 61 94     {.........\...a.
    35bc:	c7 86 d6 8e cb 86 60 92 cd 86 75 8c ce 86 61 8a     ......`...u...a.
    35cc:	d9 86 5e 8a db 86 81 e5 e4 86 b8 94 ed 86 67 95     ..^...........g.
    35dc:	ee 86 d8 94 f8 86 fb 91 f9 86 8c e5 fe 86 e9 89     ................
    35ec:	02 87 49 96 18 87 77 92 1c 87 a8 96 49 87 e4 90     ..I...w.....I...
    35fc:	4b 87 58 98 55 87 49 90 66 87 da 89 76 87 b1 92     K.X.U.I.f...v...
    360c:	7f 87 88 94 82 87 a5 e5 8d 87 5a 97 a2 87 a3 e5     ..........Z.....
    361c:	ba 87 86 97 f2 87 b3 e5 f9 87 49 8a fb 87 61 8b     ..........I...a.
    362c:	05 88 a2 e5 22 88 bf e5 40 88 8c 8c 46 88 4f 8f     ...."...@...F.O.
    363c:	4c 88 73 8d 53 88 70 8f 57 88 58 8a 5b 88 71 89     L.s.S.p.W.X.[.q.
    364c:	5d 88 d5 8f 61 88 74 8d 63 88 df 88 68 88 5c 95     ]...a.t.c...h.\.
    365c:	70 88 8a 90 77 88 8f 92 7f 88 dc 8b 88 88 55 8c     p...w.........U.
    366c:	8b 88 dc 91 96 88 b3 91 a2 88 d9 e5 ab 88 ed 94     ................
    367c:	b4 88 d1 8c b7 88 bf 88 c1 88 d9 8d c2 88 f4 97     ................
    368c:	c5 88 95 91 cf 88 a0 97 d4 88 e1 e5 d5 88 54 97     ..............T.
    369c:	dc 88 e2 95 df 88 be 8d e1 88 a1 97 f3 88 d6 8f     ................
    36ac:	f8 88 87 97 fd 88 bb 90 fe 88 9e 90 07 89 a1 95     ................
    36bc:	10 89 8c 8a 12 89 4a 96 1d 89 fa e5 56 89 a6 89     ......J.....V...
    36cc:	5e 89 fc e5 5f 89 dd 8b 66 89 40 e6 72 89 50 8f     ^..._...f.@.r.P.
    36dc:	77 89 46 e6 7f 89 bc 90 81 89 76 97 86 89 a2 95     w.F.......v.....
    36ec:	87 89 65 94 8b 89 a9 8c 8f 89 4b 8b 96 89 8b 8e     ..e.......K.....
    36fc:	97 89 60 94 9a 89 6f 8a a7 89 97 97 aa 89 65 90     ..`...o.......e.
    370c:	b3 89 cf 8a d2 89 70 8a e3 89 f0 89 e6 89 47 90     ......p.......G.
    371c:	00 8a be 8c 02 8a f9 92 08 8a 76 8c 0a 8a 75 90     ..........v...u.
    372c:	0e 8a a2 93 13 8a 50 8c 17 8a f5 91 18 8a 4c 8b     ......P.......L.
    373c:	1b 8a 61 e6 1d 8a 62 e6 1f 8a d7 8f 23 8a 8d 8c     ..a...b.....#...
    374c:	2a 8a 4b 96 2d 8a dd 90 31 8a 96 8b 33 8a f3 96     *.K.-...1...3...
    375c:	34 8a 69 91 36 8a 64 e6 3a 8a 66 90 3b 8a 90 92     4.i.6.d.:.f.;...
    376c:	3c 8a d8 8f 50 8a bc 8d 51 8a c0 91 54 8a d9 8f     <...P...Q...T...
    377c:	55 8a 5d 95 5e 8a 8c 8e 60 8a 72 89 63 8a 77 8c     U.].^...`.r.c.w.
    378c:	66 8a 8e 8e 69 8a 8d 8e 6b 8a 6c 98 6e 8a 46 91     f...i...k.l.n.F.
    379c:	70 8a 6c 8b 71 8a 62 98 72 8a 59 8a 73 8a da 8f     p.l.q.b.r.Y.s...
    37ac:	87 8a d6 8c 89 8a 5f 97 8c 8a 8f 8e 8d 8a 46 94     ......_.......F.
    37bc:	93 8a be 90 95 8a 61 92 98 8a 55 97 9e 8a ea 8c     ......a...U.....
    37cc:	a0 8a bd 90 a4 8a eb 8c ac 8a e0 90 ad 8a c7 93     ................
    37dc:	b0 8a 4e 92 b2 8a db 89 b9 8a ee 94 bc 8a 62 8b     ..N...........b.
    37ec:	bf 8a b2 92 c7 8a 6b 92 cb 8a bf 90 cc 8a d0 8a     ......k.........
    37fc:	cd 8a 79 e6 cf 8a 7a 90 d2 8a c8 97 d6 8a 5f 98     ..y...z......._.
    380c:	dc 8a b3 92 e6 8a fa 92 e7 8a 7e e6 eb 8a 7c e6     ..........~...|.
    381c:	ed 8a 40 97 ee 8a 90 8e f8 8a 94 8f fa 8a bf 8c     ..@.............
    382c:	fe 8a f8 91 00 8b 64 96 01 8b 79 89 02 8b e0 88     ......d...y.....
    383c:	04 8b a3 93 0e 8b e4 93 19 8b aa 8c 1b 8b 75 8d     ..............u.
    384c:	1d 8b d3 8e 21 8b 77 97 2c 8b 54 95 33 8b 90 e6     ....!.w.,.T.3...
    385c:	39 8b de 8b 49 8b 9a e6 58 8b af 8e 5c 8b 88 95     9...I...X...\...
    386c:	66 8b 78 8c 70 8b 63 8b 72 8b f7 8f 77 8b ec 8c     f.x.p.c.r...w...
    387c:	83 8b 5d 8e 90 8b 51 8f 37 8c 4a 92 46 8c a4 93     ..]...Q.7.J.F...
    388c:	4a 8c 4c 96 5a 8c d8 93 61 8c db 8f 6a 8c 8b 8d     J.L.Z...a...j...
    389c:	79 8c 5e 95 8c 8c 65 96 9d 8c 4c 8a 9e 8c e5 92     y.^...e...L.....
    38ac:	a0 8c 89 95 a1 8c e0 8d a2 8c 76 8d a7 8c 6e 95     ..........v...n.
    38bc:	a8 8c dd 89 a9 8c cc 94 ab 8c d1 8a ac 8c d3 90     ................
    38cc:	af 8c 99 92 b0 8c e1 96 b4 8c 4d 8b b6 8c c8 e6     ..........M.....
    38dc:	b7 8c 83 94 b8 8c dd 91 bb 8c ef 94 bc 8c 5c 93     ..............\.
    38ec:	bf 8c 66 96 c0 8c ea 89 c2 8c 47 98 c3 8c c0 92     ..f.......G.....
    38fc:	c4 8c 64 98 c7 8c 91 8e ca 8c af 91 ce 8c 47 91     ..d...........G.
    390c:	d1 8c f6 93 d3 8c 6f 95 db 8c 5e 8e dc 8c 92 8e     ......o...^.....
    391c:	de 8c dc 8f e0 8c 85 94 e2 8c ab 8c e6 8c 8a 95     ................
    392c:	ea 8c bf 8e ed 8c 71 93 fc 8c 77 8d 04 8d d1 e6     ......q...w.....
    393c:	05 8d d2 e6 08 8d a1 91 0b 8d e4 8a 14 8d db e6     ................
    394c:	64 8d d4 90 66 8d cd 8e 6b 8d 71 8a 70 8d 96 91     d...f...k.q.p...
    395c:	74 8d 8b 95 77 8d 4e 8b 85 8d b4 92 8a 8d 7a 89     t...w.N.......z.
    396c:	a3 8d ef 8e a8 8d 96 90 b3 8d ab 91 be 8d e4 e6     ................
    397c:	cb 8d eb e6 dd 8d 97 8b e1 8d d5 90 e8 8d d7 8c     ................
    398c:	ea 8d ec e6 ef 8d 48 98 f3 8d b5 92 f5 8d 48 91     ......H.......H.
    399c:	0a 8e 78 97 0f 8e a5 93 35 8e f9 e6 42 8e f8 e6     ..x.....5...B...
    39ac:	44 8e fb 92 5f 8e d6 90 74 8e 52 8f 8d 8e f4 96     D..._...t.R.....
    39bc:	ab 8e 67 90 af 8e eb 8b be 8e 5e e7 ca 8e d4 8e     ..g.......^.....
    39cc:	cb 8e 61 e7 cc 8e 4f 8b cd 8e 52 8c d2 8e ac 8c     ..a...O...R.....
    39dc:	df 8e ee 93 e2 8e 5d 93 f8 8e b2 8e fd 8e 79 8c     ......].......y.
    39ec:	03 8f 72 8a 09 8f da 8d 0c 8f 71 e7 14 8f e3 95     ..r.......q.....
    39fc:	1d 8f 50 8b 29 8f 79 94 2a 8f d6 97 2f 8f 53 8f     ..P.).y.*.../.S.
    3a0c:	33 8f 73 e7 38 8f 41 97 3b 8f 74 e7 3f 8f 60 97     3.s.8.A.;.t.?.`.
    3a1c:	44 8f 8d 8a 4d 8f 51 93 5f 8f 8c 8d 61 8f 44 8c     D...M.Q._...a.D.
    3a2c:	62 8f 80 e7 9b 8f 68 90 9e 8f ab 8e a3 8f 85 e7     b.....h.........
    3a3c:	b0 8f 43 92 b1 8f 4a 90 b2 8f 5f 94 ba 8f d3 95     ..C...J..._.....
    3a4c:	bb 8f d2 92 bc 8f 9e 8d bf 8f 48 92 c2 8f 49 89     ..........H...I.
    3a5c:	c4 8f 98 96 c5 8f 76 90 ce 8f 7d 8c d1 8f df 8b     ......v...}.....
    3a6c:	d4 8f d4 95 e6 8f de 89 e9 8f f4 93 eb 8f 97 94     ................
    3a7c:	ed 8f 52 93 f0 8f 71 8f f7 8f c0 96 fd 8f c7 92     ..R...q.........
    3a8c:	00 90 de 91 01 90 97 91 03 90 a6 93 06 90 74 8b     ..............t.
    3a9c:	0f 90 a7 93 10 90 80 92 13 90 fc 92 14 90 72 93     ..............r.
    3aac:	17 90 80 90 19 90 87 94 1a 90 ca 92 1d 90 c0 90     ................
    3abc:	1f 90 ac 91 20 90 a2 91 22 90 a7 88 23 90 41 98     .... ..."...#.A.
    3acc:	2e 90 df 91 31 90 54 8f 32 90 69 90 38 90 ed 88     ....1.T.2.i.8...
    3adc:	3c 90 4e 95 41 90 d9 93 42 90 8b 90 45 90 78 92     <.N.A...B...E.x.
    3aec:	47 90 f6 8b 4a 90 56 97 4b 90 5e 89 4d 90 d5 95     G...J.V.K.^.M...
    3afc:	4e 90 df 89 53 90 b9 93 54 90 42 92 55 90 e1 88     N...S...T.B.U...
    3b0c:	59 90 a1 ea 5c 90 bb 91 60 90 93 89 61 90 6b 91     Y...\...`...a.k.
    3b1c:	63 90 ad 8c 65 90 79 97 69 90 4b 93 6d 90 98 91     c...e.y.i.K.m...
    3b2c:	6e 90 d5 8e 75 90 85 8f 77 90 4a 91 78 90 49 91     n...u...w.J.x.I.
    3b3c:	7a 90 e2 88 7c 90 c9 97 7f 90 f0 94 84 90 d2 8a     z...|...........
    3b4c:	91 90 57 97 a3 90 df 93 a6 90 4d 96 aa 90 d7 8e     ..W.......M.....
    3b5c:	b8 90 40 93 c1 90 e8 88 ca 90 78 8d ce 90 59 98     ..@.......x...Y.
    3b6c:	e1 90 53 8c e8 90 94 95 ed 90 73 8a f5 90 58 97     ..S.......s...X.
    3b7c:	f7 90 bd 8b fd 90 73 93 2d 91 41 93 49 91 d1 93     ......s.-.A.I...
    3b8c:	4b 91 55 8f 4c 91 de 8e 4d 91 7a 94 4e 91 91 92     K.U.L...M.z.N...
    3b9c:	52 91 f0 8e 54 91 8c 90 62 91 7c 90 6a 91 8f 97     R...T...b.|.j...
    3bac:	6c 91 56 8f 75 91 79 8d 77 91 93 8d 78 91 5f 8e     l.V.u.y.w...x._.
    3bbc:	87 91 86 8f 8d 91 e7 91 90 91 ed 8c 92 91 c1 90     ................
    3bcc:	97 91 ae 94 9c 91 58 8f a4 91 dd 8f b8 91 f8 8f     ......X.........
    3bdc:	c6 91 ce 94 c7 91 d1 8d c8 91 df 8e cc 91 a2 97     ................
    3bec:	cd 91 64 8f ce 91 ec 96 cf 91 ca 97 d1 91 e0 8b     ..d.............
    3bfc:	d8 91 42 93 dc 91 98 8a dd 91 6a 90 e3 91 de 92     ..B.......j.....
    3c0c:	e6 91 74 96 e7 91 fa 8b 0d 92 dd 93 0e 92 62 8a     ..t...........b.
    3c1c:	34 92 e9 97 37 92 d8 8c 44 92 53 93 5b 92 94 89     4...7...D.S.[...
    3c2c:	62 92 ab 94 66 92 de 8f 71 92 7a 8d 7e 92 67 96     b...f...q.z.~.g.
    3c3c:	80 92 e2 8b 83 92 65 8f 85 92 ba 93 91 92 4c 91     ......e.......L.
    3c4c:	98 92 c1 96 9a 92 b6 92 9b 92 f3 e7 ad 92 4b 91     ..............K.
    3c5c:	cf 92 f5 e7 d2 92 4e 96 e4 92 9b 8f ea 92 dd 95     ......N.........
    3c6c:	ed 92 73 89 f2 92 65 95 f3 92 92 92 f8 92 98 8b     ..s...e.........
    3c7c:	fc 92 7c 8d 06 93 4b 8e 10 93 8d 90 18 93 8e 90     ..|...K.........
    3c8c:	20 93 f9 8f 26 93 d1 8b 28 93 64 95 2b 93 e0 8e      ...&...(.d.+...
    3c9c:	2c 93 42 98 2f 93 f6 8d 32 93 5e 98 4b 93 e7 93     ,.B./...2.^.K...
    3cac:	4d 93 74 93 54 93 d5 92 5b 93 62 92 6c 93 4c 8c     M.t.T...[.b.l.L.
    3cbc:	75 93 ae 8c 7e 93 df 8f 8c 93 99 8a 96 93 bd 8d     u...~...........
    3ccc:	97 93 99 91 9a 93 c8 92 a7 93 5a 8a ae 93 c1 92     ..........Z.....
    3cdc:	b9 93 50 e8 c3 93 56 e8 d1 93 4c 93 dd 93 57 e8     ..P...V...L...W.
    3cec:	e1 93 be 8b e8 93 53 e8 18 94 e0 8f 19 94 a8 93     ......S.........
    3cfc:	38 94 f6 91 51 94 d3 8a 53 94 f8 96 77 95 b7 92     8...Q...S...w...
    3d0c:	80 95 e5 96 83 95 4d 91 89 95 c2 95 8b 95 4a 8a     ......M.......J.
    3d1c:	8f 95 5b 89 91 95 d5 8a 93 95 d4 8a a2 95 d6 8a     ..[.............
    3d2c:	a3 95 74 8a a4 95 7d 8d a5 95 b4 94 b2 95 7b 89     ..t...}.......{.
    3d3c:	c7 95 c5 88 d8 95 ac 93 1c 96 8c 95 2a 96 e3 8d     ............*...
    3d4c:	32 96 68 96 3b 96 6a 91 3f 96 a2 88 40 96 c9 91     2.h.;.j.?...@...
    3d5c:	44 96 8d 95 4d 96 7e 8d 50 96 c0 8c 5b 96 c3 95     D...M.~.P...[...
    3d6c:	62 96 40 89 63 96 77 90 64 96 9c 8f 65 96 d7 8a     b.@.c.w.d...e...
    3d7c:	6a 96 86 94 70 96 41 89 73 96 c2 92 75 96 cb 97     j...p.A.s...u...
    3d8c:	76 96 a9 93 78 96 a4 97 7a 96 af 8c 7d 96 7a 97     v...x...z...}.z.
    3d9c:	85 96 f7 8b 86 96 b2 97 88 96 47 8c 8a 96 e0 91     ..........G.....
    3dac:	8b 96 40 e4 8e 96 4b 8a 8f 96 8f 90 94 96 75 8a     ..@...K.......u.
    3dbc:	95 96 a6 e8 98 96 a5 e8 99 96 84 8c 9b 96 db 8d     ................
    3dcc:	9c 96 e1 8f a0 96 42 89 a3 96 d7 97 a7 96 a9 e8     ......B.........
    3ddc:	b7 96 ea 97 bb 96 c7 90 bc 96 b9 94 c0 96 9d 90     ................
    3dec:	c1 96 e5 8a c4 96 59 97 c5 96 eb 89 c6 96 57 8f     ......Y.......W.
    3dfc:	c7 96 d9 8c cc 96 93 8e d1 96 47 8e db 96 97 90     ..........G.....
    3e0c:	e2 96 a3 97 e3 96 ef 93 e8 96 4a 89 ea 96 e1 90     ..........J.....
    3e1c:	eb 96 b4 8e f0 96 b5 95 f2 96 5f 89 f6 96 eb 97     .........._.....
    3e2c:	f7 96 8b 97 f9 96 b9 e8 fb 96 64 93 00 97 f9 8e     ..........d.....
    3e3c:	07 97 6b 90 0a 97 ec 97 1c 97 9a 91 1e 97 e0 89     ..k.............
    3e4c:	27 97 b6 96 32 97 49 98 52 97 c2 90 56 97 f5 96     '...2.I.R...V...
    3e5c:	59 97 c3 90 5e 97 f1 94 62 97 ca 96 69 97 76 8a     Y...^...b...i.v.
    3e6c:	6d 97 78 90 74 97 43 8c 84 97 93 8a 8b 97 dc e8     m.x.t.C.........
    3e7c:	8d 97 c6 88 98 97 e2 8f a0 97 66 8b ad 97 da 95     ..........f.....
    3e8c:	d3 97 d8 8a ee 97 42 94 f3 97 b9 89 fb 97 43 89     ......B.......C.
    3e9c:	ff 97 bf 8b 01 98 c5 95 02 98 b8 92 03 98 a0 8d     ................
    3eac:	05 98 80 8d 06 98 87 8f 08 98 7b 90 0c 98 f1 e8     ..........{.....
    3ebc:	10 98 61 97 11 98 e6 8a 12 98 d0 94 13 98 da 93     ..a.............
    3ecc:	17 98 9c 90 18 98 cc 97 1a 98 7a 8c 2c 98 6a 96     ..........z.,.j.
    3edc:	2d 98 aa 93 34 98 6f 89 37 98 f5 e8 38 98 f2 e8     -...4.o.7...8...
    3eec:	3b 98 70 95 3c 98 8a 97 46 98 f7 e8 4c 98 e8 91     ;.p.<...F...L...
    3efc:	4d 98 7a 8a 4e 98 7b 8a 54 98 e7 8a 55 98 b0 8c     M.z.N.{.T...U...
    3f0c:	58 98 e8 8a 5b 98 5e 93 5e 98 de 97 67 98 da 8c     X...[.^.^...g...
    3f1c:	a8 98 97 95 af 98 44 e9 db 98 f2 94 df 98 48 90     ......D.......H.
    3f2c:	e2 98 51 8b ef 98 d1 94 f2 98 f9 88 f4 98 b9 88     ..Q.............
    3f3c:	fc 98 94 8e fd 98 4f 96 fe 98 fc 8f 05 99 dd 96     ......O.........
    3f4c:	0a 99 7b 97 0c 99 61 89 10 99 60 8e 13 99 ec 89     ..{...a...`.....
    3f5c:	21 99 51 e9 28 99 d9 8a 57 99 c0 8b 96 99 f1 8e     !.Q.(...W.......
    3f6c:	99 99 81 8d a8 99 5d 8a ac 99 6e 94 b3 99 79 92     ......]...n...y.
    3f7c:	b4 99 e9 93 c1 99 9d 94 c4 99 ca 91 c5 99 77 89     ..............w.
    3f8c:	c6 99 ec 8b c8 99 ed 8b d0 99 93 92 d2 99 ee 8b     ................
    3f9c:	d5 99 ed 89 ff 99 78 8f 0e 9a 52 8b 12 9a 9b 91     ......x...R.....
    3fac:	13 9a b1 8c 28 9a cb 91 30 9a ab 93 55 9a 81 e9     ....(...0...U...
    3fbc:	5a 9a c1 8b a8 9a 9c 8d b8 9a 5b 8a c4 9a 91 90     Z.........[.....
    3fcc:	cf 9a 90 e9 d1 9a 91 e9 d3 9a 92 e9 d4 9a 93 e9     ................
    3fdc:	d8 9a 82 8d ea 9a af 94 ed 9a 45 95 3b 9b f6 e2     ..........E.;...
    3fec:	3c 9b 53 8b 41 9b 40 8a 42 9b b0 8d 45 9b a3 96     <.S.A.@.B...E...
    3ffc:	4e 9b b2 e9 54 9b 82 96 5a 9b 9b 8b 6f 9b 44 98     N...T...Z...o.D.
    400c:	8e 9b bc 88 92 9b a9 95 aa 9b 8e 96 ab 9b 4c 8e     ..............L.
    401c:	ad 9b f8 8d ae 9b 4e 91 b9 9b c1 e9 c9 9b ef 8c     ......N.........
    402c:	d6 9b 49 8e db 9b e2 91 e8 9b 7e 8c f0 9b ce e9     ..I.......~.....
    403c:	f1 9b cd e9 f5 9b b1 88 0d 9c 82 8a 10 9c 6b 98     ..............k.
    404c:	24 9c dc e9 2d 9c 68 95 2f 9c f1 88 39 9c 8f 8a     $...-.h./...9...
    405c:	3a 9c cb e9 3b 9c 56 89 48 9c 4c 92 52 9c 90 96     :...;.V.H.L.R...
    406c:	57 9c d8 97 e5 9c b9 92 e9 9c b5 94 f3 9c 50 96     W.............P.
    407c:	f4 9c c2 96 f6 9c ce 93 07 9d bc 93 0e 9d a8 89     ................
    408c:	1b 9d 95 89 28 9d 9b 8a 2b 9d b0 8e 2c 9d a7 89     ....(...+...,...
    409c:	3b 9d 83 8d 5c 9d 4c 89 60 9d 94 8d 61 9d b7 96     ;...\.L.`...a...
    40ac:	6c 9d 51 96 8f 9d 7b 8c b4 9d df 92 f2 9d 68 98     l.Q...{.......h.
    40bc:	f9 9d e9 91 fa 9d eb 8d 78 9e b2 8c 7f 9e ad 8e     ........x.......
    40cc:	93 9e 5b 98 97 9e ed 97 9f 9e d9 97 a6 9e 9e 94     ..[.............
    40dc:	b9 9e 8d 8d ba 9e cb 96 bb 9e 83 96 bf 9e 9b 96     ................
    40ec:	c4 9e a9 89 cd 9e 6f 8b d2 9e 95 8d d9 9e d9 96     ......o.........
    40fc:	db 9e e1 91 0e 9f 43 93 13 9f db 8c 20 9f 6c 91     ......C..... .l.
    410c:	3b 9f 40 95 4b 9f 56 e2 62 9f ee 97 8d 9f b4 97     ;.@.K.V.b.......
    411c:	01 ff 49 81 03 ff 94 81 04 ff 90 81 05 ff 93 81     ..I.............
    412c:	06 ff 95 81 08 ff 69 81 09 ff 6a 81 0a ff 96 81     ......i...j.....
    413c:	0b ff 7b 81 0c ff 43 81 0d ff 7c 81 0e ff 44 81     ..{...C...|...D.
    414c:	0f ff 5e 81 10 ff 4f 82 11 ff 50 82 12 ff 51 82     ..^...O...P...Q.
    415c:	13 ff 52 82 14 ff 53 82 15 ff 54 82 16 ff 55 82     ..R...S...T...U.
    416c:	17 ff 56 82 18 ff 57 82 19 ff 58 82 1a ff 46 81     ..V...W...X...F.
    417c:	1b ff 47 81 1c ff 83 81 1d ff 81 81 1e ff 84 81     ..G.............
    418c:	1f ff 48 81 20 ff 97 81 21 ff 60 82 22 ff 61 82     ..H. ...!.`.".a.
    419c:	23 ff 62 82 24 ff 63 82 25 ff 64 82 26 ff 65 82     #.b.$.c.%.d.&.e.
    41ac:	27 ff 66 82 28 ff 67 82 29 ff 68 82 2a ff 69 82     '.f.(.g.).h.*.i.
    41bc:	2b ff 6a 82 2c ff 6b 82 2d ff 6c 82 2e ff 6d 82     +.j.,.k.-.l...m.
    41cc:	2f ff 6e 82 30 ff 6f 82 31 ff 70 82 32 ff 71 82     /.n.0.o.1.p.2.q.
    41dc:	33 ff 72 82 34 ff 73 82 35 ff 74 82 36 ff 75 82     3.r.4.s.5.t.6.u.
    41ec:	37 ff 76 82 38 ff 77 82 39 ff 78 82 3a ff 79 82     7.v.8.w.9.x.:.y.
    41fc:	3b ff 6d 81 3c ff 5f 81 3d ff 6e 81 3e ff 4f 81     ;.m.<._.=.n.>.O.
    420c:	3f ff 51 81 40 ff 4d 81 41 ff 81 82 42 ff 82 82     ?.Q.@.M.A...B...
    421c:	43 ff 83 82 44 ff 84 82 45 ff 85 82 46 ff 86 82     C...D...E...F...
    422c:	47 ff 87 82 48 ff 88 82 49 ff 89 82 4a ff 8a 82     G...H...I...J...
    423c:	4b ff 8b 82 4c ff 8c 82 4d ff 8d 82 4e ff 8e 82     K...L...M...N...
    424c:	4f ff 8f 82 50 ff 90 82 51 ff 91 82 52 ff 92 82     O...P...Q...R...
    425c:	53 ff 93 82 54 ff 94 82 55 ff 95 82 56 ff 96 82     S...T...U...V...
    426c:	57 ff 97 82 58 ff 98 82 59 ff 99 82 5a ff 9a 82     W...X...Y...Z...
    427c:	5b ff 6f 81 5c ff 62 81 5d ff 70 81 5e ff 60 81     [.o.\.b.].p.^.`.
    428c:	61 ff a1 00 62 ff a2 00 63 ff a3 00 64 ff a4 00     a...b...c...d...
    429c:	65 ff a5 00 66 ff a6 00 67 ff a7 00 68 ff a8 00     e...f...g...h...
    42ac:	69 ff a9 00 6a ff aa 00 6b ff ab 00 6c ff ac 00     i...j...k...l...
    42bc:	6d ff ad 00 6e ff ae 00 6f ff af 00 70 ff b0 00     m...n...o...p...
    42cc:	71 ff b1 00 72 ff b2 00 73 ff b3 00 74 ff b4 00     q...r...s...t...
    42dc:	75 ff b5 00 76 ff b6 00 77 ff b7 00 78 ff b8 00     u...v...w...x...
    42ec:	79 ff b9 00 7a ff ba 00 7b ff bb 00 7c ff bc 00     y...z...{...|...
    42fc:	7d ff bd 00 7e ff be 00 7f ff bf 00 80 ff c0 00     }...~...........
    430c:	81 ff c1 00 82 ff c2 00 83 ff c3 00 84 ff c4 00     ................
    431c:	85 ff c5 00 86 ff c6 00 87 ff c7 00 88 ff c8 00     ................
    432c:	89 ff c9 00 8a ff ca 00 8b ff cb 00 8c ff cc 00     ................
    433c:	8d ff cd 00 8e ff ce 00 8f ff cf 00 90 ff d0 00     ................
    434c:	91 ff d1 00 92 ff d2 00 93 ff d3 00 94 ff d4 00     ................
    435c:	95 ff d5 00 96 ff d6 00 97 ff d7 00 98 ff d8 00     ................
    436c:	99 ff d9 00 9a ff da 00 9b ff db 00 9c ff dc 00     ................
    437c:	9d ff dd 00 9e ff de 00 9f ff df 00 e0 ff 91 81     ................
    438c:	e1 ff 92 81 e2 ff ca 81 e3 ff 50 81 e5 ff 8f 81     ..........P.....
    439c:	00 00 00 00                                         ....

000043a0 <__ctors_end>:
    43a0:	11 24       	eor	r1, r1
    43a2:	1f be       	out	0x3f, r1	; 63
    43a4:	cf ef       	ldi	r28, 0xFF	; 255
    43a6:	d4 e0       	ldi	r29, 0x04	; 4
    43a8:	de bf       	out	0x3e, r29	; 62
    43aa:	cd bf       	out	0x3d, r28	; 61

000043ac <__do_copy_data>:
    43ac:	11 e0       	ldi	r17, 0x01	; 1
    43ae:	a0 e0       	ldi	r26, 0x00	; 0
    43b0:	b1 e0       	ldi	r27, 0x01	; 1
    43b2:	e4 e5       	ldi	r30, 0x54	; 84
    43b4:	fa eb       	ldi	r31, 0xBA	; 186
    43b6:	02 c0       	rjmp	.+4      	; 0x43bc <__do_copy_data+0x10>
    43b8:	05 90       	lpm	r0, Z+
    43ba:	0d 92       	st	X+, r0
    43bc:	aa 38       	cpi	r26, 0x8A	; 138
    43be:	b1 07       	cpc	r27, r17
    43c0:	d9 f7       	brne	.-10     	; 0x43b8 <__do_copy_data+0xc>

000043c2 <__do_clear_bss>:
    43c2:	1c e0       	ldi	r17, 0x0C	; 12
    43c4:	aa e8       	ldi	r26, 0x8A	; 138
    43c6:	b1 e0       	ldi	r27, 0x01	; 1
    43c8:	01 c0       	rjmp	.+2      	; 0x43cc <.do_clear_bss_start>

000043ca <.do_clear_bss_loop>:
    43ca:	1d 92       	st	X+, r1

000043cc <.do_clear_bss_start>:
    43cc:	a1 32       	cpi	r26, 0x21	; 33
    43ce:	b1 07       	cpc	r27, r17
    43d0:	e1 f7       	brne	.-8      	; 0x43ca <.do_clear_bss_loop>
    43d2:	0e 94 bf 23 	call	0x477e	; 0x477e <main>
    43d6:	0c 94 28 5d 	jmp	0xba50	; 0xba50 <_exit>

000043da <__bad_interrupt>:
    43da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000043de <put_rc>:
		"INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
		"INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0"
		"LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0";
	FRESULT i;

	for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    43de:	40 e0       	ldi	r20, 0x00	; 0
    43e0:	50 e0       	ldi	r21, 0x00	; 0
    43e2:	2b e3       	ldi	r18, 0x3B	; 59
    43e4:	34 e0       	ldi	r19, 0x04	; 4
    43e6:	08 c0       	rjmp	.+16     	; 0x43f8 <put_rc+0x1a>
    43e8:	f9 01       	movw	r30, r18
		while(pgm_read_byte_near(p++));
    43ea:	2f 5f       	subi	r18, 0xFF	; 255
    43ec:	3f 4f       	sbci	r19, 0xFF	; 255
    43ee:	e4 91       	lpm	r30, Z
    43f0:	ee 23       	and	r30, r30
    43f2:	d1 f7       	brne	.-12     	; 0x43e8 <put_rc+0xa>
		"INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
		"INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0"
		"LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0";
	FRESULT i;

	for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    43f4:	4f 5f       	subi	r20, 0xFF	; 255
    43f6:	5f 4f       	sbci	r21, 0xFF	; 255
    43f8:	48 17       	cp	r20, r24
    43fa:	59 07       	cpc	r21, r25
    43fc:	21 f0       	breq	.+8      	; 0x4406 <put_rc+0x28>
    43fe:	f9 01       	movw	r30, r18
    4400:	64 91       	lpm	r22, Z
    4402:	66 23       	and	r22, r22
    4404:	89 f7       	brne	.-30     	; 0x43e8 <put_rc+0xa>
		while(pgm_read_byte_near(p++));
	}
	xprintf(PSTR("rc=%u FR_%S\n"), rc, p);
    4406:	00 d0       	rcall	.+0      	; 0x4408 <put_rc+0x2a>
    4408:	00 d0       	rcall	.+0      	; 0x440a <put_rc+0x2c>
    440a:	00 d0       	rcall	.+0      	; 0x440c <put_rc+0x2e>
    440c:	ed b7       	in	r30, 0x3d	; 61
    440e:	fe b7       	in	r31, 0x3e	; 62
    4410:	31 96       	adiw	r30, 0x01	; 1
    4412:	4e e2       	ldi	r20, 0x2E	; 46
    4414:	54 e0       	ldi	r21, 0x04	; 4
    4416:	ad b7       	in	r26, 0x3d	; 61
    4418:	be b7       	in	r27, 0x3e	; 62
    441a:	12 96       	adiw	r26, 0x02	; 2
    441c:	5c 93       	st	X, r21
    441e:	4e 93       	st	-X, r20
    4420:	11 97       	sbiw	r26, 0x01	; 1
    4422:	93 83       	std	Z+3, r25	; 0x03
    4424:	82 83       	std	Z+2, r24	; 0x02
    4426:	35 83       	std	Z+5, r19	; 0x05
    4428:	24 83       	std	Z+4, r18	; 0x04
    442a:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
    442e:	ed b7       	in	r30, 0x3d	; 61
    4430:	fe b7       	in	r31, 0x3e	; 62
    4432:	36 96       	adiw	r30, 0x06	; 6
    4434:	0f b6       	in	r0, 0x3f	; 63
    4436:	f8 94       	cli
    4438:	fe bf       	out	0x3e, r31	; 62
    443a:	0f be       	out	0x3f, r0	; 63
    443c:	ed bf       	out	0x3d, r30	; 61
}
    443e:	08 95       	ret

00004440 <put_dump>:
/* Monitor                                                                  */


static
void put_dump (const BYTE *buff, DWORD ofs, BYTE cnt)
{
    4440:	a2 e0       	ldi	r26, 0x02	; 2
    4442:	b0 e0       	ldi	r27, 0x00	; 0
    4444:	e6 e2       	ldi	r30, 0x26	; 38
    4446:	f2 e2       	ldi	r31, 0x22	; 34
    4448:	0c 94 da 5c 	jmp	0xb9b4	; 0xb9b4 <__prologue_saves__+0x10>
    444c:	d2 2e       	mov	r13, r18
	BYTE i;


	xprintf(PSTR("%08lX "), ofs);
    444e:	00 d0       	rcall	.+0      	; 0x4450 <put_dump+0x10>
    4450:	00 d0       	rcall	.+0      	; 0x4452 <put_dump+0x12>
    4452:	00 d0       	rcall	.+0      	; 0x4454 <put_dump+0x14>
    4454:	e7 e2       	ldi	r30, 0x27	; 39
    4456:	f4 e0       	ldi	r31, 0x04	; 4
    4458:	ad b7       	in	r26, 0x3d	; 61
    445a:	be b7       	in	r27, 0x3e	; 62
    445c:	12 96       	adiw	r26, 0x02	; 2
    445e:	fc 93       	st	X, r31
    4460:	ee 93       	st	-X, r30
    4462:	11 97       	sbiw	r26, 0x01	; 1
    4464:	ed b7       	in	r30, 0x3d	; 61
    4466:	fe b7       	in	r31, 0x3e	; 62
    4468:	43 83       	std	Z+3, r20	; 0x03
    446a:	54 83       	std	Z+4, r21	; 0x04
    446c:	65 83       	std	Z+5, r22	; 0x05
    446e:	76 83       	std	Z+6, r23	; 0x06
    4470:	89 83       	std	Y+1, r24	; 0x01
    4472:	9a 83       	std	Y+2, r25	; 0x02
    4474:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
    4478:	89 81       	ldd	r24, Y+1	; 0x01
    447a:	9a 81       	ldd	r25, Y+2	; 0x02
    447c:	a8 2e       	mov	r10, r24
    447e:	b9 2e       	mov	r11, r25

	for(i = 0; i < cnt; i++)
    4480:	2d b7       	in	r18, 0x3d	; 61
    4482:	3e b7       	in	r19, 0x3e	; 62
    4484:	2a 5f       	subi	r18, 0xFA	; 250
    4486:	3f 4f       	sbci	r19, 0xFF	; 255
    4488:	0f b6       	in	r0, 0x3f	; 63
    448a:	f8 94       	cli
    448c:	3e bf       	out	0x3e, r19	; 62
    448e:	0f be       	out	0x3f, r0	; 63
    4490:	2d bf       	out	0x3d, r18	; 61
    4492:	85 01       	movw	r16, r10
/*--------------------------------------------------------------------------*/
/* Monitor                                                                  */


static
void put_dump (const BYTE *buff, DWORD ofs, BYTE cnt)
    4494:	c8 2e       	mov	r12, r24


	xprintf(PSTR("%08lX "), ofs);

	for(i = 0; i < cnt; i++)
		xprintf(PSTR(" %02X"), buff[i]);
    4496:	81 e2       	ldi	r24, 0x21	; 33
    4498:	e8 2e       	mov	r14, r24
    449a:	84 e0       	ldi	r24, 0x04	; 4
    449c:	f8 2e       	mov	r15, r24
	BYTE i;


	xprintf(PSTR("%08lX "), ofs);

	for(i = 0; i < cnt; i++)
    449e:	16 c0       	rjmp	.+44     	; 0x44cc <put_dump+0x8c>
		xprintf(PSTR(" %02X"), buff[i]);
    44a0:	d8 01       	movw	r26, r16
    44a2:	8d 91       	ld	r24, X+
    44a4:	8d 01       	movw	r16, r26
    44a6:	00 d0       	rcall	.+0      	; 0x44a8 <put_dump+0x68>
    44a8:	00 d0       	rcall	.+0      	; 0x44aa <put_dump+0x6a>
    44aa:	ed b7       	in	r30, 0x3d	; 61
    44ac:	fe b7       	in	r31, 0x3e	; 62
    44ae:	31 96       	adiw	r30, 0x01	; 1
    44b0:	ad b7       	in	r26, 0x3d	; 61
    44b2:	be b7       	in	r27, 0x3e	; 62
    44b4:	12 96       	adiw	r26, 0x02	; 2
    44b6:	fc 92       	st	X, r15
    44b8:	ee 92       	st	-X, r14
    44ba:	11 97       	sbiw	r26, 0x01	; 1
    44bc:	82 83       	std	Z+2, r24	; 0x02
    44be:	13 82       	std	Z+3, r1	; 0x03
    44c0:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
    44c4:	0f 90       	pop	r0
    44c6:	0f 90       	pop	r0
    44c8:	0f 90       	pop	r0
    44ca:	0f 90       	pop	r0
	BYTE i;


	xprintf(PSTR("%08lX "), ofs);

	for(i = 0; i < cnt; i++)
    44cc:	80 2f       	mov	r24, r16
    44ce:	8c 19       	sub	r24, r12
    44d0:	8d 15       	cp	r24, r13
    44d2:	30 f3       	brcs	.-52     	; 0x44a0 <put_dump+0x60>
		xprintf(PSTR(" %02X"), buff[i]);

	xputc(' ');
    44d4:	80 e2       	ldi	r24, 0x20	; 32
    44d6:	08 c0       	rjmp	.+16     	; 0x44e8 <put_dump+0xa8>
	for(i = 0; i < cnt; i++)
		xputc((buff[i] >= ' ' && buff[i] <= '~') ? buff[i] : '.');
    44d8:	f5 01       	movw	r30, r10
    44da:	81 91       	ld	r24, Z+
    44dc:	5f 01       	movw	r10, r30
    44de:	98 2f       	mov	r25, r24
    44e0:	90 52       	subi	r25, 0x20	; 32
    44e2:	9f 35       	cpi	r25, 0x5F	; 95
    44e4:	08 f0       	brcs	.+2      	; 0x44e8 <put_dump+0xa8>
    44e6:	8e e2       	ldi	r24, 0x2E	; 46
    44e8:	0e 94 60 56 	call	0xacc0	; 0xacc0 <xputc>

	for(i = 0; i < cnt; i++)
		xprintf(PSTR(" %02X"), buff[i]);

	xputc(' ');
	for(i = 0; i < cnt; i++)
    44ec:	8a 2d       	mov	r24, r10
    44ee:	8c 19       	sub	r24, r12
    44f0:	8d 15       	cp	r24, r13
    44f2:	90 f3       	brcs	.-28     	; 0x44d8 <put_dump+0x98>
		xputc((buff[i] >= ' ' && buff[i] <= '~') ? buff[i] : '.');

	xputc('\n');
    44f4:	8a e0       	ldi	r24, 0x0A	; 10
    44f6:	0e 94 60 56 	call	0xacc0	; 0xacc0 <xputc>
}
    44fa:	22 96       	adiw	r28, 0x02	; 2
    44fc:	ea e0       	ldi	r30, 0x0A	; 10
    44fe:	0c 94 f6 5c 	jmp	0xb9ec	; 0xb9ec <__epilogue_restores__+0x10>

00004502 <scan_files>:

static
FRESULT scan_files (
	char* path		/* Pointer to the working buffer with start path */
)
{
    4502:	aa e1       	ldi	r26, 0x1A	; 26
    4504:	b0 e0       	ldi	r27, 0x00	; 0
    4506:	e7 e8       	ldi	r30, 0x87	; 135
    4508:	f2 e2       	ldi	r31, 0x22	; 34
    450a:	0c 94 d9 5c 	jmp	0xb9b2	; 0xb9b2 <__prologue_saves__+0xe>
    450e:	8c 01       	movw	r16, r24
	DIR dirs;
	FRESULT res;
	int i;
	char *fn;

	res = f_opendir(&dirs, path);
    4510:	6e 01       	movw	r12, r28
    4512:	08 94       	sec
    4514:	c1 1c       	adc	r12, r1
    4516:	d1 1c       	adc	r13, r1
    4518:	c6 01       	movw	r24, r12
    451a:	b8 01       	movw	r22, r16
    451c:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <f_opendir>
    4520:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    4522:	00 97       	sbiw	r24, 0x00	; 0
    4524:	09 f0       	breq	.+2      	; 0x4528 <scan_files+0x26>
    4526:	70 c0       	rjmp	.+224    	; 0x4608 <scan_files+0x106>
		i = strlen(path);
    4528:	f8 01       	movw	r30, r16
    452a:	01 90       	ld	r0, Z+
    452c:	00 20       	and	r0, r0
    452e:	e9 f7       	brne	.-6      	; 0x452a <scan_files+0x28>
    4530:	31 97       	sbiw	r30, 0x01	; 1
    4532:	e0 1b       	sub	r30, r16
    4534:	f1 0b       	sbc	r31, r17
		while (((res = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
    4536:	bc 2c       	mov	r11, r12
    4538:	ad 2c       	mov	r10, r13
#else
			fn = Finfo.fname;
#endif
			if (Finfo.fattrib & AM_DIR) {
				acc_dirs++;
				*(path+i) = '/'; strcpy(path+i+1, fn);
    453a:	68 01       	movw	r12, r16
    453c:	ce 0e       	add	r12, r30
    453e:	df 1e       	adc	r13, r31
    4540:	9f e2       	ldi	r25, 0x2F	; 47
    4542:	99 2e       	mov	r9, r25
    4544:	7f 01       	movw	r14, r30
    4546:	08 94       	sec
    4548:	e1 1c       	adc	r14, r1
    454a:	f1 1c       	adc	r15, r1
    454c:	e0 0e       	add	r14, r16
    454e:	f1 1e       	adc	r15, r17
	char *fn;

	res = f_opendir(&dirs, path);
	if (res == FR_OK) {
		i = strlen(path);
		while (((res = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
    4550:	4d c0       	rjmp	.+154    	; 0x45ec <scan_files+0xea>
			if (_FS_RPATH && Finfo.fname[0] == '.') continue;
    4552:	8e 32       	cpi	r24, 0x2E	; 46
    4554:	09 f4       	brne	.+2      	; 0x4558 <scan_files+0x56>
    4556:	4a c0       	rjmp	.+148    	; 0x45ec <scan_files+0xea>
#if _USE_LFN
			fn = *Finfo.lfname ? Finfo.lfname : Finfo.fname;
    4558:	60 91 12 07 	lds	r22, 0x0712
    455c:	70 91 13 07 	lds	r23, 0x0713
    4560:	fb 01       	movw	r30, r22
    4562:	80 81       	ld	r24, Z
    4564:	88 23       	and	r24, r24
    4566:	11 f4       	brne	.+4      	; 0x456c <scan_files+0x6a>
    4568:	65 e0       	ldi	r22, 0x05	; 5
    456a:	77 e0       	ldi	r23, 0x07	; 7
#else
			fn = Finfo.fname;
#endif
			if (Finfo.fattrib & AM_DIR) {
    456c:	80 91 04 07 	lds	r24, 0x0704
    4570:	84 ff       	sbrs	r24, 4
    4572:	17 c0       	rjmp	.+46     	; 0x45a2 <scan_files+0xa0>
				acc_dirs++;
    4574:	80 91 16 07 	lds	r24, 0x0716
    4578:	90 91 17 07 	lds	r25, 0x0717
    457c:	01 96       	adiw	r24, 0x01	; 1
    457e:	90 93 17 07 	sts	0x0717, r25
    4582:	80 93 16 07 	sts	0x0716, r24
				*(path+i) = '/'; strcpy(path+i+1, fn);
    4586:	f6 01       	movw	r30, r12
    4588:	90 82       	st	Z, r9
    458a:	c7 01       	movw	r24, r14
    458c:	0e 94 21 5d 	call	0xba42	; 0xba42 <strcpy>
				res = scan_files(path);
    4590:	c8 01       	movw	r24, r16
    4592:	0e 94 81 22 	call	0x4502	; 0x4502 <scan_files>
    4596:	9c 01       	movw	r18, r24
				*(path+i) = '\0';
    4598:	f6 01       	movw	r30, r12
    459a:	10 82       	st	Z, r1
				if (res != FR_OK) break;
    459c:	00 97       	sbiw	r24, 0x00	; 0
    459e:	31 f1       	breq	.+76     	; 0x45ec <scan_files+0xea>
    45a0:	33 c0       	rjmp	.+102    	; 0x4608 <scan_files+0x106>
			} else {
//				xprintf(PSTR("%s/%s\n"), path, fn);
				acc_files++;
    45a2:	80 91 18 07 	lds	r24, 0x0718
    45a6:	90 91 19 07 	lds	r25, 0x0719
    45aa:	01 96       	adiw	r24, 0x01	; 1
    45ac:	90 93 19 07 	sts	0x0719, r25
    45b0:	80 93 18 07 	sts	0x0718, r24
				acc_size += Finfo.fsize;
    45b4:	80 91 9d 0b 	lds	r24, 0x0B9D
    45b8:	90 91 9e 0b 	lds	r25, 0x0B9E
    45bc:	a0 91 9f 0b 	lds	r26, 0x0B9F
    45c0:	b0 91 a0 0b 	lds	r27, 0x0BA0
    45c4:	20 91 fc 06 	lds	r18, 0x06FC
    45c8:	30 91 fd 06 	lds	r19, 0x06FD
    45cc:	40 91 fe 06 	lds	r20, 0x06FE
    45d0:	50 91 ff 06 	lds	r21, 0x06FF
    45d4:	82 0f       	add	r24, r18
    45d6:	93 1f       	adc	r25, r19
    45d8:	a4 1f       	adc	r26, r20
    45da:	b5 1f       	adc	r27, r21
    45dc:	80 93 9d 0b 	sts	0x0B9D, r24
    45e0:	90 93 9e 0b 	sts	0x0B9E, r25
    45e4:	a0 93 9f 0b 	sts	0x0B9F, r26
    45e8:	b0 93 a0 0b 	sts	0x0BA0, r27
	char *fn;

	res = f_opendir(&dirs, path);
	if (res == FR_OK) {
		i = strlen(path);
		while (((res = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
    45ec:	8b 2d       	mov	r24, r11
    45ee:	9a 2d       	mov	r25, r10
    45f0:	6c ef       	ldi	r22, 0xFC	; 252
    45f2:	76 e0       	ldi	r23, 0x06	; 6
    45f4:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <f_readdir>
    45f8:	9c 01       	movw	r18, r24
    45fa:	00 97       	sbiw	r24, 0x00	; 0
    45fc:	29 f4       	brne	.+10     	; 0x4608 <scan_files+0x106>
    45fe:	80 91 05 07 	lds	r24, 0x0705
    4602:	88 23       	and	r24, r24
    4604:	09 f0       	breq	.+2      	; 0x4608 <scan_files+0x106>
    4606:	a5 cf       	rjmp	.-182    	; 0x4552 <scan_files+0x50>
			}
		}
	}

	return res;
}
    4608:	c9 01       	movw	r24, r18
    460a:	6a 96       	adiw	r28, 0x1a	; 26
    460c:	eb e0       	ldi	r30, 0x0B	; 11
    460e:	0c 94 f5 5c 	jmp	0xb9ea	; 0xb9ea <__epilogue_restores__+0xe>

00004612 <get_line.clone.0>:
	xputc('\n');
}


static
void get_line (char *buff, int len)
    4612:	0f 93       	push	r16
    4614:	1f 93       	push	r17
    4616:	cf 93       	push	r28
    4618:	df 93       	push	r29
    461a:	8c 01       	movw	r16, r24
{
	BYTE c;
	int i = 0;
    461c:	c0 e0       	ldi	r28, 0x00	; 0
    461e:	d0 e0       	ldi	r29, 0x00	; 0


	for (;;) {
		c = uart_get();
    4620:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <uart_get>
		if (c == '\r') break;
    4624:	8d 30       	cpi	r24, 0x0D	; 13
    4626:	a9 f0       	breq	.+42     	; 0x4652 <get_line.clone.0+0x40>
		if ((c == '\b') && i) {
    4628:	88 30       	cpi	r24, 0x08	; 8
    462a:	31 f4       	brne	.+12     	; 0x4638 <get_line.clone.0+0x26>
    462c:	20 97       	sbiw	r28, 0x00	; 0
    462e:	c1 f3       	breq	.-16     	; 0x4620 <get_line.clone.0+0xe>
			i--;
    4630:	21 97       	sbiw	r28, 0x01	; 1
			uart_put(c);
    4632:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <uart_put>
    4636:	f4 cf       	rjmp	.-24     	; 0x4620 <get_line.clone.0+0xe>
			continue;
		}
		if (c >= ' ' && i < len - 1) {	/* Visible chars */
    4638:	80 32       	cpi	r24, 0x20	; 32
    463a:	90 f3       	brcs	.-28     	; 0x4620 <get_line.clone.0+0xe>
    463c:	cf 37       	cpi	r28, 0x7F	; 127
    463e:	d1 05       	cpc	r29, r1
    4640:	7c f7       	brge	.-34     	; 0x4620 <get_line.clone.0+0xe>
			buff[i++] = c;
    4642:	f8 01       	movw	r30, r16
    4644:	ec 0f       	add	r30, r28
    4646:	fd 1f       	adc	r31, r29
    4648:	80 83       	st	Z, r24
    464a:	21 96       	adiw	r28, 0x01	; 1
			xputc(c);
    464c:	0e 94 60 56 	call	0xacc0	; 0xacc0 <xputc>
    4650:	e7 cf       	rjmp	.-50     	; 0x4620 <get_line.clone.0+0xe>
		}
	}
	buff[i] = 0;
    4652:	c0 0f       	add	r28, r16
    4654:	d1 1f       	adc	r29, r17
    4656:	18 82       	st	Y, r1
	uart_put('\n');
    4658:	8a e0       	ldi	r24, 0x0A	; 10
    465a:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <uart_put>
}
    465e:	df 91       	pop	r29
    4660:	cf 91       	pop	r28
    4662:	1f 91       	pop	r17
    4664:	0f 91       	pop	r16
    4666:	08 95       	ret

00004668 <__vector_7>:
/* 100Hz timer interrupt generated by OC2                  */
/*---------------------------------------------------------*/


ISR(TIMER2_COMPA_vect)
{
    4668:	1f 92       	push	r1
    466a:	0f 92       	push	r0
    466c:	0f b6       	in	r0, 0x3f	; 63
    466e:	0f 92       	push	r0
    4670:	11 24       	eor	r1, r1
    4672:	2f 93       	push	r18
    4674:	3f 93       	push	r19
    4676:	4f 93       	push	r20
    4678:	5f 93       	push	r21
    467a:	6f 93       	push	r22
    467c:	7f 93       	push	r23
    467e:	8f 93       	push	r24
    4680:	9f 93       	push	r25
    4682:	af 93       	push	r26
    4684:	bf 93       	push	r27
    4686:	ef 93       	push	r30
    4688:	ff 93       	push	r31
	Timer++;			/* Performance counter for this module */
    468a:	80 91 1a 07 	lds	r24, 0x071A
    468e:	90 91 1b 07 	lds	r25, 0x071B
    4692:	01 96       	adiw	r24, 0x01	; 1
    4694:	90 93 1b 07 	sts	0x071B, r25
    4698:	80 93 1a 07 	sts	0x071A, r24
	disk_timerproc();	/* Drive timer procedure of low level disk I/O module */
    469c:	0e 94 bd 55 	call	0xab7a	; 0xab7a <disk_timerproc>
}
    46a0:	ff 91       	pop	r31
    46a2:	ef 91       	pop	r30
    46a4:	bf 91       	pop	r27
    46a6:	af 91       	pop	r26
    46a8:	9f 91       	pop	r25
    46aa:	8f 91       	pop	r24
    46ac:	7f 91       	pop	r23
    46ae:	6f 91       	pop	r22
    46b0:	5f 91       	pop	r21
    46b2:	4f 91       	pop	r20
    46b4:	3f 91       	pop	r19
    46b6:	2f 91       	pop	r18
    46b8:	0f 90       	pop	r0
    46ba:	0f be       	out	0x3f, r0	; 63
    46bc:	0f 90       	pop	r0
    46be:	1f 90       	pop	r1
    46c0:	18 95       	reti

000046c2 <get_fattime>:
/* the system does not support a real time clock.          */
/* This is not required in read-only configuration.        */


DWORD get_fattime ()
{
    46c2:	a8 e0       	ldi	r26, 0x08	; 8
    46c4:	b0 e0       	ldi	r27, 0x00	; 0
    46c6:	e7 e6       	ldi	r30, 0x67	; 103
    46c8:	f3 e2       	ldi	r31, 0x23	; 35
    46ca:	0c 94 e2 5c 	jmp	0xb9c4	; 0xb9c4 <__prologue_saves__+0x20>
	RTC rtc;


	/* Get local time */
	rtc_gettime(&rtc);
    46ce:	ce 01       	movw	r24, r28
    46d0:	01 96       	adiw	r24, 0x01	; 1
    46d2:	0e 94 cc 55 	call	0xab98	; 0xab98 <rtc_gettime>

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
    46d6:	2c 81       	ldd	r18, Y+4	; 0x04
    46d8:	30 e0       	ldi	r19, 0x00	; 0
    46da:	40 e0       	ldi	r20, 0x00	; 0
    46dc:	50 e0       	ldi	r21, 0x00	; 0
    46de:	a9 01       	movw	r20, r18
    46e0:	33 27       	eor	r19, r19
    46e2:	22 27       	eor	r18, r18
	/* Get local time */
	rtc_gettime(&rtc);

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
    46e4:	8b 81       	ldd	r24, Y+3	; 0x03
    46e6:	90 e0       	ldi	r25, 0x00	; 0
    46e8:	a0 e0       	ldi	r26, 0x00	; 0
    46ea:	b0 e0       	ldi	r27, 0x00	; 0
    46ec:	f5 e1       	ldi	r31, 0x15	; 21
    46ee:	88 0f       	add	r24, r24
    46f0:	99 1f       	adc	r25, r25
    46f2:	aa 1f       	adc	r26, r26
    46f4:	bb 1f       	adc	r27, r27
    46f6:	fa 95       	dec	r31
    46f8:	d1 f7       	brne	.-12     	; 0x46ee <get_fattime+0x2c>
    46fa:	28 2b       	or	r18, r24
    46fc:	39 2b       	or	r19, r25
    46fe:	4a 2b       	or	r20, r26
    4700:	5b 2b       	or	r21, r27
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
    4702:	8e 81       	ldd	r24, Y+6	; 0x06
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	a0 e0       	ldi	r26, 0x00	; 0
    4708:	b0 e0       	ldi	r27, 0x00	; 0
    470a:	eb e0       	ldi	r30, 0x0B	; 11
    470c:	88 0f       	add	r24, r24
    470e:	99 1f       	adc	r25, r25
    4710:	aa 1f       	adc	r26, r26
    4712:	bb 1f       	adc	r27, r27
    4714:	ea 95       	dec	r30
    4716:	d1 f7       	brne	.-12     	; 0x470c <get_fattime+0x4a>
	rtc_gettime(&rtc);

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
    4718:	28 2b       	or	r18, r24
    471a:	39 2b       	or	r19, r25
    471c:	4a 2b       	or	r20, r26
    471e:	5b 2b       	or	r21, r27
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
    4720:	8f 81       	ldd	r24, Y+7	; 0x07
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	a0 e0       	ldi	r26, 0x00	; 0
    4726:	b0 e0       	ldi	r27, 0x00	; 0
    4728:	75 e0       	ldi	r23, 0x05	; 5
    472a:	88 0f       	add	r24, r24
    472c:	99 1f       	adc	r25, r25
    472e:	aa 1f       	adc	r26, r26
    4730:	bb 1f       	adc	r27, r27
    4732:	7a 95       	dec	r23
    4734:	d1 f7       	brne	.-12     	; 0x472a <get_fattime+0x68>

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
    4736:	28 2b       	or	r18, r24
    4738:	39 2b       	or	r19, r25
    473a:	4a 2b       	or	r20, r26
    473c:	5b 2b       	or	r21, r27
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
    473e:	88 85       	ldd	r24, Y+8	; 0x08
    4740:	86 95       	lsr	r24
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	a0 e0       	ldi	r26, 0x00	; 0
    4746:	b0 e0       	ldi	r27, 0x00	; 0
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
    4748:	28 2b       	or	r18, r24
    474a:	39 2b       	or	r19, r25
    474c:	4a 2b       	or	r20, r26
    474e:	5b 2b       	or	r21, r27

	/* Get local time */
	rtc_gettime(&rtc);

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
    4750:	89 81       	ldd	r24, Y+1	; 0x01
    4752:	9a 81       	ldd	r25, Y+2	; 0x02
    4754:	8c 5b       	subi	r24, 0xBC	; 188
    4756:	97 40       	sbci	r25, 0x07	; 7
    4758:	a0 e0       	ldi	r26, 0x00	; 0
    475a:	b0 e0       	ldi	r27, 0x00	; 0
    475c:	69 e1       	ldi	r22, 0x19	; 25
    475e:	88 0f       	add	r24, r24
    4760:	99 1f       	adc	r25, r25
    4762:	aa 1f       	adc	r26, r26
    4764:	bb 1f       	adc	r27, r27
    4766:	6a 95       	dec	r22
    4768:	d1 f7       	brne	.-12     	; 0x475e <get_fattime+0x9c>
    476a:	28 2b       	or	r18, r24
    476c:	39 2b       	or	r19, r25
    476e:	4a 2b       	or	r20, r26
    4770:	5b 2b       	or	r21, r27
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
}
    4772:	b9 01       	movw	r22, r18
    4774:	ca 01       	movw	r24, r20
    4776:	28 96       	adiw	r28, 0x08	; 8
    4778:	e2 e0       	ldi	r30, 0x02	; 2
    477a:	0c 94 fe 5c 	jmp	0xb9fc	; 0xb9fc <__epilogue_restores__+0x20>

0000477e <main>:
/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
{
    477e:	a7 e8       	ldi	r26, 0x87	; 135
    4780:	b0 e0       	ldi	r27, 0x00	; 0
    4782:	e5 ec       	ldi	r30, 0xC5	; 197
    4784:	f3 e2       	ldi	r31, 0x23	; 35
    4786:	0c 94 d2 5c 	jmp	0xb9a4	; 0xb9a4 <__prologue_saves__>
	long p1, p2, p3;
	BYTE res, b1, *bp;
	WORD w1;
	UINT s1, s2, cnt;
	DWORD ofs, sect = 0;
	const BYTE ft[] = {0,12,16,32};
    478a:	1a 8e       	std	Y+26, r1	; 0x1a
    478c:	8c e0       	ldi	r24, 0x0C	; 12
    478e:	8b 8f       	std	Y+27, r24	; 0x1b
    4790:	80 e1       	ldi	r24, 0x10	; 16
    4792:	8c 8f       	std	Y+28, r24	; 0x1c
    4794:	80 e2       	ldi	r24, 0x20	; 32
    4796:	8d 8f       	std	Y+29, r24	; 0x1d

//	PORTF = 0b11111111;	// Port F

//	PORTG = 0b11111; 	// Port G

	uart_init();		// Initialize UART driver
    4798:	0e 94 3d 2f 	call	0x5e7a	; 0x5e7a <uart_init>
	OCR1A = 51;			// Timer1: LCD bias generator (OC1B)
	OCR1B = 51;
	TCCR1A = 0b00010000;
	TCCR1B = 0b00001010;
*/
	OCR2A = 90-1;		// Timer2: 100Hz interval (OC2)
    479c:	89 e5       	ldi	r24, 0x59	; 89
    479e:	80 93 b3 00 	sts	0x00B3, r24
	TCCR2A = 0b00000010;
    47a2:	82 e0       	ldi	r24, 0x02	; 2
    47a4:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = 0b00000101;
    47a8:	95 e0       	ldi	r25, 0x05	; 5
    47aa:	90 93 b1 00 	sts	0x00B1, r25
	TIMSK2 = 0b00000010;   // Enable TC2.oc interrupt 
    47ae:	80 93 70 00 	sts	0x0070, r24

	rtc_init();			// Initialize RTC
    47b2:	0e 94 e1 55 	call	0xabc2	; 0xabc2 <rtc_init>
	FIL file1, file2;		/* File object */


	IoInit();

	xfunc_out = uart_put;
    47b6:	81 e5       	ldi	r24, 0x51	; 81
    47b8:	9f e2       	ldi	r25, 0x2F	; 47
    47ba:	90 93 97 02 	sts	0x0297, r25
    47be:	80 93 96 02 	sts	0x0296, r24
	xputs(PSTR("\nFatFs module test monitor for AVR\n"));
    47c2:	8d ef       	ldi	r24, 0xFD	; 253
    47c4:	93 e0       	ldi	r25, 0x03	; 3
    47c6:	0e 94 71 56 	call	0xace2	; 0xace2 <xputs>
	xputs(_USE_LFN ? PSTR("LFN Enabled") : PSTR("LFN Disabled"));
    47ca:	81 ef       	ldi	r24, 0xF1	; 241
    47cc:	93 e0       	ldi	r25, 0x03	; 3
    47ce:	0e 94 71 56 	call	0xace2	; 0xace2 <xputs>
	xprintf(PSTR(", Code page: %u\n"), _CODE_PAGE);
    47d2:	00 d0       	rcall	.+0      	; 0x47d4 <main+0x56>
    47d4:	00 d0       	rcall	.+0      	; 0x47d6 <main+0x58>
    47d6:	80 ee       	ldi	r24, 0xE0	; 224
    47d8:	93 e0       	ldi	r25, 0x03	; 3
    47da:	ad b7       	in	r26, 0x3d	; 61
    47dc:	be b7       	in	r27, 0x3e	; 62
    47de:	12 96       	adiw	r26, 0x02	; 2
    47e0:	9c 93       	st	X, r25
    47e2:	8e 93       	st	-X, r24
    47e4:	11 97       	sbiw	r26, 0x01	; 1
    47e6:	84 ea       	ldi	r24, 0xA4	; 164
    47e8:	93 e0       	ldi	r25, 0x03	; 3
    47ea:	14 96       	adiw	r26, 0x04	; 4
    47ec:	9c 93       	st	X, r25
    47ee:	8e 93       	st	-X, r24
    47f0:	13 97       	sbiw	r26, 0x03	; 3
    47f2:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>

#if _USE_LFN
	Finfo.lfname = Lfname;
    47f6:	8c e1       	ldi	r24, 0x1C	; 28
    47f8:	9b e0       	ldi	r25, 0x0B	; 11
    47fa:	90 93 13 07 	sts	0x0713, r25
    47fe:	80 93 12 07 	sts	0x0712, r24
	Finfo.lfsize = sizeof(Lfname);
    4802:	21 e8       	ldi	r18, 0x81	; 129
    4804:	30 e0       	ldi	r19, 0x00	; 0
    4806:	30 93 15 07 	sts	0x0715, r19
    480a:	20 93 14 07 	sts	0x0714, r18
    480e:	0f 90       	pop	r0
    4810:	0f 90       	pop	r0
    4812:	0f 90       	pop	r0
    4814:	0f 90       	pop	r0
	char *ptr, *ptr2;
	long p1, p2, p3;
	BYTE res, b1, *bp;
	WORD w1;
	UINT s1, s2, cnt;
	DWORD ofs, sect = 0;
    4816:	c0 58       	subi	r28, 0x80	; 128
    4818:	df 4f       	sbci	r29, 0xFF	; 255
    481a:	18 82       	st	Y, r1
    481c:	19 82       	std	Y+1, r1	; 0x01
    481e:	1a 82       	std	Y+2, r1	; 0x02
    4820:	1b 82       	std	Y+3, r1	; 0x03
    4822:	c0 58       	subi	r28, 0x80	; 128
    4824:	d0 40       	sbci	r29, 0x00	; 0
	Finfo.lfsize = sizeof(Lfname);
#endif

	for (;;) {
		xputc('>');
		ptr = (char*)Line;
    4826:	71 ea       	ldi	r23, 0xA1	; 161
    4828:	67 2e       	mov	r6, r23
    482a:	7b e0       	ldi	r23, 0x0B	; 11
    482c:	77 2e       	mov	r7, r23
				ptr2 = strchr(ptr, ' ');
				if (!ptr2) break;
				*ptr2++ = 0;
				while (*ptr2 == ' ') ptr2++;
				xprintf(PSTR("Opening \"%s\""), ptr);
				res = f_open(&file1, ptr, FA_OPEN_EXISTING | FA_READ);
    482e:	60 e4       	ldi	r22, 0x40	; 64
    4830:	86 2e       	mov	r8, r22
    4832:	91 2c       	mov	r9, r1
    4834:	8c 0e       	add	r8, r28
    4836:	9d 1e       	adc	r9, r29
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(PSTR("\nCreating \"%s\""), ptr2);
				res = f_open(&file2, ptr2, FA_CREATE_ALWAYS | FA_WRITE);
    4838:	50 e6       	ldi	r21, 0x60	; 96
    483a:	45 2e       	mov	r4, r21
    483c:	51 2c       	mov	r5, r1
    483e:	4c 0e       	add	r4, r28
    4840:	5d 1e       	adc	r5, r29
				xprintf(PSTR("\nCopying..."));
				p1 = 0;
				for (;;) {
					res = f_read(&file1, Buff, sizeof(Buff), &s1);
					if (res || s1 == 0) break;   /* error or eof */
					res = f_write(&file2, Buff, s1, &s2);
    4842:	48 e0       	ldi	r20, 0x08	; 8
    4844:	24 2e       	mov	r2, r20
    4846:	31 2c       	mov	r3, r1
    4848:	2c 0e       	add	r2, r28
    484a:	3d 1e       	adc	r3, r29
								(Finfo.ftime >> 11), (Finfo.ftime >> 5) & 63,
								Finfo.fsize, &(Finfo.fname[0]));
#if _USE_LFN
					for (p2 = strlen(Finfo.fname); p2 < 14; p2++)
						xputc(' ');
					xprintf(PSTR("%s\n"), Lfname);
    484c:	cc 57       	subi	r28, 0x7C	; 124
    484e:	df 4f       	sbci	r29, 0xFF	; 255
    4850:	88 83       	st	Y, r24
    4852:	c4 58       	subi	r28, 0x84	; 132
    4854:	d0 40       	sbci	r29, 0x00	; 0
    4856:	cb 57       	subi	r28, 0x7B	; 123
    4858:	df 4f       	sbci	r29, 0xFF	; 255
    485a:	98 83       	st	Y, r25
    485c:	c5 58       	subi	r28, 0x85	; 133
    485e:	d0 40       	sbci	r29, 0x00	; 0
	Finfo.lfname = Lfname;
	Finfo.lfsize = sizeof(Lfname);
#endif

	for (;;) {
		xputc('>');
    4860:	8e e3       	ldi	r24, 0x3E	; 62
    4862:	0e 94 60 56 	call	0xacc0	; 0xacc0 <xputc>
		ptr = (char*)Line;
    4866:	7b 82       	std	Y+3, r7	; 0x03
    4868:	6a 82       	std	Y+2, r6	; 0x02
		get_line(ptr, sizeof(Line));
    486a:	c3 01       	movw	r24, r6
    486c:	0e 94 09 23 	call	0x4612	; 0x4612 <get_line.clone.0>
		switch (*ptr++) {
    4870:	aa 81       	ldd	r26, Y+2	; 0x02
    4872:	bb 81       	ldd	r27, Y+3	; 0x03
    4874:	fd 01       	movw	r30, r26
    4876:	81 91       	ld	r24, Z+
    4878:	fb 83       	std	Y+3, r31	; 0x03
    487a:	ea 83       	std	Y+2, r30	; 0x02
    487c:	84 36       	cpi	r24, 0x64	; 100
    487e:	61 f0       	breq	.+24     	; 0x4898 <main+0x11a>
    4880:	85 36       	cpi	r24, 0x65	; 101
    4882:	1c f4       	brge	.+6      	; 0x488a <main+0x10c>
    4884:	82 36       	cpi	r24, 0x62	; 98
    4886:	61 f7       	brne	.-40     	; 0x4860 <main+0xe2>
    4888:	de c1       	rjmp	.+956    	; 0x4c46 <main+0x4c8>
    488a:	86 36       	cpi	r24, 0x66	; 102
    488c:	09 f4       	brne	.+2      	; 0x4890 <main+0x112>
    488e:	42 c3       	rjmp	.+1668   	; 0x4f14 <main+0x796>
    4890:	84 37       	cpi	r24, 0x74	; 116
    4892:	31 f7       	brne	.-52     	; 0x4860 <main+0xe2>
    4894:	0c 94 8c 2e 	jmp	0x5d18	; 0x5d18 <main+0x159a>

		case 'd' :
			switch (*ptr++) {
    4898:	11 96       	adiw	r26, 0x01	; 1
    489a:	8c 91       	ld	r24, X
    489c:	11 97       	sbiw	r26, 0x01	; 1
    489e:	31 96       	adiw	r30, 0x01	; 1
    48a0:	fb 83       	std	Y+3, r31	; 0x03
    48a2:	ea 83       	std	Y+2, r30	; 0x02
    48a4:	89 36       	cpi	r24, 0x69	; 105
    48a6:	09 f4       	brne	.+2      	; 0x48aa <main+0x12c>
    48a8:	85 c0       	rjmp	.+266    	; 0x49b4 <main+0x236>
    48aa:	83 37       	cpi	r24, 0x73	; 115
    48ac:	09 f4       	brne	.+2      	; 0x48b0 <main+0x132>
    48ae:	a5 c0       	rjmp	.+330    	; 0x49fa <main+0x27c>
    48b0:	84 36       	cpi	r24, 0x64	; 100
    48b2:	b1 f6       	brne	.-84     	; 0x4860 <main+0xe2>
			case 'd' :	/* dd <phy_drv#> [<sector>] - Dump secrtor */
				if (!xatoi(&ptr, &p1)) break;
    48b4:	8e 01       	movw	r16, r28
    48b6:	0e 5f       	subi	r16, 0xFE	; 254
    48b8:	1f 4f       	sbci	r17, 0xFF	; 255
    48ba:	c8 01       	movw	r24, r16
    48bc:	be 01       	movw	r22, r28
    48be:	62 5f       	subi	r22, 0xF2	; 242
    48c0:	7f 4f       	sbci	r23, 0xFF	; 255
    48c2:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    48c6:	88 23       	and	r24, r24
    48c8:	59 f2       	breq	.-106    	; 0x4860 <main+0xe2>
				if (!xatoi(&ptr, &p2)) p2 = sect;
    48ca:	c8 01       	movw	r24, r16
    48cc:	be 01       	movw	r22, r28
    48ce:	6e 5e       	subi	r22, 0xEE	; 238
    48d0:	7f 4f       	sbci	r23, 0xFF	; 255
    48d2:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    48d6:	88 23       	and	r24, r24
    48d8:	61 f4       	brne	.+24     	; 0x48f2 <main+0x174>
    48da:	c0 58       	subi	r28, 0x80	; 128
    48dc:	df 4f       	sbci	r29, 0xFF	; 255
    48de:	28 81       	ld	r18, Y
    48e0:	39 81       	ldd	r19, Y+1	; 0x01
    48e2:	4a 81       	ldd	r20, Y+2	; 0x02
    48e4:	5b 81       	ldd	r21, Y+3	; 0x03
    48e6:	c0 58       	subi	r28, 0x80	; 128
    48e8:	d0 40       	sbci	r29, 0x00	; 0
    48ea:	2a 8b       	std	Y+18, r18	; 0x12
    48ec:	3b 8b       	std	Y+19, r19	; 0x13
    48ee:	4c 8b       	std	Y+20, r20	; 0x14
    48f0:	5d 8b       	std	Y+21, r21	; 0x15
				res = disk_read((BYTE)p1, Buff, p2, 1);
    48f2:	2a 89       	ldd	r18, Y+18	; 0x12
    48f4:	3b 89       	ldd	r19, Y+19	; 0x13
    48f6:	4c 89       	ldd	r20, Y+20	; 0x14
    48f8:	5d 89       	ldd	r21, Y+21	; 0x15
    48fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    48fc:	6c e1       	ldi	r22, 0x1C	; 28
    48fe:	77 e0       	ldi	r23, 0x07	; 7
    4900:	01 e0       	ldi	r16, 0x01	; 1
    4902:	0e 94 8a 53 	call	0xa714	; 0xa714 <disk_read>
				if (res) { xprintf(PSTR("rc=%d\n"), res); break; }
    4906:	88 23       	and	r24, r24
    4908:	41 f0       	breq	.+16     	; 0x491a <main+0x19c>
    490a:	00 d0       	rcall	.+0      	; 0x490c <main+0x18e>
    490c:	00 d0       	rcall	.+0      	; 0x490e <main+0x190>
    490e:	ed b7       	in	r30, 0x3d	; 61
    4910:	fe b7       	in	r31, 0x3e	; 62
    4912:	31 96       	adiw	r30, 0x01	; 1
    4914:	29 ed       	ldi	r18, 0xD9	; 217
    4916:	33 e0       	ldi	r19, 0x03	; 3
    4918:	61 c0       	rjmp	.+194    	; 0x49dc <main+0x25e>
				sect = p2 + 1;
    491a:	8a 89       	ldd	r24, Y+18	; 0x12
    491c:	9b 89       	ldd	r25, Y+19	; 0x13
    491e:	ac 89       	ldd	r26, Y+20	; 0x14
    4920:	bd 89       	ldd	r27, Y+21	; 0x15
    4922:	9c 01       	movw	r18, r24
    4924:	ad 01       	movw	r20, r26
    4926:	2f 5f       	subi	r18, 0xFF	; 255
    4928:	3f 4f       	sbci	r19, 0xFF	; 255
    492a:	4f 4f       	sbci	r20, 0xFF	; 255
    492c:	5f 4f       	sbci	r21, 0xFF	; 255
    492e:	c0 58       	subi	r28, 0x80	; 128
    4930:	df 4f       	sbci	r29, 0xFF	; 255
    4932:	28 83       	st	Y, r18
    4934:	39 83       	std	Y+1, r19	; 0x01
    4936:	4a 83       	std	Y+2, r20	; 0x02
    4938:	5b 83       	std	Y+3, r21	; 0x03
    493a:	c0 58       	subi	r28, 0x80	; 128
    493c:	d0 40       	sbci	r29, 0x00	; 0
				xprintf(PSTR("Sector:%lu\n"), p2);
    493e:	00 d0       	rcall	.+0      	; 0x4940 <main+0x1c2>
    4940:	00 d0       	rcall	.+0      	; 0x4942 <main+0x1c4>
    4942:	00 d0       	rcall	.+0      	; 0x4944 <main+0x1c6>
    4944:	2d ec       	ldi	r18, 0xCD	; 205
    4946:	33 e0       	ldi	r19, 0x03	; 3
    4948:	ed b7       	in	r30, 0x3d	; 61
    494a:	fe b7       	in	r31, 0x3e	; 62
    494c:	32 83       	std	Z+2, r19	; 0x02
    494e:	21 83       	std	Z+1, r18	; 0x01
    4950:	83 83       	std	Z+3, r24	; 0x03
    4952:	94 83       	std	Z+4, r25	; 0x04
    4954:	a5 83       	std	Z+5, r26	; 0x05
    4956:	b6 83       	std	Z+6, r27	; 0x06
    4958:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
    495c:	2d b7       	in	r18, 0x3d	; 61
    495e:	3e b7       	in	r19, 0x3e	; 62
    4960:	2a 5f       	subi	r18, 0xFA	; 250
    4962:	3f 4f       	sbci	r19, 0xFF	; 255
    4964:	0f b6       	in	r0, 0x3f	; 63
    4966:	f8 94       	cli
    4968:	3e bf       	out	0x3e, r19	; 62
    496a:	0f be       	out	0x3f, r0	; 63
    496c:	2d bf       	out	0x3d, r18	; 61
				for (bp=Buff, ofs = 0; ofs < 0x200; bp+=16, ofs+=16)
    496e:	ee 24       	eor	r14, r14
    4970:	ff 24       	eor	r15, r15
    4972:	87 01       	movw	r16, r14
    4974:	3c e1       	ldi	r19, 0x1C	; 28
    4976:	c3 2e       	mov	r12, r19
    4978:	37 e0       	ldi	r19, 0x07	; 7
    497a:	d3 2e       	mov	r13, r19
					put_dump(bp, ofs, 16);
    497c:	c6 01       	movw	r24, r12
    497e:	b8 01       	movw	r22, r16
    4980:	a7 01       	movw	r20, r14
    4982:	20 e1       	ldi	r18, 0x10	; 16
    4984:	0e 94 20 22 	call	0x4440	; 0x4440 <put_dump>
				if (!xatoi(&ptr, &p2)) p2 = sect;
				res = disk_read((BYTE)p1, Buff, p2, 1);
				if (res) { xprintf(PSTR("rc=%d\n"), res); break; }
				sect = p2 + 1;
				xprintf(PSTR("Sector:%lu\n"), p2);
				for (bp=Buff, ofs = 0; ofs < 0x200; bp+=16, ofs+=16)
    4988:	40 e1       	ldi	r20, 0x10	; 16
    498a:	50 e0       	ldi	r21, 0x00	; 0
    498c:	c4 0e       	add	r12, r20
    498e:	d5 1e       	adc	r13, r21
    4990:	80 e1       	ldi	r24, 0x10	; 16
    4992:	90 e0       	ldi	r25, 0x00	; 0
    4994:	a0 e0       	ldi	r26, 0x00	; 0
    4996:	b0 e0       	ldi	r27, 0x00	; 0
    4998:	e8 0e       	add	r14, r24
    499a:	f9 1e       	adc	r15, r25
    499c:	0a 1f       	adc	r16, r26
    499e:	1b 1f       	adc	r17, r27
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	e9 16       	cp	r14, r25
    49a4:	92 e0       	ldi	r25, 0x02	; 2
    49a6:	f9 06       	cpc	r15, r25
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	09 07       	cpc	r16, r25
    49ac:	90 e0       	ldi	r25, 0x00	; 0
    49ae:	19 07       	cpc	r17, r25
    49b0:	29 f7       	brne	.-54     	; 0x497c <main+0x1fe>
    49b2:	56 cf       	rjmp	.-340    	; 0x4860 <main+0xe2>
					put_dump(bp, ofs, 16);
				break;

			case 'i' :	/* di <phy_drv#> - Initialize disk */
				if (!xatoi(&ptr, &p1)) break;
    49b4:	ce 01       	movw	r24, r28
    49b6:	02 96       	adiw	r24, 0x02	; 2
    49b8:	be 01       	movw	r22, r28
    49ba:	62 5f       	subi	r22, 0xF2	; 242
    49bc:	7f 4f       	sbci	r23, 0xFF	; 255
    49be:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    49c2:	88 23       	and	r24, r24
    49c4:	09 f4       	brne	.+2      	; 0x49c8 <main+0x24a>
    49c6:	4c cf       	rjmp	.-360    	; 0x4860 <main+0xe2>
				xprintf(PSTR("rc=%d\n"), disk_initialize((BYTE)p1));
    49c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    49ca:	0e 94 cc 52 	call	0xa598	; 0xa598 <disk_initialize>
    49ce:	00 d0       	rcall	.+0      	; 0x49d0 <main+0x252>
    49d0:	00 d0       	rcall	.+0      	; 0x49d2 <main+0x254>
    49d2:	ed b7       	in	r30, 0x3d	; 61
    49d4:	fe b7       	in	r31, 0x3e	; 62
    49d6:	31 96       	adiw	r30, 0x01	; 1
    49d8:	26 ec       	ldi	r18, 0xC6	; 198
    49da:	33 e0       	ldi	r19, 0x03	; 3
    49dc:	ad b7       	in	r26, 0x3d	; 61
    49de:	be b7       	in	r27, 0x3e	; 62
    49e0:	12 96       	adiw	r26, 0x02	; 2
    49e2:	3c 93       	st	X, r19
    49e4:	2e 93       	st	-X, r18
    49e6:	11 97       	sbiw	r26, 0x01	; 1
    49e8:	82 83       	std	Z+2, r24	; 0x02
    49ea:	13 82       	std	Z+3, r1	; 0x03
    49ec:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
				break;
    49f0:	0f 90       	pop	r0
    49f2:	0f 90       	pop	r0
    49f4:	0f 90       	pop	r0
    49f6:	0f 90       	pop	r0
    49f8:	33 cf       	rjmp	.-410    	; 0x4860 <main+0xe2>

			case 's' :	/* ds <phy_drv#> - Show disk status */
				if (!xatoi(&ptr, &p1)) break;
    49fa:	ce 01       	movw	r24, r28
    49fc:	02 96       	adiw	r24, 0x02	; 2
    49fe:	be 01       	movw	r22, r28
    4a00:	62 5f       	subi	r22, 0xF2	; 242
    4a02:	7f 4f       	sbci	r23, 0xFF	; 255
    4a04:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    4a08:	88 23       	and	r24, r24
    4a0a:	09 f4       	brne	.+2      	; 0x4a0e <main+0x290>
    4a0c:	29 cf       	rjmp	.-430    	; 0x4860 <main+0xe2>
				if (disk_ioctl((BYTE)p1, GET_SECTOR_COUNT, &p2) == RES_OK)
    4a0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a10:	61 e0       	ldi	r22, 0x01	; 1
    4a12:	ae 01       	movw	r20, r28
    4a14:	4e 5e       	subi	r20, 0xEE	; 238
    4a16:	5f 4f       	sbci	r21, 0xFF	; 255
    4a18:	0e 94 57 54 	call	0xa8ae	; 0xa8ae <disk_ioctl>
    4a1c:	00 97       	sbiw	r24, 0x00	; 0
    4a1e:	e1 f4       	brne	.+56     	; 0x4a58 <main+0x2da>
					{ xprintf(PSTR("Drive size: %lu sectors\n"), p2); }
    4a20:	00 d0       	rcall	.+0      	; 0x4a22 <main+0x2a4>
    4a22:	00 d0       	rcall	.+0      	; 0x4a24 <main+0x2a6>
    4a24:	00 d0       	rcall	.+0      	; 0x4a26 <main+0x2a8>
    4a26:	8d ea       	ldi	r24, 0xAD	; 173
    4a28:	93 e0       	ldi	r25, 0x03	; 3
    4a2a:	ed b7       	in	r30, 0x3d	; 61
    4a2c:	fe b7       	in	r31, 0x3e	; 62
    4a2e:	92 83       	std	Z+2, r25	; 0x02
    4a30:	81 83       	std	Z+1, r24	; 0x01
    4a32:	8a 89       	ldd	r24, Y+18	; 0x12
    4a34:	9b 89       	ldd	r25, Y+19	; 0x13
    4a36:	ac 89       	ldd	r26, Y+20	; 0x14
    4a38:	bd 89       	ldd	r27, Y+21	; 0x15
    4a3a:	83 83       	std	Z+3, r24	; 0x03
    4a3c:	94 83       	std	Z+4, r25	; 0x04
    4a3e:	a5 83       	std	Z+5, r26	; 0x05
    4a40:	b6 83       	std	Z+6, r27	; 0x06
    4a42:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
    4a46:	2d b7       	in	r18, 0x3d	; 61
    4a48:	3e b7       	in	r19, 0x3e	; 62
    4a4a:	2a 5f       	subi	r18, 0xFA	; 250
    4a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a4e:	0f b6       	in	r0, 0x3f	; 63
    4a50:	f8 94       	cli
    4a52:	3e bf       	out	0x3e, r19	; 62
    4a54:	0f be       	out	0x3f, r0	; 63
    4a56:	2d bf       	out	0x3d, r18	; 61
				if (disk_ioctl((BYTE)p1, GET_SECTOR_SIZE, &w1) == RES_OK)
    4a58:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a5a:	62 e0       	ldi	r22, 0x02	; 2
    4a5c:	ae 01       	movw	r20, r28
    4a5e:	4c 5f       	subi	r20, 0xFC	; 252
    4a60:	5f 4f       	sbci	r21, 0xFF	; 255
    4a62:	0e 94 57 54 	call	0xa8ae	; 0xa8ae <disk_ioctl>
    4a66:	00 97       	sbiw	r24, 0x00	; 0
    4a68:	b1 f4       	brne	.+44     	; 0x4a96 <main+0x318>
					{ xprintf(PSTR("Sector size: %u\n"), w1); }
    4a6a:	00 d0       	rcall	.+0      	; 0x4a6c <main+0x2ee>
    4a6c:	00 d0       	rcall	.+0      	; 0x4a6e <main+0x2f0>
    4a6e:	8c e9       	ldi	r24, 0x9C	; 156
    4a70:	93 e0       	ldi	r25, 0x03	; 3
    4a72:	ad b7       	in	r26, 0x3d	; 61
    4a74:	be b7       	in	r27, 0x3e	; 62
    4a76:	12 96       	adiw	r26, 0x02	; 2
    4a78:	9c 93       	st	X, r25
    4a7a:	8e 93       	st	-X, r24
    4a7c:	11 97       	sbiw	r26, 0x01	; 1
    4a7e:	8c 81       	ldd	r24, Y+4	; 0x04
    4a80:	9d 81       	ldd	r25, Y+5	; 0x05
    4a82:	14 96       	adiw	r26, 0x04	; 4
    4a84:	9c 93       	st	X, r25
    4a86:	8e 93       	st	-X, r24
    4a88:	13 97       	sbiw	r26, 0x03	; 3
    4a8a:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
    4a8e:	0f 90       	pop	r0
    4a90:	0f 90       	pop	r0
    4a92:	0f 90       	pop	r0
    4a94:	0f 90       	pop	r0
				if (disk_ioctl((BYTE)p1, GET_BLOCK_SIZE, &p2) == RES_OK)
    4a96:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a98:	63 e0       	ldi	r22, 0x03	; 3
    4a9a:	ae 01       	movw	r20, r28
    4a9c:	4e 5e       	subi	r20, 0xEE	; 238
    4a9e:	5f 4f       	sbci	r21, 0xFF	; 255
    4aa0:	0e 94 57 54 	call	0xa8ae	; 0xa8ae <disk_ioctl>
    4aa4:	00 97       	sbiw	r24, 0x00	; 0
    4aa6:	e1 f4       	brne	.+56     	; 0x4ae0 <main+0x362>
					{ xprintf(PSTR("Erase block: %lu sectors\n"), p2); }
    4aa8:	00 d0       	rcall	.+0      	; 0x4aaa <main+0x32c>
    4aaa:	00 d0       	rcall	.+0      	; 0x4aac <main+0x32e>
    4aac:	00 d0       	rcall	.+0      	; 0x4aae <main+0x330>
    4aae:	82 e8       	ldi	r24, 0x82	; 130
    4ab0:	93 e0       	ldi	r25, 0x03	; 3
    4ab2:	ed b7       	in	r30, 0x3d	; 61
    4ab4:	fe b7       	in	r31, 0x3e	; 62
    4ab6:	92 83       	std	Z+2, r25	; 0x02
    4ab8:	81 83       	std	Z+1, r24	; 0x01
    4aba:	8a 89       	ldd	r24, Y+18	; 0x12
    4abc:	9b 89       	ldd	r25, Y+19	; 0x13
    4abe:	ac 89       	ldd	r26, Y+20	; 0x14
    4ac0:	bd 89       	ldd	r27, Y+21	; 0x15
    4ac2:	83 83       	std	Z+3, r24	; 0x03
    4ac4:	94 83       	std	Z+4, r25	; 0x04
    4ac6:	a5 83       	std	Z+5, r26	; 0x05
    4ac8:	b6 83       	std	Z+6, r27	; 0x06
    4aca:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
    4ace:	2d b7       	in	r18, 0x3d	; 61
    4ad0:	3e b7       	in	r19, 0x3e	; 62
    4ad2:	2a 5f       	subi	r18, 0xFA	; 250
    4ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ad6:	0f b6       	in	r0, 0x3f	; 63
    4ad8:	f8 94       	cli
    4ada:	3e bf       	out	0x3e, r19	; 62
    4adc:	0f be       	out	0x3f, r0	; 63
    4ade:	2d bf       	out	0x3d, r18	; 61
				if (disk_ioctl((BYTE)p1, MMC_GET_TYPE, &b1) == RES_OK)
    4ae0:	8e 85       	ldd	r24, Y+14	; 0x0e
    4ae2:	6a e0       	ldi	r22, 0x0A	; 10
    4ae4:	ae 01       	movw	r20, r28
    4ae6:	4f 5f       	subi	r20, 0xFF	; 255
    4ae8:	5f 4f       	sbci	r21, 0xFF	; 255
    4aea:	0e 94 57 54 	call	0xa8ae	; 0xa8ae <disk_ioctl>
    4aee:	00 97       	sbiw	r24, 0x00	; 0
    4af0:	b1 f4       	brne	.+44     	; 0x4b1e <main+0x3a0>
					{ xprintf(PSTR("Card type: %u\n"), b1); }
    4af2:	00 d0       	rcall	.+0      	; 0x4af4 <main+0x376>
    4af4:	00 d0       	rcall	.+0      	; 0x4af6 <main+0x378>
    4af6:	ed b7       	in	r30, 0x3d	; 61
    4af8:	fe b7       	in	r31, 0x3e	; 62
    4afa:	31 96       	adiw	r30, 0x01	; 1
    4afc:	83 e7       	ldi	r24, 0x73	; 115
    4afe:	93 e0       	ldi	r25, 0x03	; 3
    4b00:	ad b7       	in	r26, 0x3d	; 61
    4b02:	be b7       	in	r27, 0x3e	; 62
    4b04:	12 96       	adiw	r26, 0x02	; 2
    4b06:	9c 93       	st	X, r25
    4b08:	8e 93       	st	-X, r24
    4b0a:	11 97       	sbiw	r26, 0x01	; 1
    4b0c:	89 81       	ldd	r24, Y+1	; 0x01
    4b0e:	82 83       	std	Z+2, r24	; 0x02
    4b10:	13 82       	std	Z+3, r1	; 0x03
    4b12:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
    4b16:	0f 90       	pop	r0
    4b18:	0f 90       	pop	r0
    4b1a:	0f 90       	pop	r0
    4b1c:	0f 90       	pop	r0
				if (disk_ioctl((BYTE)p1, MMC_GET_CSD, Buff) == RES_OK)
    4b1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b20:	6b e0       	ldi	r22, 0x0B	; 11
    4b22:	4c e1       	ldi	r20, 0x1C	; 28
    4b24:	57 e0       	ldi	r21, 0x07	; 7
    4b26:	0e 94 57 54 	call	0xa8ae	; 0xa8ae <disk_ioctl>
    4b2a:	00 97       	sbiw	r24, 0x00	; 0
    4b2c:	69 f4       	brne	.+26     	; 0x4b48 <main+0x3ca>
					{ xputs(PSTR("CSD:\n")); put_dump(Buff, 0, 16); }
    4b2e:	8d e6       	ldi	r24, 0x6D	; 109
    4b30:	93 e0       	ldi	r25, 0x03	; 3
    4b32:	0e 94 71 56 	call	0xace2	; 0xace2 <xputs>
    4b36:	8c e1       	ldi	r24, 0x1C	; 28
    4b38:	97 e0       	ldi	r25, 0x07	; 7
    4b3a:	40 e0       	ldi	r20, 0x00	; 0
    4b3c:	50 e0       	ldi	r21, 0x00	; 0
    4b3e:	60 e0       	ldi	r22, 0x00	; 0
    4b40:	70 e0       	ldi	r23, 0x00	; 0
    4b42:	20 e1       	ldi	r18, 0x10	; 16
    4b44:	0e 94 20 22 	call	0x4440	; 0x4440 <put_dump>
				if (disk_ioctl((BYTE)p1, MMC_GET_CID, Buff) == RES_OK)
    4b48:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b4a:	6c e0       	ldi	r22, 0x0C	; 12
    4b4c:	4c e1       	ldi	r20, 0x1C	; 28
    4b4e:	57 e0       	ldi	r21, 0x07	; 7
    4b50:	0e 94 57 54 	call	0xa8ae	; 0xa8ae <disk_ioctl>
    4b54:	00 97       	sbiw	r24, 0x00	; 0
    4b56:	69 f4       	brne	.+26     	; 0x4b72 <main+0x3f4>
					{ xputs(PSTR("CID:\n")); put_dump(Buff, 0, 16); }
    4b58:	87 e6       	ldi	r24, 0x67	; 103
    4b5a:	93 e0       	ldi	r25, 0x03	; 3
    4b5c:	0e 94 71 56 	call	0xace2	; 0xace2 <xputs>
    4b60:	8c e1       	ldi	r24, 0x1C	; 28
    4b62:	97 e0       	ldi	r25, 0x07	; 7
    4b64:	40 e0       	ldi	r20, 0x00	; 0
    4b66:	50 e0       	ldi	r21, 0x00	; 0
    4b68:	60 e0       	ldi	r22, 0x00	; 0
    4b6a:	70 e0       	ldi	r23, 0x00	; 0
    4b6c:	20 e1       	ldi	r18, 0x10	; 16
    4b6e:	0e 94 20 22 	call	0x4440	; 0x4440 <put_dump>
				if (disk_ioctl((BYTE)p1, MMC_GET_OCR, Buff) == RES_OK)
    4b72:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b74:	6d e0       	ldi	r22, 0x0D	; 13
    4b76:	4c e1       	ldi	r20, 0x1C	; 28
    4b78:	57 e0       	ldi	r21, 0x07	; 7
    4b7a:	0e 94 57 54 	call	0xa8ae	; 0xa8ae <disk_ioctl>
    4b7e:	00 97       	sbiw	r24, 0x00	; 0
    4b80:	69 f4       	brne	.+26     	; 0x4b9c <main+0x41e>
					{ xputs(PSTR("OCR:\n")); put_dump(Buff, 0, 4); }
    4b82:	81 e6       	ldi	r24, 0x61	; 97
    4b84:	93 e0       	ldi	r25, 0x03	; 3
    4b86:	0e 94 71 56 	call	0xace2	; 0xace2 <xputs>
    4b8a:	8c e1       	ldi	r24, 0x1C	; 28
    4b8c:	97 e0       	ldi	r25, 0x07	; 7
    4b8e:	40 e0       	ldi	r20, 0x00	; 0
    4b90:	50 e0       	ldi	r21, 0x00	; 0
    4b92:	60 e0       	ldi	r22, 0x00	; 0
    4b94:	70 e0       	ldi	r23, 0x00	; 0
    4b96:	24 e0       	ldi	r18, 0x04	; 4
    4b98:	0e 94 20 22 	call	0x4440	; 0x4440 <put_dump>
				if (disk_ioctl((BYTE)p1, MMC_GET_SDSTAT, Buff) == RES_OK) {
    4b9c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b9e:	6e e0       	ldi	r22, 0x0E	; 14
    4ba0:	4c e1       	ldi	r20, 0x1C	; 28
    4ba2:	57 e0       	ldi	r21, 0x07	; 7
    4ba4:	0e 94 57 54 	call	0xa8ae	; 0xa8ae <disk_ioctl>
    4ba8:	00 97       	sbiw	r24, 0x00	; 0
    4baa:	c9 f4       	brne	.+50     	; 0x4bde <main+0x460>
					xputs(PSTR("SD Status:\n"));
    4bac:	85 e5       	ldi	r24, 0x55	; 85
    4bae:	93 e0       	ldi	r25, 0x03	; 3
    4bb0:	0e 94 71 56 	call	0xace2	; 0xace2 <xputs>
					for (s1 = 0; s1 < 64; s1 += 16) put_dump(Buff+s1, s1, 16);
    4bb4:	1f 82       	std	Y+7, r1	; 0x07
    4bb6:	1e 82       	std	Y+6, r1	; 0x06
    4bb8:	0d c0       	rjmp	.+26     	; 0x4bd4 <main+0x456>
    4bba:	ac 01       	movw	r20, r24
    4bbc:	60 e0       	ldi	r22, 0x00	; 0
    4bbe:	70 e0       	ldi	r23, 0x00	; 0
    4bc0:	84 5e       	subi	r24, 0xE4	; 228
    4bc2:	98 4f       	sbci	r25, 0xF8	; 248
    4bc4:	20 e1       	ldi	r18, 0x10	; 16
    4bc6:	0e 94 20 22 	call	0x4440	; 0x4440 <put_dump>
    4bca:	8e 81       	ldd	r24, Y+6	; 0x06
    4bcc:	9f 81       	ldd	r25, Y+7	; 0x07
    4bce:	40 96       	adiw	r24, 0x10	; 16
    4bd0:	9f 83       	std	Y+7, r25	; 0x07
    4bd2:	8e 83       	std	Y+6, r24	; 0x06
    4bd4:	8e 81       	ldd	r24, Y+6	; 0x06
    4bd6:	9f 81       	ldd	r25, Y+7	; 0x07
    4bd8:	80 34       	cpi	r24, 0x40	; 64
    4bda:	91 05       	cpc	r25, r1
    4bdc:	70 f3       	brcs	.-36     	; 0x4bba <main+0x43c>
				}
				if (disk_ioctl((BYTE)p1, ATA_GET_MODEL, Line) == RES_OK)
    4bde:	8e 85       	ldd	r24, Y+14	; 0x0e
    4be0:	65 e1       	ldi	r22, 0x15	; 21
    4be2:	41 ea       	ldi	r20, 0xA1	; 161
    4be4:	5b e0       	ldi	r21, 0x0B	; 11
    4be6:	0e 94 57 54 	call	0xa8ae	; 0xa8ae <disk_ioctl>
    4bea:	00 97       	sbiw	r24, 0x00	; 0
    4bec:	91 f4       	brne	.+36     	; 0x4c12 <main+0x494>
					{ Line[40] = '\0'; xprintf(PSTR("Model: %s\n"), Line); }
    4bee:	10 92 c9 0b 	sts	0x0BC9, r1
    4bf2:	00 d0       	rcall	.+0      	; 0x4bf4 <main+0x476>
    4bf4:	00 d0       	rcall	.+0      	; 0x4bf6 <main+0x478>
    4bf6:	8a e4       	ldi	r24, 0x4A	; 74
    4bf8:	93 e0       	ldi	r25, 0x03	; 3
    4bfa:	ed b7       	in	r30, 0x3d	; 61
    4bfc:	fe b7       	in	r31, 0x3e	; 62
    4bfe:	92 83       	std	Z+2, r25	; 0x02
    4c00:	81 83       	std	Z+1, r24	; 0x01
    4c02:	74 82       	std	Z+4, r7	; 0x04
    4c04:	63 82       	std	Z+3, r6	; 0x03
    4c06:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
    4c0a:	0f 90       	pop	r0
    4c0c:	0f 90       	pop	r0
    4c0e:	0f 90       	pop	r0
    4c10:	0f 90       	pop	r0
				if (disk_ioctl((BYTE)p1, ATA_GET_SN, Line) == RES_OK)
    4c12:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c14:	66 e1       	ldi	r22, 0x16	; 22
    4c16:	41 ea       	ldi	r20, 0xA1	; 161
    4c18:	5b e0       	ldi	r21, 0x0B	; 11
    4c1a:	0e 94 57 54 	call	0xa8ae	; 0xa8ae <disk_ioctl>
    4c1e:	00 97       	sbiw	r24, 0x00	; 0
    4c20:	09 f0       	breq	.+2      	; 0x4c24 <main+0x4a6>
    4c22:	1e ce       	rjmp	.-964    	; 0x4860 <main+0xe2>
					{ Line[20] = '\0'; xprintf(PSTR("S/N: %s\n"), Line); }
    4c24:	10 92 b5 0b 	sts	0x0BB5, r1
    4c28:	00 d0       	rcall	.+0      	; 0x4c2a <main+0x4ac>
    4c2a:	00 d0       	rcall	.+0      	; 0x4c2c <main+0x4ae>
    4c2c:	81 e4       	ldi	r24, 0x41	; 65
    4c2e:	93 e0       	ldi	r25, 0x03	; 3
    4c30:	ad b7       	in	r26, 0x3d	; 61
    4c32:	be b7       	in	r27, 0x3e	; 62
    4c34:	12 96       	adiw	r26, 0x02	; 2
    4c36:	9c 93       	st	X, r25
    4c38:	8e 93       	st	-X, r24
    4c3a:	11 97       	sbiw	r26, 0x01	; 1
    4c3c:	14 96       	adiw	r26, 0x04	; 4
    4c3e:	7c 92       	st	X, r7
    4c40:	6e 92       	st	-X, r6
    4c42:	13 97       	sbiw	r26, 0x03	; 3
    4c44:	d3 ce       	rjmp	.-602    	; 0x49ec <main+0x26e>
				break;
			}
			break;

		case 'b' :
			switch (*ptr++) {
    4c46:	11 96       	adiw	r26, 0x01	; 1
    4c48:	8c 91       	ld	r24, X
    4c4a:	11 97       	sbiw	r26, 0x01	; 1
    4c4c:	31 96       	adiw	r30, 0x01	; 1
    4c4e:	fb 83       	std	Y+3, r31	; 0x03
    4c50:	ea 83       	std	Y+2, r30	; 0x02
    4c52:	86 36       	cpi	r24, 0x66	; 102
    4c54:	09 f4       	brne	.+2      	; 0x4c58 <main+0x4da>
    4c56:	4b c1       	rjmp	.+662    	; 0x4eee <main+0x770>
    4c58:	87 36       	cpi	r24, 0x67	; 103
    4c5a:	34 f4       	brge	.+12     	; 0x4c68 <main+0x4ea>
    4c5c:	84 36       	cpi	r24, 0x64	; 100
    4c5e:	59 f0       	breq	.+22     	; 0x4c76 <main+0x4f8>
    4c60:	85 36       	cpi	r24, 0x65	; 101
    4c62:	09 f0       	breq	.+2      	; 0x4c66 <main+0x4e8>
    4c64:	fd cd       	rjmp	.-1030   	; 0x4860 <main+0xe2>
    4c66:	3f c0       	rjmp	.+126    	; 0x4ce6 <main+0x568>
    4c68:	82 37       	cpi	r24, 0x72	; 114
    4c6a:	09 f4       	brne	.+2      	; 0x4c6e <main+0x4f0>
    4c6c:	c8 c0       	rjmp	.+400    	; 0x4dfe <main+0x680>
    4c6e:	87 37       	cpi	r24, 0x77	; 119
    4c70:	09 f0       	breq	.+2      	; 0x4c74 <main+0x4f6>
    4c72:	f6 cd       	rjmp	.-1044   	; 0x4860 <main+0xe2>
    4c74:	02 c1       	rjmp	.+516    	; 0x4e7a <main+0x6fc>
			case 'd' :	/* bd <addr> - Dump R/W buffer */
				if (!xatoi(&ptr, &p1)) break;
    4c76:	ce 01       	movw	r24, r28
    4c78:	02 96       	adiw	r24, 0x02	; 2
    4c7a:	be 01       	movw	r22, r28
    4c7c:	62 5f       	subi	r22, 0xF2	; 242
    4c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c80:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    4c84:	88 23       	and	r24, r24
    4c86:	09 f4       	brne	.+2      	; 0x4c8a <main+0x50c>
    4c88:	eb cd       	rjmp	.-1066   	; 0x4860 <main+0xe2>
				for (bp=&Buff[p1], ofs = p1, cnt = 32; cnt; cnt--, ptr+=16, ofs+=16)
    4c8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c8e:	a8 89       	ldd	r26, Y+16	; 0x10
    4c90:	b9 89       	ldd	r27, Y+17	; 0x11
    4c92:	2c e1       	ldi	r18, 0x1C	; 28
    4c94:	c2 2e       	mov	r12, r18
    4c96:	27 e0       	ldi	r18, 0x07	; 7
    4c98:	d2 2e       	mov	r13, r18
    4c9a:	c8 0e       	add	r12, r24
    4c9c:	d9 1e       	adc	r13, r25
    4c9e:	7c 01       	movw	r14, r24
    4ca0:	8d 01       	movw	r16, r26
    4ca2:	80 e2       	ldi	r24, 0x20	; 32
    4ca4:	90 e0       	ldi	r25, 0x00	; 0
    4ca6:	9b 87       	std	Y+11, r25	; 0x0b
    4ca8:	8a 87       	std	Y+10, r24	; 0x0a
    4caa:	18 c0       	rjmp	.+48     	; 0x4cdc <main+0x55e>
					put_dump(bp, ofs, 16);
    4cac:	c6 01       	movw	r24, r12
    4cae:	b8 01       	movw	r22, r16
    4cb0:	a7 01       	movw	r20, r14
    4cb2:	20 e1       	ldi	r18, 0x10	; 16
    4cb4:	0e 94 20 22 	call	0x4440	; 0x4440 <put_dump>

		case 'b' :
			switch (*ptr++) {
			case 'd' :	/* bd <addr> - Dump R/W buffer */
				if (!xatoi(&ptr, &p1)) break;
				for (bp=&Buff[p1], ofs = p1, cnt = 32; cnt; cnt--, ptr+=16, ofs+=16)
    4cb8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cba:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cbc:	01 97       	sbiw	r24, 0x01	; 1
    4cbe:	9b 87       	std	Y+11, r25	; 0x0b
    4cc0:	8a 87       	std	Y+10, r24	; 0x0a
    4cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    4cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    4cc6:	40 96       	adiw	r24, 0x10	; 16
    4cc8:	9b 83       	std	Y+3, r25	; 0x03
    4cca:	8a 83       	std	Y+2, r24	; 0x02
    4ccc:	20 e1       	ldi	r18, 0x10	; 16
    4cce:	30 e0       	ldi	r19, 0x00	; 0
    4cd0:	40 e0       	ldi	r20, 0x00	; 0
    4cd2:	50 e0       	ldi	r21, 0x00	; 0
    4cd4:	e2 0e       	add	r14, r18
    4cd6:	f3 1e       	adc	r15, r19
    4cd8:	04 1f       	adc	r16, r20
    4cda:	15 1f       	adc	r17, r21
    4cdc:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cde:	9b 85       	ldd	r25, Y+11	; 0x0b
    4ce0:	00 97       	sbiw	r24, 0x00	; 0
    4ce2:	21 f7       	brne	.-56     	; 0x4cac <main+0x52e>
    4ce4:	bd cd       	rjmp	.-1158   	; 0x4860 <main+0xe2>
					put_dump(bp, ofs, 16);
				break;

			case 'e' :	/* be <addr> [<data>] ... - Edit R/W buffer */
				if (!xatoi(&ptr, &p1)) break;
    4ce6:	8e 01       	movw	r16, r28
    4ce8:	0e 5f       	subi	r16, 0xFE	; 254
    4cea:	1f 4f       	sbci	r17, 0xFF	; 255
    4cec:	c8 01       	movw	r24, r16
    4cee:	be 01       	movw	r22, r28
    4cf0:	62 5f       	subi	r22, 0xF2	; 242
    4cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    4cf4:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    4cf8:	88 23       	and	r24, r24
    4cfa:	09 f4       	brne	.+2      	; 0x4cfe <main+0x580>
    4cfc:	b1 cd       	rjmp	.-1182   	; 0x4860 <main+0xe2>
				if (xatoi(&ptr, &p2)) {
    4cfe:	82 e1       	ldi	r24, 0x12	; 18
    4d00:	e8 2e       	mov	r14, r24
    4d02:	f1 2c       	mov	r15, r1
    4d04:	ec 0e       	add	r14, r28
    4d06:	fd 1e       	adc	r15, r29
    4d08:	c8 01       	movw	r24, r16
    4d0a:	b7 01       	movw	r22, r14
    4d0c:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    4d10:	88 23       	and	r24, r24
    4d12:	e9 f0       	breq	.+58     	; 0x4d4e <main+0x5d0>
					do {
						Buff[p1++] = (BYTE)p2;
					} while (xatoi(&ptr, &p2));
    4d14:	c0 2e       	mov	r12, r16
    4d16:	a1 2e       	mov	r10, r17
    4d18:	0e 2d       	mov	r16, r14
    4d1a:	ef 2c       	mov	r14, r15

			case 'e' :	/* be <addr> [<data>] ... - Edit R/W buffer */
				if (!xatoi(&ptr, &p1)) break;
				if (xatoi(&ptr, &p2)) {
					do {
						Buff[p1++] = (BYTE)p2;
    4d1c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d1e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4d20:	a8 89       	ldd	r26, Y+16	; 0x10
    4d22:	b9 89       	ldd	r27, Y+17	; 0x11
    4d24:	fc 01       	movw	r30, r24
    4d26:	e4 5e       	subi	r30, 0xE4	; 228
    4d28:	f8 4f       	sbci	r31, 0xF8	; 248
    4d2a:	2a 89       	ldd	r18, Y+18	; 0x12
    4d2c:	20 83       	st	Z, r18
    4d2e:	01 96       	adiw	r24, 0x01	; 1
    4d30:	a1 1d       	adc	r26, r1
    4d32:	b1 1d       	adc	r27, r1
    4d34:	8e 87       	std	Y+14, r24	; 0x0e
    4d36:	9f 87       	std	Y+15, r25	; 0x0f
    4d38:	a8 8b       	std	Y+16, r26	; 0x10
    4d3a:	b9 8b       	std	Y+17, r27	; 0x11
					} while (xatoi(&ptr, &p2));
    4d3c:	8c 2d       	mov	r24, r12
    4d3e:	9a 2d       	mov	r25, r10
    4d40:	60 2f       	mov	r22, r16
    4d42:	7e 2d       	mov	r23, r14
    4d44:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    4d48:	88 23       	and	r24, r24
    4d4a:	41 f7       	brne	.-48     	; 0x4d1c <main+0x59e>
    4d4c:	89 cd       	rjmp	.-1262   	; 0x4860 <main+0xe2>
					xprintf(PSTR("%04X %02X-"), (WORD)p1, Buff[p1]);
					get_line(Line, sizeof(Line));
					ptr = Line;
					if (*ptr == '.') break;
					if (*ptr < ' ') { p1++; continue; }
					if (xatoi(&ptr, &p2))
    4d4e:	c0 2e       	mov	r12, r16
    4d50:	a1 2e       	mov	r10, r17
    4d52:	0e 2d       	mov	r16, r14
    4d54:	ef 2c       	mov	r14, r15
						Buff[p1++] = (BYTE)p2;
					} while (xatoi(&ptr, &p2));
					break;
				}
				for (;;) {
					xprintf(PSTR("%04X %02X-"), (WORD)p1, Buff[p1]);
    4d56:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d58:	9f 85       	ldd	r25, Y+15	; 0x0f
    4d5a:	a8 89       	ldd	r26, Y+16	; 0x10
    4d5c:	b9 89       	ldd	r27, Y+17	; 0x11
    4d5e:	00 d0       	rcall	.+0      	; 0x4d60 <main+0x5e2>
    4d60:	00 d0       	rcall	.+0      	; 0x4d62 <main+0x5e4>
    4d62:	00 d0       	rcall	.+0      	; 0x4d64 <main+0x5e6>
    4d64:	4d b7       	in	r20, 0x3d	; 61
    4d66:	5e b7       	in	r21, 0x3e	; 62
    4d68:	4f 5f       	subi	r20, 0xFF	; 255
    4d6a:	5f 4f       	sbci	r21, 0xFF	; 255
    4d6c:	26 e3       	ldi	r18, 0x36	; 54
    4d6e:	33 e0       	ldi	r19, 0x03	; 3
    4d70:	ed b7       	in	r30, 0x3d	; 61
    4d72:	fe b7       	in	r31, 0x3e	; 62
    4d74:	32 83       	std	Z+2, r19	; 0x02
    4d76:	21 83       	std	Z+1, r18	; 0x01
    4d78:	fa 01       	movw	r30, r20
    4d7a:	93 83       	std	Z+3, r25	; 0x03
    4d7c:	82 83       	std	Z+2, r24	; 0x02
    4d7e:	84 5e       	subi	r24, 0xE4	; 228
    4d80:	98 4f       	sbci	r25, 0xF8	; 248
    4d82:	dc 01       	movw	r26, r24
    4d84:	8c 91       	ld	r24, X
    4d86:	84 83       	std	Z+4, r24	; 0x04
    4d88:	15 82       	std	Z+5, r1	; 0x05
    4d8a:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
					get_line(Line, sizeof(Line));
    4d8e:	ed b7       	in	r30, 0x3d	; 61
    4d90:	fe b7       	in	r31, 0x3e	; 62
    4d92:	36 96       	adiw	r30, 0x06	; 6
    4d94:	0f b6       	in	r0, 0x3f	; 63
    4d96:	f8 94       	cli
    4d98:	fe bf       	out	0x3e, r31	; 62
    4d9a:	0f be       	out	0x3f, r0	; 63
    4d9c:	ed bf       	out	0x3d, r30	; 61
    4d9e:	81 ea       	ldi	r24, 0xA1	; 161
    4da0:	9b e0       	ldi	r25, 0x0B	; 11
    4da2:	0e 94 09 23 	call	0x4612	; 0x4612 <get_line.clone.0>
					ptr = Line;
    4da6:	7b 82       	std	Y+3, r7	; 0x03
    4da8:	6a 82       	std	Y+2, r6	; 0x02
					if (*ptr == '.') break;
    4daa:	80 91 a1 0b 	lds	r24, 0x0BA1
    4dae:	8e 32       	cpi	r24, 0x2E	; 46
    4db0:	09 f4       	brne	.+2      	; 0x4db4 <main+0x636>
    4db2:	56 cd       	rjmp	.-1364   	; 0x4860 <main+0xe2>
					if (*ptr < ' ') { p1++; continue; }
    4db4:	80 32       	cpi	r24, 0x20	; 32
    4db6:	2c f4       	brge	.+10     	; 0x4dc2 <main+0x644>
    4db8:	8e 85       	ldd	r24, Y+14	; 0x0e
    4dba:	9f 85       	ldd	r25, Y+15	; 0x0f
    4dbc:	a8 89       	ldd	r26, Y+16	; 0x10
    4dbe:	b9 89       	ldd	r27, Y+17	; 0x11
    4dc0:	11 c0       	rjmp	.+34     	; 0x4de4 <main+0x666>
					if (xatoi(&ptr, &p2))
    4dc2:	8c 2d       	mov	r24, r12
    4dc4:	9a 2d       	mov	r25, r10
    4dc6:	60 2f       	mov	r22, r16
    4dc8:	7e 2d       	mov	r23, r14
    4dca:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    4dce:	88 23       	and	r24, r24
    4dd0:	89 f0       	breq	.+34     	; 0x4df4 <main+0x676>
						Buff[p1++] = (BYTE)p2;
    4dd2:	8e 85       	ldd	r24, Y+14	; 0x0e
    4dd4:	9f 85       	ldd	r25, Y+15	; 0x0f
    4dd6:	a8 89       	ldd	r26, Y+16	; 0x10
    4dd8:	b9 89       	ldd	r27, Y+17	; 0x11
    4dda:	fc 01       	movw	r30, r24
    4ddc:	e4 5e       	subi	r30, 0xE4	; 228
    4dde:	f8 4f       	sbci	r31, 0xF8	; 248
    4de0:	2a 89       	ldd	r18, Y+18	; 0x12
    4de2:	20 83       	st	Z, r18
    4de4:	01 96       	adiw	r24, 0x01	; 1
    4de6:	a1 1d       	adc	r26, r1
    4de8:	b1 1d       	adc	r27, r1
    4dea:	8e 87       	std	Y+14, r24	; 0x0e
    4dec:	9f 87       	std	Y+15, r25	; 0x0f
    4dee:	a8 8b       	std	Y+16, r26	; 0x10
    4df0:	b9 8b       	std	Y+17, r27	; 0x11
    4df2:	b1 cf       	rjmp	.-158    	; 0x4d56 <main+0x5d8>
					else
						xputs(PSTR("???\n"));
    4df4:	81 e3       	ldi	r24, 0x31	; 49
    4df6:	93 e0       	ldi	r25, 0x03	; 3
    4df8:	0e 94 71 56 	call	0xace2	; 0xace2 <xputs>
    4dfc:	ac cf       	rjmp	.-168    	; 0x4d56 <main+0x5d8>
				}
				break;

			case 'r' :	/* br <phy_drv#> <sector> [<n>] - Read disk into R/W buffer */
				if (!xatoi(&ptr, &p1)) break;
    4dfe:	8e 01       	movw	r16, r28
    4e00:	0e 5f       	subi	r16, 0xFE	; 254
    4e02:	1f 4f       	sbci	r17, 0xFF	; 255
    4e04:	c8 01       	movw	r24, r16
    4e06:	be 01       	movw	r22, r28
    4e08:	62 5f       	subi	r22, 0xF2	; 242
    4e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e0c:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    4e10:	88 23       	and	r24, r24
    4e12:	09 f4       	brne	.+2      	; 0x4e16 <main+0x698>
    4e14:	25 cd       	rjmp	.-1462   	; 0x4860 <main+0xe2>
				if (!xatoi(&ptr, &p2)) break;
    4e16:	c8 01       	movw	r24, r16
    4e18:	be 01       	movw	r22, r28
    4e1a:	6e 5e       	subi	r22, 0xEE	; 238
    4e1c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e1e:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    4e22:	88 23       	and	r24, r24
    4e24:	09 f4       	brne	.+2      	; 0x4e28 <main+0x6aa>
    4e26:	1c cd       	rjmp	.-1480   	; 0x4860 <main+0xe2>
				if (!xatoi(&ptr, &p3)) p3 = 1;
    4e28:	c8 01       	movw	r24, r16
    4e2a:	be 01       	movw	r22, r28
    4e2c:	6a 5e       	subi	r22, 0xEA	; 234
    4e2e:	7f 4f       	sbci	r23, 0xFF	; 255
    4e30:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    4e34:	88 23       	and	r24, r24
    4e36:	41 f4       	brne	.+16     	; 0x4e48 <main+0x6ca>
    4e38:	81 e0       	ldi	r24, 0x01	; 1
    4e3a:	90 e0       	ldi	r25, 0x00	; 0
    4e3c:	a0 e0       	ldi	r26, 0x00	; 0
    4e3e:	b0 e0       	ldi	r27, 0x00	; 0
    4e40:	8e 8b       	std	Y+22, r24	; 0x16
    4e42:	9f 8b       	std	Y+23, r25	; 0x17
    4e44:	a8 8f       	std	Y+24, r26	; 0x18
    4e46:	b9 8f       	std	Y+25, r27	; 0x19
				xprintf(PSTR("rc=%u\n"), disk_read((BYTE)p1, Buff, p2, p3));
    4e48:	2a 89       	ldd	r18, Y+18	; 0x12
    4e4a:	3b 89       	ldd	r19, Y+19	; 0x13
    4e4c:	4c 89       	ldd	r20, Y+20	; 0x14
    4e4e:	5d 89       	ldd	r21, Y+21	; 0x15
    4e50:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e52:	6c e1       	ldi	r22, 0x1C	; 28
    4e54:	77 e0       	ldi	r23, 0x07	; 7
    4e56:	0e 89       	ldd	r16, Y+22	; 0x16
    4e58:	0e 94 8a 53 	call	0xa714	; 0xa714 <disk_read>
    4e5c:	00 d0       	rcall	.+0      	; 0x4e5e <main+0x6e0>
    4e5e:	00 d0       	rcall	.+0      	; 0x4e60 <main+0x6e2>
    4e60:	2a e2       	ldi	r18, 0x2A	; 42
    4e62:	33 e0       	ldi	r19, 0x03	; 3
    4e64:	ad b7       	in	r26, 0x3d	; 61
    4e66:	be b7       	in	r27, 0x3e	; 62
    4e68:	12 96       	adiw	r26, 0x02	; 2
    4e6a:	3c 93       	st	X, r19
    4e6c:	2e 93       	st	-X, r18
    4e6e:	11 97       	sbiw	r26, 0x01	; 1
    4e70:	14 96       	adiw	r26, 0x04	; 4
    4e72:	9c 93       	st	X, r25
    4e74:	8e 93       	st	-X, r24
    4e76:	13 97       	sbiw	r26, 0x03	; 3
    4e78:	b9 cd       	rjmp	.-1166   	; 0x49ec <main+0x26e>
				break;

			case 'w' :	/* bw <phy_drv#> <sector> [<n>] - Write R/W buffer into disk */
				if (!xatoi(&ptr, &p1)) break;
    4e7a:	8e 01       	movw	r16, r28
    4e7c:	0e 5f       	subi	r16, 0xFE	; 254
    4e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e80:	c8 01       	movw	r24, r16
    4e82:	be 01       	movw	r22, r28
    4e84:	62 5f       	subi	r22, 0xF2	; 242
    4e86:	7f 4f       	sbci	r23, 0xFF	; 255
    4e88:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    4e8c:	88 23       	and	r24, r24
    4e8e:	09 f4       	brne	.+2      	; 0x4e92 <main+0x714>
    4e90:	e7 cc       	rjmp	.-1586   	; 0x4860 <main+0xe2>
				if (!xatoi(&ptr, &p2)) break;
    4e92:	c8 01       	movw	r24, r16
    4e94:	be 01       	movw	r22, r28
    4e96:	6e 5e       	subi	r22, 0xEE	; 238
    4e98:	7f 4f       	sbci	r23, 0xFF	; 255
    4e9a:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    4e9e:	88 23       	and	r24, r24
    4ea0:	09 f4       	brne	.+2      	; 0x4ea4 <main+0x726>
    4ea2:	de cc       	rjmp	.-1604   	; 0x4860 <main+0xe2>
				if (!xatoi(&ptr, &p3)) p3 = 1;
    4ea4:	c8 01       	movw	r24, r16
    4ea6:	be 01       	movw	r22, r28
    4ea8:	6a 5e       	subi	r22, 0xEA	; 234
    4eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    4eac:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    4eb0:	88 23       	and	r24, r24
    4eb2:	41 f4       	brne	.+16     	; 0x4ec4 <main+0x746>
    4eb4:	81 e0       	ldi	r24, 0x01	; 1
    4eb6:	90 e0       	ldi	r25, 0x00	; 0
    4eb8:	a0 e0       	ldi	r26, 0x00	; 0
    4eba:	b0 e0       	ldi	r27, 0x00	; 0
    4ebc:	8e 8b       	std	Y+22, r24	; 0x16
    4ebe:	9f 8b       	std	Y+23, r25	; 0x17
    4ec0:	a8 8f       	std	Y+24, r26	; 0x18
    4ec2:	b9 8f       	std	Y+25, r27	; 0x19
				xprintf(PSTR("rc=%u\n"), disk_write((BYTE)p1, Buff, p2, p3));
    4ec4:	2a 89       	ldd	r18, Y+18	; 0x12
    4ec6:	3b 89       	ldd	r19, Y+19	; 0x13
    4ec8:	4c 89       	ldd	r20, Y+20	; 0x14
    4eca:	5d 89       	ldd	r21, Y+21	; 0x15
    4ecc:	8e 85       	ldd	r24, Y+14	; 0x0e
    4ece:	6c e1       	ldi	r22, 0x1C	; 28
    4ed0:	77 e0       	ldi	r23, 0x07	; 7
    4ed2:	0e 89       	ldd	r16, Y+22	; 0x16
    4ed4:	0e 94 e1 53 	call	0xa7c2	; 0xa7c2 <disk_write>
    4ed8:	00 d0       	rcall	.+0      	; 0x4eda <main+0x75c>
    4eda:	00 d0       	rcall	.+0      	; 0x4edc <main+0x75e>
    4edc:	23 e2       	ldi	r18, 0x23	; 35
    4ede:	33 e0       	ldi	r19, 0x03	; 3
    4ee0:	ed b7       	in	r30, 0x3d	; 61
    4ee2:	fe b7       	in	r31, 0x3e	; 62
    4ee4:	32 83       	std	Z+2, r19	; 0x02
    4ee6:	21 83       	std	Z+1, r18	; 0x01
    4ee8:	94 83       	std	Z+4, r25	; 0x04
    4eea:	83 83       	std	Z+3, r24	; 0x03
    4eec:	7f cd       	rjmp	.-1282   	; 0x49ec <main+0x26e>
				break;

			case 'f' :	/* bf <n> - Fill working buffer */
				if (!xatoi(&ptr, &p1)) break;
    4eee:	ce 01       	movw	r24, r28
    4ef0:	02 96       	adiw	r24, 0x02	; 2
    4ef2:	be 01       	movw	r22, r28
    4ef4:	62 5f       	subi	r22, 0xF2	; 242
    4ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ef8:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    4efc:	88 23       	and	r24, r24
    4efe:	09 f4       	brne	.+2      	; 0x4f02 <main+0x784>
    4f00:	af cc       	rjmp	.-1698   	; 0x4860 <main+0xe2>
				memset(Buff, (BYTE)p1, sizeof(Buff));
    4f02:	6e 85       	ldd	r22, Y+14	; 0x0e
    4f04:	8c e1       	ldi	r24, 0x1C	; 28
    4f06:	97 e0       	ldi	r25, 0x07	; 7
    4f08:	70 e0       	ldi	r23, 0x00	; 0
    4f0a:	40 e0       	ldi	r20, 0x00	; 0
    4f0c:	54 e0       	ldi	r21, 0x04	; 4
    4f0e:	0e 94 0f 5d 	call	0xba1e	; 0xba1e <memset>
				break;
    4f12:	a6 cc       	rjmp	.-1716   	; 0x4860 <main+0xe2>

			}
			break;

		case 'f' :
			switch (*ptr++) {
    4f14:	11 96       	adiw	r26, 0x01	; 1
    4f16:	8c 91       	ld	r24, X
    4f18:	31 96       	adiw	r30, 0x01	; 1
    4f1a:	fb 83       	std	Y+3, r31	; 0x03
    4f1c:	ea 83       	std	Y+2, r30	; 0x02
    4f1e:	99 27       	eor	r25, r25
    4f20:	87 fd       	sbrc	r24, 7
    4f22:	90 95       	com	r25
    4f24:	a9 2f       	mov	r26, r25
    4f26:	b9 2f       	mov	r27, r25
    4f28:	81 56       	subi	r24, 0x61	; 97
    4f2a:	90 40       	sbci	r25, 0x00	; 0
    4f2c:	88 31       	cpi	r24, 0x18	; 24
    4f2e:	91 05       	cpc	r25, r1
    4f30:	08 f0       	brcs	.+2      	; 0x4f34 <main+0x7b6>
    4f32:	96 cc       	rjmp	.-1748   	; 0x4860 <main+0xe2>
    4f34:	8c 5c       	subi	r24, 0xCC	; 204
    4f36:	9f 4f       	sbci	r25, 0xFF	; 255
    4f38:	fc 01       	movw	r30, r24
    4f3a:	0c 94 09 5d 	jmp	0xba12	; 0xba12 <__tablejump2__>

			case 'i' :	/* fi <log drv#> - Initialize logical drive */
				if (!xatoi(&ptr, &p1)) break;
    4f3e:	ce 01       	movw	r24, r28
    4f40:	02 96       	adiw	r24, 0x02	; 2
    4f42:	be 01       	movw	r22, r28
    4f44:	62 5f       	subi	r22, 0xF2	; 242
    4f46:	7f 4f       	sbci	r23, 0xFF	; 255
    4f48:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    4f4c:	88 23       	and	r24, r24
    4f4e:	09 f4       	brne	.+2      	; 0x4f52 <main+0x7d4>
    4f50:	87 cc       	rjmp	.-1778   	; 0x4860 <main+0xe2>
				put_rc(f_mount((BYTE)p1, &Fatfs[p1]));
    4f52:	2e 85       	ldd	r18, Y+14	; 0x0e
    4f54:	3f 85       	ldd	r19, Y+15	; 0x0f
    4f56:	48 89       	ldd	r20, Y+16	; 0x10
    4f58:	59 89       	ldd	r21, Y+17	; 0x11
    4f5a:	82 e3       	ldi	r24, 0x32	; 50
    4f5c:	92 e0       	ldi	r25, 0x02	; 2
    4f5e:	28 9f       	mul	r18, r24
    4f60:	b0 01       	movw	r22, r0
    4f62:	29 9f       	mul	r18, r25
    4f64:	70 0d       	add	r23, r0
    4f66:	38 9f       	mul	r19, r24
    4f68:	70 0d       	add	r23, r0
    4f6a:	11 24       	eor	r1, r1
    4f6c:	68 56       	subi	r22, 0x68	; 104
    4f6e:	7d 4f       	sbci	r23, 0xFD	; 253
    4f70:	82 2f       	mov	r24, r18
    4f72:	0e 94 43 3f 	call	0x7e86	; 0x7e86 <f_mount>
    4f76:	cc c6       	rjmp	.+3480   	; 0x5d10 <main+0x1592>
				break;

			case 's' :	/* fs [<path>] - Show logical drive status */
				while (*ptr == ' ') ptr++;
    4f78:	01 96       	adiw	r24, 0x01	; 1
    4f7a:	9b 83       	std	Y+3, r25	; 0x03
    4f7c:	8a 83       	std	Y+2, r24	; 0x02
    4f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f80:	9b 81       	ldd	r25, Y+3	; 0x03
    4f82:	dc 01       	movw	r26, r24
    4f84:	2c 91       	ld	r18, X
    4f86:	20 32       	cpi	r18, 0x20	; 32
    4f88:	b9 f3       	breq	.-18     	; 0x4f78 <main+0x7fa>
				res = f_getfree(ptr, (DWORD*)&p2, &fs);
    4f8a:	be 01       	movw	r22, r28
    4f8c:	6e 5e       	subi	r22, 0xEE	; 238
    4f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    4f90:	ae 01       	movw	r20, r28
    4f92:	44 5f       	subi	r20, 0xF4	; 244
    4f94:	5f 4f       	sbci	r21, 0xFF	; 255
    4f96:	0e 94 4b 48 	call	0x9096	; 0x9096 <f_getfree>
				if (res) { put_rc(res); break; }
    4f9a:	88 23       	and	r24, r24
    4f9c:	09 f0       	breq	.+2      	; 0x4fa0 <main+0x822>
    4f9e:	62 c6       	rjmp	.+3268   	; 0x5c64 <main+0x14e6>
				xprintf(PSTR("FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
							 "Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
							 "FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n..."),
						ft[fs->fs_type & 3], (DWORD)fs->csize * 512, fs->n_fats,
    4fa0:	2c 85       	ldd	r18, Y+12	; 0x0c
    4fa2:	3d 85       	ldd	r19, Y+13	; 0x0d

			case 's' :	/* fs [<path>] - Show logical drive status */
				while (*ptr == ' ') ptr++;
				res = f_getfree(ptr, (DWORD*)&p2, &fs);
				if (res) { put_rc(res); break; }
				xprintf(PSTR("FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
    4fa4:	ed b7       	in	r30, 0x3d	; 61
    4fa6:	fe b7       	in	r31, 0x3e	; 62
    4fa8:	b0 97       	sbiw	r30, 0x20	; 32
    4faa:	0f b6       	in	r0, 0x3f	; 63
    4fac:	f8 94       	cli
    4fae:	fe bf       	out	0x3e, r31	; 62
    4fb0:	0f be       	out	0x3f, r0	; 63
    4fb2:	ed bf       	out	0x3d, r30	; 61
    4fb4:	31 96       	adiw	r30, 0x01	; 1
    4fb6:	09 e5       	ldi	r16, 0x59	; 89
    4fb8:	c0 2e       	mov	r12, r16
    4fba:	02 e0       	ldi	r16, 0x02	; 2
    4fbc:	d0 2e       	mov	r13, r16
    4fbe:	ad b7       	in	r26, 0x3d	; 61
    4fc0:	be b7       	in	r27, 0x3e	; 62
    4fc2:	12 96       	adiw	r26, 0x02	; 2
    4fc4:	dc 92       	st	X, r13
    4fc6:	ce 92       	st	-X, r12
    4fc8:	11 97       	sbiw	r26, 0x01	; 1
							 "Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
							 "FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n..."),
						ft[fs->fs_type & 3], (DWORD)fs->csize * 512, fs->n_fats,
    4fca:	d9 01       	movw	r26, r18
    4fcc:	8c 91       	ld	r24, X
    4fce:	83 70       	andi	r24, 0x03	; 3
    4fd0:	de 01       	movw	r26, r28
    4fd2:	a8 0f       	add	r26, r24
    4fd4:	b1 1d       	adc	r27, r1

			case 's' :	/* fs [<path>] - Show logical drive status */
				while (*ptr == ' ') ptr++;
				res = f_getfree(ptr, (DWORD*)&p2, &fs);
				if (res) { put_rc(res); break; }
				xprintf(PSTR("FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
    4fd6:	5a 96       	adiw	r26, 0x1a	; 26
    4fd8:	8c 91       	ld	r24, X
    4fda:	82 83       	std	Z+2, r24	; 0x02
    4fdc:	13 82       	std	Z+3, r1	; 0x03
							 "Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
							 "FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n..."),
						ft[fs->fs_type & 3], (DWORD)fs->csize * 512, fs->n_fats,
    4fde:	d9 01       	movw	r26, r18
    4fe0:	12 96       	adiw	r26, 0x02	; 2
    4fe2:	8c 91       	ld	r24, X
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
    4fe6:	a0 e0       	ldi	r26, 0x00	; 0
    4fe8:	b0 e0       	ldi	r27, 0x00	; 0

			case 's' :	/* fs [<path>] - Show logical drive status */
				while (*ptr == ' ') ptr++;
				res = f_getfree(ptr, (DWORD*)&p2, &fs);
				if (res) { put_rc(res); break; }
				xprintf(PSTR("FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
    4fea:	19 e0       	ldi	r17, 0x09	; 9
    4fec:	88 0f       	add	r24, r24
    4fee:	99 1f       	adc	r25, r25
    4ff0:	aa 1f       	adc	r26, r26
    4ff2:	bb 1f       	adc	r27, r27
    4ff4:	1a 95       	dec	r17
    4ff6:	d1 f7       	brne	.-12     	; 0x4fec <main+0x86e>
    4ff8:	84 83       	std	Z+4, r24	; 0x04
    4ffa:	95 83       	std	Z+5, r25	; 0x05
    4ffc:	a6 83       	std	Z+6, r26	; 0x06
    4ffe:	b7 83       	std	Z+7, r27	; 0x07
    5000:	d9 01       	movw	r26, r18
    5002:	13 96       	adiw	r26, 0x03	; 3
    5004:	8c 91       	ld	r24, X
    5006:	13 97       	sbiw	r26, 0x03	; 3
    5008:	80 87       	std	Z+8, r24	; 0x08
    500a:	11 86       	std	Z+9, r1	; 0x09
    500c:	18 96       	adiw	r26, 0x08	; 8
    500e:	8d 91       	ld	r24, X+
    5010:	9c 91       	ld	r25, X
    5012:	19 97       	sbiw	r26, 0x09	; 9
    5014:	93 87       	std	Z+11, r25	; 0x0b
    5016:	82 87       	std	Z+10, r24	; 0x0a
    5018:	5e 96       	adiw	r26, 0x1e	; 30
    501a:	4d 91       	ld	r20, X+
    501c:	5d 91       	ld	r21, X+
    501e:	6d 91       	ld	r22, X+
    5020:	7c 91       	ld	r23, X
    5022:	91 97       	sbiw	r26, 0x21	; 33
    5024:	44 87       	std	Z+12, r20	; 0x0c
    5026:	55 87       	std	Z+13, r21	; 0x0d
    5028:	66 87       	std	Z+14, r22	; 0x0e
    502a:	77 87       	std	Z+15, r23	; 0x0f
    502c:	5a 96       	adiw	r26, 0x1a	; 26
    502e:	4d 91       	ld	r20, X+
    5030:	5d 91       	ld	r21, X+
    5032:	6d 91       	ld	r22, X+
    5034:	7c 91       	ld	r23, X
    5036:	5d 97       	sbiw	r26, 0x1d	; 29
    5038:	42 50       	subi	r20, 0x02	; 2
    503a:	50 40       	sbci	r21, 0x00	; 0
    503c:	60 40       	sbci	r22, 0x00	; 0
    503e:	70 40       	sbci	r23, 0x00	; 0
    5040:	40 8b       	std	Z+16, r20	; 0x10
    5042:	51 8b       	std	Z+17, r21	; 0x11
    5044:	62 8b       	std	Z+18, r22	; 0x12
    5046:	73 8b       	std	Z+19, r23	; 0x13
    5048:	92 96       	adiw	r26, 0x22	; 34
    504a:	4d 91       	ld	r20, X+
    504c:	5d 91       	ld	r21, X+
    504e:	6d 91       	ld	r22, X+
    5050:	7c 91       	ld	r23, X
    5052:	95 97       	sbiw	r26, 0x25	; 37
    5054:	44 8b       	std	Z+20, r20	; 0x14
    5056:	55 8b       	std	Z+21, r21	; 0x15
    5058:	66 8b       	std	Z+22, r22	; 0x16
    505a:	77 8b       	std	Z+23, r23	; 0x17
    505c:	96 96       	adiw	r26, 0x26	; 38
    505e:	4d 91       	ld	r20, X+
    5060:	5d 91       	ld	r21, X+
    5062:	6d 91       	ld	r22, X+
    5064:	7c 91       	ld	r23, X
    5066:	99 97       	sbiw	r26, 0x29	; 41
    5068:	40 8f       	std	Z+24, r20	; 0x18
    506a:	51 8f       	std	Z+25, r21	; 0x19
    506c:	62 8f       	std	Z+26, r22	; 0x1a
    506e:	73 8f       	std	Z+27, r23	; 0x1b
    5070:	9a 96       	adiw	r26, 0x2a	; 42
    5072:	2d 91       	ld	r18, X+
    5074:	3d 91       	ld	r19, X+
    5076:	4d 91       	ld	r20, X+
    5078:	5c 91       	ld	r21, X
    507a:	9d 97       	sbiw	r26, 0x2d	; 45
    507c:	24 8f       	std	Z+28, r18	; 0x1c
    507e:	35 8f       	std	Z+29, r19	; 0x1d
    5080:	46 8f       	std	Z+30, r20	; 0x1e
    5082:	57 8f       	std	Z+31, r21	; 0x1f
    5084:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
							 "FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n..."),
						ft[fs->fs_type & 3], (DWORD)fs->csize * 512, fs->n_fats,
						fs->n_rootdir, fs->fsize, fs->n_fatent - 2,
						fs->fatbase, fs->dirbase, fs->database
				);
				acc_size = acc_files = acc_dirs = 0;
    5088:	10 92 17 07 	sts	0x0717, r1
    508c:	10 92 16 07 	sts	0x0716, r1
    5090:	10 92 19 07 	sts	0x0719, r1
    5094:	10 92 18 07 	sts	0x0718, r1
    5098:	10 92 9d 0b 	sts	0x0B9D, r1
    509c:	10 92 9e 0b 	sts	0x0B9E, r1
    50a0:	10 92 9f 0b 	sts	0x0B9F, r1
    50a4:	10 92 a0 0b 	sts	0x0BA0, r1
				res = scan_files(ptr);
    50a8:	ed b7       	in	r30, 0x3d	; 61
    50aa:	fe b7       	in	r31, 0x3e	; 62
    50ac:	b0 96       	adiw	r30, 0x20	; 32
    50ae:	0f b6       	in	r0, 0x3f	; 63
    50b0:	f8 94       	cli
    50b2:	fe bf       	out	0x3e, r31	; 62
    50b4:	0f be       	out	0x3f, r0	; 63
    50b6:	ed bf       	out	0x3d, r30	; 61
    50b8:	8a 81       	ldd	r24, Y+2	; 0x02
    50ba:	9b 81       	ldd	r25, Y+3	; 0x03
    50bc:	0e 94 81 22 	call	0x4502	; 0x4502 <scan_files>
				if (res) { put_rc(res); break; }
    50c0:	88 23       	and	r24, r24
    50c2:	09 f0       	breq	.+2      	; 0x50c6 <main+0x948>
    50c4:	cf c5       	rjmp	.+2974   	; 0x5c64 <main+0x14e6>
				xprintf(PSTR("\r%u files, %lu bytes.\n%u folders.\n"
							 "%lu KB total disk space.\n%lu KB available.\n"),
						acc_files, acc_size, acc_dirs,
						(fs->n_fatent - 2) * (fs->csize / 2), p2 * (fs->csize / 2)
    50c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    50c8:	3d 85       	ldd	r19, Y+13	; 0x0d
						fs->fatbase, fs->dirbase, fs->database
				);
				acc_size = acc_files = acc_dirs = 0;
				res = scan_files(ptr);
				if (res) { put_rc(res); break; }
				xprintf(PSTR("\r%u files, %lu bytes.\n%u folders.\n"
    50ca:	d9 01       	movw	r26, r18
    50cc:	12 96       	adiw	r26, 0x02	; 2
    50ce:	cc 90       	ld	r12, X
    50d0:	c6 94       	lsr	r12
    50d2:	ed b7       	in	r30, 0x3d	; 61
    50d4:	fe b7       	in	r31, 0x3e	; 62
    50d6:	72 97       	sbiw	r30, 0x12	; 18
    50d8:	0f b6       	in	r0, 0x3f	; 63
    50da:	f8 94       	cli
    50dc:	fe bf       	out	0x3e, r31	; 62
    50de:	0f be       	out	0x3f, r0	; 63
    50e0:	ed bf       	out	0x3d, r30	; 61
    50e2:	0d b7       	in	r16, 0x3d	; 61
    50e4:	1e b7       	in	r17, 0x3e	; 62
    50e6:	0f 5f       	subi	r16, 0xFF	; 255
    50e8:	1f 4f       	sbci	r17, 0xFF	; 255
    50ea:	4b e0       	ldi	r20, 0x0B	; 11
    50ec:	52 e0       	ldi	r21, 0x02	; 2
    50ee:	52 83       	std	Z+2, r21	; 0x02
    50f0:	41 83       	std	Z+1, r20	; 0x01
    50f2:	80 91 18 07 	lds	r24, 0x0718
    50f6:	90 91 19 07 	lds	r25, 0x0719
    50fa:	d8 01       	movw	r26, r16
    50fc:	13 96       	adiw	r26, 0x03	; 3
    50fe:	9c 93       	st	X, r25
    5100:	8e 93       	st	-X, r24
    5102:	12 97       	sbiw	r26, 0x02	; 2
    5104:	80 91 9d 0b 	lds	r24, 0x0B9D
    5108:	90 91 9e 0b 	lds	r25, 0x0B9E
    510c:	a0 91 9f 0b 	lds	r26, 0x0B9F
    5110:	b0 91 a0 0b 	lds	r27, 0x0BA0
    5114:	f8 01       	movw	r30, r16
    5116:	84 83       	std	Z+4, r24	; 0x04
    5118:	95 83       	std	Z+5, r25	; 0x05
    511a:	a6 83       	std	Z+6, r26	; 0x06
    511c:	b7 83       	std	Z+7, r27	; 0x07
    511e:	80 91 16 07 	lds	r24, 0x0716
    5122:	90 91 17 07 	lds	r25, 0x0717
    5126:	91 87       	std	Z+9, r25	; 0x09
    5128:	80 87       	std	Z+8, r24	; 0x08
    512a:	dd 24       	eor	r13, r13
    512c:	ee 24       	eor	r14, r14
    512e:	ff 24       	eor	r15, r15
							 "%lu KB total disk space.\n%lu KB available.\n"),
						acc_files, acc_size, acc_dirs,
						(fs->n_fatent - 2) * (fs->csize / 2), p2 * (fs->csize / 2)
    5130:	d9 01       	movw	r26, r18
    5132:	5a 96       	adiw	r26, 0x1a	; 26
    5134:	2d 91       	ld	r18, X+
    5136:	3d 91       	ld	r19, X+
    5138:	4d 91       	ld	r20, X+
    513a:	5c 91       	ld	r21, X
    513c:	5d 97       	sbiw	r26, 0x1d	; 29
    513e:	22 50       	subi	r18, 0x02	; 2
    5140:	30 40       	sbci	r19, 0x00	; 0
    5142:	40 40       	sbci	r20, 0x00	; 0
    5144:	50 40       	sbci	r21, 0x00	; 0
						fs->fatbase, fs->dirbase, fs->database
				);
				acc_size = acc_files = acc_dirs = 0;
				res = scan_files(ptr);
				if (res) { put_rc(res); break; }
				xprintf(PSTR("\r%u files, %lu bytes.\n%u folders.\n"
    5146:	c7 01       	movw	r24, r14
    5148:	b6 01       	movw	r22, r12
    514a:	0e 94 4f 5c 	call	0xb89e	; 0xb89e <__mulsi3>
    514e:	f8 01       	movw	r30, r16
    5150:	62 87       	std	Z+10, r22	; 0x0a
    5152:	73 87       	std	Z+11, r23	; 0x0b
    5154:	84 87       	std	Z+12, r24	; 0x0c
    5156:	95 87       	std	Z+13, r25	; 0x0d
    5158:	2a 89       	ldd	r18, Y+18	; 0x12
    515a:	3b 89       	ldd	r19, Y+19	; 0x13
    515c:	4c 89       	ldd	r20, Y+20	; 0x14
    515e:	5d 89       	ldd	r21, Y+21	; 0x15
    5160:	c7 01       	movw	r24, r14
    5162:	b6 01       	movw	r22, r12
    5164:	0e 94 4f 5c 	call	0xb89e	; 0xb89e <__mulsi3>
    5168:	d8 01       	movw	r26, r16
    516a:	1e 96       	adiw	r26, 0x0e	; 14
    516c:	6d 93       	st	X+, r22
    516e:	7d 93       	st	X+, r23
    5170:	8d 93       	st	X+, r24
    5172:	9c 93       	st	X, r25
    5174:	51 97       	sbiw	r26, 0x11	; 17
    5176:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
							 "%lu KB total disk space.\n%lu KB available.\n"),
						acc_files, acc_size, acc_dirs,
						(fs->n_fatent - 2) * (fs->csize / 2), p2 * (fs->csize / 2)
				);
				break;
    517a:	ed b7       	in	r30, 0x3d	; 61
    517c:	fe b7       	in	r31, 0x3e	; 62
    517e:	72 96       	adiw	r30, 0x12	; 18
    5180:	30 c6       	rjmp	.+3168   	; 0x5de2 <main+0x1664>

			case 'l' :	/* fl [<path>] - Directory listing */
				while (*ptr == ' ') ptr++;
    5182:	6f 5f       	subi	r22, 0xFF	; 255
    5184:	7f 4f       	sbci	r23, 0xFF	; 255
    5186:	7b 83       	std	Y+3, r23	; 0x03
    5188:	6a 83       	std	Y+2, r22	; 0x02
    518a:	6a 81       	ldd	r22, Y+2	; 0x02
    518c:	7b 81       	ldd	r23, Y+3	; 0x03
    518e:	db 01       	movw	r26, r22
    5190:	8c 91       	ld	r24, X
    5192:	80 32       	cpi	r24, 0x20	; 32
    5194:	b1 f3       	breq	.-20     	; 0x5182 <main+0xa04>
				res = f_opendir(&dir, ptr);
    5196:	8e 01       	movw	r16, r28
    5198:	0a 5d       	subi	r16, 0xDA	; 218
    519a:	1f 4f       	sbci	r17, 0xFF	; 255
    519c:	c8 01       	movw	r24, r16
    519e:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <f_opendir>
				if (res) { put_rc(res); break; }
    51a2:	88 23       	and	r24, r24
    51a4:	09 f0       	breq	.+2      	; 0x51a8 <main+0xa2a>
    51a6:	5e c5       	rjmp	.+2748   	; 0x5c64 <main+0x14e6>
				p1 = s1 = s2 = 0;
    51a8:	19 86       	std	Y+9, r1	; 0x09
    51aa:	18 86       	std	Y+8, r1	; 0x08
    51ac:	1f 82       	std	Y+7, r1	; 0x07
    51ae:	1e 82       	std	Y+6, r1	; 0x06
    51b0:	1e 86       	std	Y+14, r1	; 0x0e
    51b2:	1f 86       	std	Y+15, r1	; 0x0f
    51b4:	18 8a       	std	Y+16, r1	; 0x10
    51b6:	19 8a       	std	Y+17, r1	; 0x11
				for(;;) {
					res = f_readdir(&dir, &Finfo);
    51b8:	a1 2e       	mov	r10, r17
    51ba:	b0 2e       	mov	r11, r16
    51bc:	8b 2d       	mov	r24, r11
    51be:	9a 2d       	mov	r25, r10
    51c0:	6c ef       	ldi	r22, 0xFC	; 252
    51c2:	76 e0       	ldi	r23, 0x06	; 6
    51c4:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <f_readdir>
					if ((res != FR_OK) || !Finfo.fname[0]) break;
    51c8:	88 23       	and	r24, r24
    51ca:	09 f0       	breq	.+2      	; 0x51ce <main+0xa50>
    51cc:	07 c1       	rjmp	.+526    	; 0x53dc <main+0xc5e>
    51ce:	80 91 05 07 	lds	r24, 0x0705
    51d2:	88 23       	and	r24, r24
    51d4:	09 f4       	brne	.+2      	; 0x51d8 <main+0xa5a>
    51d6:	02 c1       	rjmp	.+516    	; 0x53dc <main+0xc5e>
					if (Finfo.fattrib & AM_DIR) {
    51d8:	e0 91 04 07 	lds	r30, 0x0704
    51dc:	e4 ff       	sbrs	r30, 4
    51de:	08 c0       	rjmp	.+16     	; 0x51f0 <main+0xa72>
						s2++;
    51e0:	88 85       	ldd	r24, Y+8	; 0x08
    51e2:	99 85       	ldd	r25, Y+9	; 0x09
    51e4:	01 96       	adiw	r24, 0x01	; 1
    51e6:	99 87       	std	Y+9, r25	; 0x09
    51e8:	88 87       	std	Y+8, r24	; 0x08
					} else {
						s1++; p1 += Finfo.fsize;
					}
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s"), 
    51ea:	24 e4       	ldi	r18, 0x44	; 68
    51ec:	30 e0       	ldi	r19, 0x00	; 0
    51ee:	1b c0       	rjmp	.+54     	; 0x5226 <main+0xaa8>
					res = f_readdir(&dir, &Finfo);
					if ((res != FR_OK) || !Finfo.fname[0]) break;
					if (Finfo.fattrib & AM_DIR) {
						s2++;
					} else {
						s1++; p1 += Finfo.fsize;
    51f0:	8e 81       	ldd	r24, Y+6	; 0x06
    51f2:	9f 81       	ldd	r25, Y+7	; 0x07
    51f4:	01 96       	adiw	r24, 0x01	; 1
    51f6:	9f 83       	std	Y+7, r25	; 0x07
    51f8:	8e 83       	std	Y+6, r24	; 0x06
    51fa:	2e 85       	ldd	r18, Y+14	; 0x0e
    51fc:	3f 85       	ldd	r19, Y+15	; 0x0f
    51fe:	48 89       	ldd	r20, Y+16	; 0x10
    5200:	59 89       	ldd	r21, Y+17	; 0x11
    5202:	80 91 fc 06 	lds	r24, 0x06FC
    5206:	90 91 fd 06 	lds	r25, 0x06FD
    520a:	a0 91 fe 06 	lds	r26, 0x06FE
    520e:	b0 91 ff 06 	lds	r27, 0x06FF
    5212:	28 0f       	add	r18, r24
    5214:	39 1f       	adc	r19, r25
    5216:	4a 1f       	adc	r20, r26
    5218:	5b 1f       	adc	r21, r27
    521a:	2e 87       	std	Y+14, r18	; 0x0e
    521c:	3f 87       	std	Y+15, r19	; 0x0f
    521e:	48 8b       	std	Y+16, r20	; 0x10
    5220:	59 8b       	std	Y+17, r21	; 0x11
					}
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s"), 
    5222:	2d e2       	ldi	r18, 0x2D	; 45
    5224:	30 e0       	ldi	r19, 0x00	; 0
    5226:	e0 ff       	sbrs	r30, 0
    5228:	03 c0       	rjmp	.+6      	; 0x5230 <main+0xab2>
    522a:	42 e5       	ldi	r20, 0x52	; 82
    522c:	50 e0       	ldi	r21, 0x00	; 0
    522e:	02 c0       	rjmp	.+4      	; 0x5234 <main+0xab6>
    5230:	4d e2       	ldi	r20, 0x2D	; 45
    5232:	50 e0       	ldi	r21, 0x00	; 0
    5234:	e1 ff       	sbrs	r30, 1
    5236:	03 c0       	rjmp	.+6      	; 0x523e <main+0xac0>
    5238:	68 e4       	ldi	r22, 0x48	; 72
    523a:	70 e0       	ldi	r23, 0x00	; 0
    523c:	02 c0       	rjmp	.+4      	; 0x5242 <main+0xac4>
    523e:	6d e2       	ldi	r22, 0x2D	; 45
    5240:	70 e0       	ldi	r23, 0x00	; 0
    5242:	e2 ff       	sbrs	r30, 2
    5244:	09 c0       	rjmp	.+18     	; 0x5258 <main+0xada>
    5246:	83 e5       	ldi	r24, 0x53	; 83
    5248:	90 e0       	ldi	r25, 0x00	; 0
    524a:	ca 57       	subi	r28, 0x7A	; 122
    524c:	df 4f       	sbci	r29, 0xFF	; 255
    524e:	99 83       	std	Y+1, r25	; 0x01
    5250:	88 83       	st	Y, r24
    5252:	c6 58       	subi	r28, 0x86	; 134
    5254:	d0 40       	sbci	r29, 0x00	; 0
    5256:	08 c0       	rjmp	.+16     	; 0x5268 <main+0xaea>
    5258:	ad e2       	ldi	r26, 0x2D	; 45
    525a:	b0 e0       	ldi	r27, 0x00	; 0
    525c:	ca 57       	subi	r28, 0x7A	; 122
    525e:	df 4f       	sbci	r29, 0xFF	; 255
    5260:	b9 83       	std	Y+1, r27	; 0x01
    5262:	a8 83       	st	Y, r26
    5264:	c6 58       	subi	r28, 0x86	; 134
    5266:	d0 40       	sbci	r29, 0x00	; 0
    5268:	e5 ff       	sbrs	r30, 5
    526a:	03 c0       	rjmp	.+6      	; 0x5272 <main+0xaf4>
    526c:	01 e4       	ldi	r16, 0x41	; 65
    526e:	10 e0       	ldi	r17, 0x00	; 0
    5270:	02 c0       	rjmp	.+4      	; 0x5276 <main+0xaf8>
    5272:	0d e2       	ldi	r16, 0x2D	; 45
    5274:	10 e0       	ldi	r17, 0x00	; 0
								(Finfo.fattrib & AM_DIR) ? 'D' : '-',
								(Finfo.fattrib & AM_RDO) ? 'R' : '-',
								(Finfo.fattrib & AM_HID) ? 'H' : '-',
								(Finfo.fattrib & AM_SYS) ? 'S' : '-',
								(Finfo.fattrib & AM_ARC) ? 'A' : '-',
								(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
    5276:	80 91 00 07 	lds	r24, 0x0700
    527a:	90 91 01 07 	lds	r25, 0x0701
								(Finfo.ftime >> 11), (Finfo.ftime >> 5) & 63,
    527e:	e0 90 02 07 	lds	r14, 0x0702
    5282:	f0 90 03 07 	lds	r15, 0x0703
					if (Finfo.fattrib & AM_DIR) {
						s2++;
					} else {
						s1++; p1 += Finfo.fsize;
					}
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s"), 
    5286:	ed b7       	in	r30, 0x3d	; 61
    5288:	fe b7       	in	r31, 0x3e	; 62
    528a:	7c 97       	sbiw	r30, 0x1c	; 28
    528c:	0f b6       	in	r0, 0x3f	; 63
    528e:	f8 94       	cli
    5290:	fe bf       	out	0x3e, r31	; 62
    5292:	0f be       	out	0x3f, r0	; 63
    5294:	ed bf       	out	0x3d, r30	; 61
    5296:	31 96       	adiw	r30, 0x01	; 1
    5298:	a0 ee       	ldi	r26, 0xE0	; 224
    529a:	ca 2e       	mov	r12, r26
    529c:	a1 e0       	ldi	r26, 0x01	; 1
    529e:	da 2e       	mov	r13, r26
    52a0:	ad b7       	in	r26, 0x3d	; 61
    52a2:	be b7       	in	r27, 0x3e	; 62
    52a4:	12 96       	adiw	r26, 0x02	; 2
    52a6:	dc 92       	st	X, r13
    52a8:	ce 92       	st	-X, r12
    52aa:	11 97       	sbiw	r26, 0x01	; 1
    52ac:	33 83       	std	Z+3, r19	; 0x03
    52ae:	22 83       	std	Z+2, r18	; 0x02
    52b0:	55 83       	std	Z+5, r21	; 0x05
    52b2:	44 83       	std	Z+4, r20	; 0x04
    52b4:	77 83       	std	Z+7, r23	; 0x07
    52b6:	66 83       	std	Z+6, r22	; 0x06
    52b8:	ca 57       	subi	r28, 0x7A	; 122
    52ba:	df 4f       	sbci	r29, 0xFF	; 255
    52bc:	28 81       	ld	r18, Y
    52be:	39 81       	ldd	r19, Y+1	; 0x01
    52c0:	c6 58       	subi	r28, 0x86	; 134
    52c2:	d0 40       	sbci	r29, 0x00	; 0
    52c4:	31 87       	std	Z+9, r19	; 0x09
    52c6:	20 87       	std	Z+8, r18	; 0x08
    52c8:	13 87       	std	Z+11, r17	; 0x0b
    52ca:	02 87       	std	Z+10, r16	; 0x0a
								(Finfo.fattrib & AM_DIR) ? 'D' : '-',
								(Finfo.fattrib & AM_RDO) ? 'R' : '-',
								(Finfo.fattrib & AM_HID) ? 'H' : '-',
								(Finfo.fattrib & AM_SYS) ? 'S' : '-',
								(Finfo.fattrib & AM_ARC) ? 'A' : '-',
								(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
    52cc:	9c 01       	movw	r18, r24
    52ce:	23 2f       	mov	r18, r19
    52d0:	33 27       	eor	r19, r19
    52d2:	26 95       	lsr	r18
					if (Finfo.fattrib & AM_DIR) {
						s2++;
					} else {
						s1++; p1 += Finfo.fsize;
					}
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s"), 
    52d4:	24 54       	subi	r18, 0x44	; 68
    52d6:	38 4f       	sbci	r19, 0xF8	; 248
    52d8:	35 87       	std	Z+13, r19	; 0x0d
    52da:	24 87       	std	Z+12, r18	; 0x0c
								(Finfo.fattrib & AM_DIR) ? 'D' : '-',
								(Finfo.fattrib & AM_RDO) ? 'R' : '-',
								(Finfo.fattrib & AM_HID) ? 'H' : '-',
								(Finfo.fattrib & AM_SYS) ? 'S' : '-',
								(Finfo.fattrib & AM_ARC) ? 'A' : '-',
								(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
    52dc:	9c 01       	movw	r18, r24
    52de:	45 e0       	ldi	r20, 0x05	; 5
    52e0:	36 95       	lsr	r19
    52e2:	27 95       	ror	r18
    52e4:	4a 95       	dec	r20
    52e6:	e1 f7       	brne	.-8      	; 0x52e0 <main+0xb62>
					if (Finfo.fattrib & AM_DIR) {
						s2++;
					} else {
						s1++; p1 += Finfo.fsize;
					}
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s"), 
    52e8:	2f 70       	andi	r18, 0x0F	; 15
    52ea:	30 70       	andi	r19, 0x00	; 0
    52ec:	37 87       	std	Z+15, r19	; 0x0f
    52ee:	26 87       	std	Z+14, r18	; 0x0e
    52f0:	8f 71       	andi	r24, 0x1F	; 31
    52f2:	90 70       	andi	r25, 0x00	; 0
    52f4:	91 8b       	std	Z+17, r25	; 0x11
    52f6:	80 8b       	std	Z+16, r24	; 0x10
    52f8:	8f 2d       	mov	r24, r15
    52fa:	86 95       	lsr	r24
    52fc:	86 95       	lsr	r24
    52fe:	86 95       	lsr	r24
    5300:	82 8b       	std	Z+18, r24	; 0x12
    5302:	13 8a       	std	Z+19, r1	; 0x13
								(Finfo.fattrib & AM_RDO) ? 'R' : '-',
								(Finfo.fattrib & AM_HID) ? 'H' : '-',
								(Finfo.fattrib & AM_SYS) ? 'S' : '-',
								(Finfo.fattrib & AM_ARC) ? 'A' : '-',
								(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
								(Finfo.ftime >> 11), (Finfo.ftime >> 5) & 63,
    5304:	25 e0       	ldi	r18, 0x05	; 5
    5306:	f6 94       	lsr	r15
    5308:	e7 94       	ror	r14
    530a:	2a 95       	dec	r18
    530c:	e1 f7       	brne	.-8      	; 0x5306 <main+0xb88>
					if (Finfo.fattrib & AM_DIR) {
						s2++;
					} else {
						s1++; p1 += Finfo.fsize;
					}
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s"), 
    530e:	3f e3       	ldi	r19, 0x3F	; 63
    5310:	e3 22       	and	r14, r19
    5312:	ff 24       	eor	r15, r15
    5314:	f5 8a       	std	Z+21, r15	; 0x15
    5316:	e4 8a       	std	Z+20, r14	; 0x14
    5318:	80 91 fc 06 	lds	r24, 0x06FC
    531c:	90 91 fd 06 	lds	r25, 0x06FD
    5320:	a0 91 fe 06 	lds	r26, 0x06FE
    5324:	b0 91 ff 06 	lds	r27, 0x06FF
    5328:	86 8b       	std	Z+22, r24	; 0x16
    532a:	97 8b       	std	Z+23, r25	; 0x17
    532c:	a0 8f       	std	Z+24, r26	; 0x18
    532e:	b1 8f       	std	Z+25, r27	; 0x19
    5330:	45 e0       	ldi	r20, 0x05	; 5
    5332:	57 e0       	ldi	r21, 0x07	; 7
    5334:	53 8f       	std	Z+27, r21	; 0x1b
    5336:	42 8f       	std	Z+26, r20	; 0x1a
    5338:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
								(Finfo.fattrib & AM_ARC) ? 'A' : '-',
								(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
								(Finfo.ftime >> 11), (Finfo.ftime >> 5) & 63,
								Finfo.fsize, &(Finfo.fname[0]));
#if _USE_LFN
					for (p2 = strlen(Finfo.fname); p2 < 14; p2++)
    533c:	e5 e0       	ldi	r30, 0x05	; 5
    533e:	f7 e0       	ldi	r31, 0x07	; 7
    5340:	01 90       	ld	r0, Z+
    5342:	00 20       	and	r0, r0
    5344:	e9 f7       	brne	.-6      	; 0x5340 <main+0xbc2>
    5346:	e6 50       	subi	r30, 0x06	; 6
    5348:	f7 40       	sbci	r31, 0x07	; 7
    534a:	cf 01       	movw	r24, r30
    534c:	a0 e0       	ldi	r26, 0x00	; 0
    534e:	b0 e0       	ldi	r27, 0x00	; 0
    5350:	8a 8b       	std	Y+18, r24	; 0x12
    5352:	9b 8b       	std	Y+19, r25	; 0x13
    5354:	ac 8b       	std	Y+20, r26	; 0x14
    5356:	bd 8b       	std	Y+21, r27	; 0x15
    5358:	8d b7       	in	r24, 0x3d	; 61
    535a:	9e b7       	in	r25, 0x3e	; 62
    535c:	4c 96       	adiw	r24, 0x1c	; 28
    535e:	0f b6       	in	r0, 0x3f	; 63
    5360:	f8 94       	cli
    5362:	9e bf       	out	0x3e, r25	; 62
    5364:	0f be       	out	0x3f, r0	; 63
    5366:	8d bf       	out	0x3d, r24	; 61
    5368:	cb 2c       	mov	r12, r11
    536a:	0e c0       	rjmp	.+28     	; 0x5388 <main+0xc0a>
						xputc(' ');
    536c:	80 e2       	ldi	r24, 0x20	; 32
    536e:	0e 94 60 56 	call	0xacc0	; 0xacc0 <xputc>
								(Finfo.fattrib & AM_ARC) ? 'A' : '-',
								(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
								(Finfo.ftime >> 11), (Finfo.ftime >> 5) & 63,
								Finfo.fsize, &(Finfo.fname[0]));
#if _USE_LFN
					for (p2 = strlen(Finfo.fname); p2 < 14; p2++)
    5372:	8a 89       	ldd	r24, Y+18	; 0x12
    5374:	9b 89       	ldd	r25, Y+19	; 0x13
    5376:	ac 89       	ldd	r26, Y+20	; 0x14
    5378:	bd 89       	ldd	r27, Y+21	; 0x15
    537a:	01 96       	adiw	r24, 0x01	; 1
    537c:	a1 1d       	adc	r26, r1
    537e:	b1 1d       	adc	r27, r1
    5380:	8a 8b       	std	Y+18, r24	; 0x12
    5382:	9b 8b       	std	Y+19, r25	; 0x13
    5384:	ac 8b       	std	Y+20, r26	; 0x14
    5386:	bd 8b       	std	Y+21, r27	; 0x15
    5388:	8a 89       	ldd	r24, Y+18	; 0x12
    538a:	9b 89       	ldd	r25, Y+19	; 0x13
    538c:	ac 89       	ldd	r26, Y+20	; 0x14
    538e:	bd 89       	ldd	r27, Y+21	; 0x15
    5390:	8e 30       	cpi	r24, 0x0E	; 14
    5392:	91 05       	cpc	r25, r1
    5394:	a1 05       	cpc	r26, r1
    5396:	b1 05       	cpc	r27, r1
    5398:	4c f3       	brlt	.-46     	; 0x536c <main+0xbee>
    539a:	bc 2c       	mov	r11, r12
						xputc(' ');
					xprintf(PSTR("%s\n"), Lfname);
    539c:	00 d0       	rcall	.+0      	; 0x539e <main+0xc20>
    539e:	00 d0       	rcall	.+0      	; 0x53a0 <main+0xc22>
    53a0:	ec ed       	ldi	r30, 0xDC	; 220
    53a2:	f1 e0       	ldi	r31, 0x01	; 1
    53a4:	ad b7       	in	r26, 0x3d	; 61
    53a6:	be b7       	in	r27, 0x3e	; 62
    53a8:	12 96       	adiw	r26, 0x02	; 2
    53aa:	fc 93       	st	X, r31
    53ac:	ee 93       	st	-X, r30
    53ae:	11 97       	sbiw	r26, 0x01	; 1
    53b0:	cc 57       	subi	r28, 0x7C	; 124
    53b2:	df 4f       	sbci	r29, 0xFF	; 255
    53b4:	f8 81       	ld	r31, Y
    53b6:	c4 58       	subi	r28, 0x84	; 132
    53b8:	d0 40       	sbci	r29, 0x00	; 0
    53ba:	13 96       	adiw	r26, 0x03	; 3
    53bc:	fc 93       	st	X, r31
    53be:	13 97       	sbiw	r26, 0x03	; 3
    53c0:	cb 57       	subi	r28, 0x7B	; 123
    53c2:	df 4f       	sbci	r29, 0xFF	; 255
    53c4:	c8 80       	ld	r12, Y
    53c6:	c5 58       	subi	r28, 0x85	; 133
    53c8:	d0 40       	sbci	r29, 0x00	; 0
    53ca:	14 96       	adiw	r26, 0x04	; 4
    53cc:	cc 92       	st	X, r12
    53ce:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
#else
					xputc('\n');
#endif
				}
    53d2:	0f 90       	pop	r0
    53d4:	0f 90       	pop	r0
    53d6:	0f 90       	pop	r0
    53d8:	0f 90       	pop	r0
    53da:	f0 ce       	rjmp	.-544    	; 0x51bc <main+0xa3e>
				xprintf(PSTR("%4u File(s),%10lu bytes total\n%4u Dir(s)"), s1, p1, s2);
    53dc:	2d b7       	in	r18, 0x3d	; 61
    53de:	3e b7       	in	r19, 0x3e	; 62
    53e0:	2a 50       	subi	r18, 0x0A	; 10
    53e2:	30 40       	sbci	r19, 0x00	; 0
    53e4:	0f b6       	in	r0, 0x3f	; 63
    53e6:	f8 94       	cli
    53e8:	3e bf       	out	0x3e, r19	; 62
    53ea:	0f be       	out	0x3f, r0	; 63
    53ec:	2d bf       	out	0x3d, r18	; 61
    53ee:	ed b7       	in	r30, 0x3d	; 61
    53f0:	fe b7       	in	r31, 0x3e	; 62
    53f2:	31 96       	adiw	r30, 0x01	; 1
    53f4:	83 eb       	ldi	r24, 0xB3	; 179
    53f6:	91 e0       	ldi	r25, 0x01	; 1
    53f8:	ad b7       	in	r26, 0x3d	; 61
    53fa:	be b7       	in	r27, 0x3e	; 62
    53fc:	12 96       	adiw	r26, 0x02	; 2
    53fe:	9c 93       	st	X, r25
    5400:	8e 93       	st	-X, r24
    5402:	11 97       	sbiw	r26, 0x01	; 1
    5404:	8e 81       	ldd	r24, Y+6	; 0x06
    5406:	9f 81       	ldd	r25, Y+7	; 0x07
    5408:	93 83       	std	Z+3, r25	; 0x03
    540a:	82 83       	std	Z+2, r24	; 0x02
    540c:	8e 85       	ldd	r24, Y+14	; 0x0e
    540e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5410:	a8 89       	ldd	r26, Y+16	; 0x10
    5412:	b9 89       	ldd	r27, Y+17	; 0x11
    5414:	84 83       	std	Z+4, r24	; 0x04
    5416:	95 83       	std	Z+5, r25	; 0x05
    5418:	a6 83       	std	Z+6, r26	; 0x06
    541a:	b7 83       	std	Z+7, r27	; 0x07
    541c:	88 85       	ldd	r24, Y+8	; 0x08
    541e:	99 85       	ldd	r25, Y+9	; 0x09
    5420:	91 87       	std	Z+9, r25	; 0x09
    5422:	80 87       	std	Z+8, r24	; 0x08
    5424:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
				if (f_getfree(ptr, (DWORD*)&p1, &fs) == FR_OK)
    5428:	ed b7       	in	r30, 0x3d	; 61
    542a:	fe b7       	in	r31, 0x3e	; 62
    542c:	3a 96       	adiw	r30, 0x0a	; 10
    542e:	0f b6       	in	r0, 0x3f	; 63
    5430:	f8 94       	cli
    5432:	fe bf       	out	0x3e, r31	; 62
    5434:	0f be       	out	0x3f, r0	; 63
    5436:	ed bf       	out	0x3d, r30	; 61
    5438:	8a 81       	ldd	r24, Y+2	; 0x02
    543a:	9b 81       	ldd	r25, Y+3	; 0x03
    543c:	be 01       	movw	r22, r28
    543e:	62 5f       	subi	r22, 0xF2	; 242
    5440:	7f 4f       	sbci	r23, 0xFF	; 255
    5442:	ae 01       	movw	r20, r28
    5444:	44 5f       	subi	r20, 0xF4	; 244
    5446:	5f 4f       	sbci	r21, 0xFF	; 255
    5448:	0e 94 4b 48 	call	0x9096	; 0x9096 <f_getfree>
    544c:	00 97       	sbiw	r24, 0x00	; 0
    544e:	09 f0       	breq	.+2      	; 0x5452 <main+0xcd4>
    5450:	07 ca       	rjmp	.-3058   	; 0x4860 <main+0xe2>
					xprintf(PSTR(", %10luK bytes free\n"), p1 * fs->csize / 2);
    5452:	00 d0       	rcall	.+0      	; 0x5454 <main+0xcd6>
    5454:	00 d0       	rcall	.+0      	; 0x5456 <main+0xcd8>
    5456:	00 d0       	rcall	.+0      	; 0x5458 <main+0xcda>
    5458:	8e e9       	ldi	r24, 0x9E	; 158
    545a:	91 e0       	ldi	r25, 0x01	; 1
    545c:	ad b7       	in	r26, 0x3d	; 61
    545e:	be b7       	in	r27, 0x3e	; 62
    5460:	12 96       	adiw	r26, 0x02	; 2
    5462:	9c 93       	st	X, r25
    5464:	8e 93       	st	-X, r24
    5466:	11 97       	sbiw	r26, 0x01	; 1
    5468:	ec 85       	ldd	r30, Y+12	; 0x0c
    546a:	fd 85       	ldd	r31, Y+13	; 0x0d
    546c:	62 81       	ldd	r22, Z+2	; 0x02
    546e:	70 e0       	ldi	r23, 0x00	; 0
    5470:	80 e0       	ldi	r24, 0x00	; 0
    5472:	90 e0       	ldi	r25, 0x00	; 0
    5474:	2e 85       	ldd	r18, Y+14	; 0x0e
    5476:	3f 85       	ldd	r19, Y+15	; 0x0f
    5478:	48 89       	ldd	r20, Y+16	; 0x10
    547a:	59 89       	ldd	r21, Y+17	; 0x11
    547c:	0e 94 4f 5c 	call	0xb89e	; 0xb89e <__mulsi3>
    5480:	22 e0       	ldi	r18, 0x02	; 2
    5482:	30 e0       	ldi	r19, 0x00	; 0
    5484:	40 e0       	ldi	r20, 0x00	; 0
    5486:	50 e0       	ldi	r21, 0x00	; 0
    5488:	0e 94 b7 5c 	call	0xb96e	; 0xb96e <__divmodsi4>
    548c:	ed b7       	in	r30, 0x3d	; 61
    548e:	fe b7       	in	r31, 0x3e	; 62
    5490:	23 83       	std	Z+3, r18	; 0x03
    5492:	34 83       	std	Z+4, r19	; 0x04
    5494:	45 83       	std	Z+5, r20	; 0x05
    5496:	56 83       	std	Z+6, r21	; 0x06
    5498:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
    549c:	2d b7       	in	r18, 0x3d	; 61
    549e:	3e b7       	in	r19, 0x3e	; 62
    54a0:	2a 5f       	subi	r18, 0xFA	; 250
    54a2:	3f 4f       	sbci	r19, 0xFF	; 255
    54a4:	5c c0       	rjmp	.+184    	; 0x555e <main+0xde0>
				break;

			case 'o' :	/* fo <mode> <name> - Open a file */
				if (!xatoi(&ptr, &p1)) break;
    54a6:	ce 01       	movw	r24, r28
    54a8:	02 96       	adiw	r24, 0x02	; 2
    54aa:	be 01       	movw	r22, r28
    54ac:	62 5f       	subi	r22, 0xF2	; 242
    54ae:	7f 4f       	sbci	r23, 0xFF	; 255
    54b0:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    54b4:	88 23       	and	r24, r24
    54b6:	09 f4       	brne	.+2      	; 0x54ba <main+0xd3c>
    54b8:	d3 c9       	rjmp	.-3162   	; 0x4860 <main+0xe2>
    54ba:	04 c0       	rjmp	.+8      	; 0x54c4 <main+0xd46>
				while (*ptr == ' ') ptr++;
    54bc:	6f 5f       	subi	r22, 0xFF	; 255
    54be:	7f 4f       	sbci	r23, 0xFF	; 255
    54c0:	7b 83       	std	Y+3, r23	; 0x03
    54c2:	6a 83       	std	Y+2, r22	; 0x02
    54c4:	6a 81       	ldd	r22, Y+2	; 0x02
    54c6:	7b 81       	ldd	r23, Y+3	; 0x03
    54c8:	db 01       	movw	r26, r22
    54ca:	8c 91       	ld	r24, X
    54cc:	80 32       	cpi	r24, 0x20	; 32
    54ce:	b1 f3       	breq	.-20     	; 0x54bc <main+0xd3e>
				put_rc(f_open(&file1, ptr, (BYTE)p1));
    54d0:	c4 01       	movw	r24, r8
    54d2:	4e 85       	ldd	r20, Y+14	; 0x0e
    54d4:	0e 94 64 3f 	call	0x7ec8	; 0x7ec8 <f_open>
    54d8:	1b c4       	rjmp	.+2102   	; 0x5d10 <main+0x1592>
				break;

			case 'c' :	/* fc - Close a file */
				put_rc(f_close(&file1));
    54da:	c4 01       	movw	r24, r8
    54dc:	0e 94 35 44 	call	0x886a	; 0x886a <f_close>
    54e0:	17 c4       	rjmp	.+2094   	; 0x5d10 <main+0x1592>
				break;

			case 'e' :	/* fe - Seek file pointer */
				if (!xatoi(&ptr, &p1)) break;
    54e2:	ce 01       	movw	r24, r28
    54e4:	02 96       	adiw	r24, 0x02	; 2
    54e6:	be 01       	movw	r22, r28
    54e8:	62 5f       	subi	r22, 0xF2	; 242
    54ea:	7f 4f       	sbci	r23, 0xFF	; 255
    54ec:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    54f0:	88 23       	and	r24, r24
    54f2:	09 f4       	brne	.+2      	; 0x54f6 <main+0xd78>
    54f4:	b5 c9       	rjmp	.-3222   	; 0x4860 <main+0xe2>
				res = f_lseek(&file1, p1);
    54f6:	4e 85       	ldd	r20, Y+14	; 0x0e
    54f8:	5f 85       	ldd	r21, Y+15	; 0x0f
    54fa:	68 89       	ldd	r22, Y+16	; 0x10
    54fc:	79 89       	ldd	r23, Y+17	; 0x11
    54fe:	c4 01       	movw	r24, r8
    5500:	0e 94 c8 45 	call	0x8b90	; 0x8b90 <f_lseek>
    5504:	08 2f       	mov	r16, r24
				put_rc(res);
    5506:	90 e0       	ldi	r25, 0x00	; 0
    5508:	0e 94 ef 21 	call	0x43de	; 0x43de <put_rc>
				if (res == FR_OK)
    550c:	00 23       	and	r16, r16
    550e:	09 f0       	breq	.+2      	; 0x5512 <main+0xd94>
    5510:	a7 c9       	rjmp	.-3250   	; 0x4860 <main+0xe2>
					xprintf(PSTR("fptr = %lu(0x%lX)\n"), file1.fptr, file1.fptr);
    5512:	fe 01       	movw	r30, r28
    5514:	ea 5b       	subi	r30, 0xBA	; 186
    5516:	ff 4f       	sbci	r31, 0xFF	; 255
    5518:	80 81       	ld	r24, Z
    551a:	91 81       	ldd	r25, Z+1	; 0x01
    551c:	a2 81       	ldd	r26, Z+2	; 0x02
    551e:	b3 81       	ldd	r27, Z+3	; 0x03
    5520:	ed b7       	in	r30, 0x3d	; 61
    5522:	fe b7       	in	r31, 0x3e	; 62
    5524:	3a 97       	sbiw	r30, 0x0a	; 10
    5526:	0f b6       	in	r0, 0x3f	; 63
    5528:	f8 94       	cli
    552a:	fe bf       	out	0x3e, r31	; 62
    552c:	0f be       	out	0x3f, r0	; 63
    552e:	ed bf       	out	0x3d, r30	; 61
    5530:	4d b7       	in	r20, 0x3d	; 61
    5532:	5e b7       	in	r21, 0x3e	; 62
    5534:	4f 5f       	subi	r20, 0xFF	; 255
    5536:	5f 4f       	sbci	r21, 0xFF	; 255
    5538:	2b e8       	ldi	r18, 0x8B	; 139
    553a:	31 e0       	ldi	r19, 0x01	; 1
    553c:	32 83       	std	Z+2, r19	; 0x02
    553e:	21 83       	std	Z+1, r18	; 0x01
    5540:	fa 01       	movw	r30, r20
    5542:	82 83       	std	Z+2, r24	; 0x02
    5544:	93 83       	std	Z+3, r25	; 0x03
    5546:	a4 83       	std	Z+4, r26	; 0x04
    5548:	b5 83       	std	Z+5, r27	; 0x05
    554a:	86 83       	std	Z+6, r24	; 0x06
    554c:	97 83       	std	Z+7, r25	; 0x07
    554e:	a0 87       	std	Z+8, r26	; 0x08
    5550:	b1 87       	std	Z+9, r27	; 0x09
    5552:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
    5556:	2d b7       	in	r18, 0x3d	; 61
    5558:	3e b7       	in	r19, 0x3e	; 62
    555a:	26 5f       	subi	r18, 0xF6	; 246
    555c:	3f 4f       	sbci	r19, 0xFF	; 255
    555e:	0f b6       	in	r0, 0x3f	; 63
    5560:	f8 94       	cli
    5562:	3e bf       	out	0x3e, r19	; 62
    5564:	0f be       	out	0x3f, r0	; 63
    5566:	2d bf       	out	0x3d, r18	; 61
    5568:	7b c9       	rjmp	.-3338   	; 0x4860 <main+0xe2>
				break;

			case 'r' :	/* fr <len> - read file */
				if (!xatoi(&ptr, &p1)) break;
    556a:	ce 01       	movw	r24, r28
    556c:	02 96       	adiw	r24, 0x02	; 2
    556e:	be 01       	movw	r22, r28
    5570:	62 5f       	subi	r22, 0xF2	; 242
    5572:	7f 4f       	sbci	r23, 0xFF	; 255
    5574:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    5578:	88 23       	and	r24, r24
    557a:	09 f4       	brne	.+2      	; 0x557e <main+0xe00>
    557c:	71 c9       	rjmp	.-3358   	; 0x4860 <main+0xe2>
				p2 = 0;
    557e:	1a 8a       	std	Y+18, r1	; 0x12
    5580:	1b 8a       	std	Y+19, r1	; 0x13
    5582:	1c 8a       	std	Y+20, r1	; 0x14
    5584:	1d 8a       	std	Y+21, r1	; 0x15
				Timer = 0;
    5586:	10 92 1b 07 	sts	0x071B, r1
    558a:	10 92 1a 07 	sts	0x071A, r1
				while (p1) {
					if (p1 >= sizeof(Buff))	{ cnt = sizeof(Buff); p1 -= sizeof(Buff); }
    558e:	00 e0       	ldi	r16, 0x00	; 0
    5590:	14 e0       	ldi	r17, 0x04	; 4

			case 'r' :	/* fr <len> - read file */
				if (!xatoi(&ptr, &p1)) break;
				p2 = 0;
				Timer = 0;
				while (p1) {
    5592:	3d c0       	rjmp	.+122    	; 0x560e <main+0xe90>
					if (p1 >= sizeof(Buff))	{ cnt = sizeof(Buff); p1 -= sizeof(Buff); }
    5594:	80 30       	cpi	r24, 0x00	; 0
    5596:	34 e0       	ldi	r19, 0x04	; 4
    5598:	93 07       	cpc	r25, r19
    559a:	30 e0       	ldi	r19, 0x00	; 0
    559c:	a3 07       	cpc	r26, r19
    559e:	30 e0       	ldi	r19, 0x00	; 0
    55a0:	b3 07       	cpc	r27, r19
    55a2:	5c f0       	brlt	.+22     	; 0x55ba <main+0xe3c>
    55a4:	1b 87       	std	Y+11, r17	; 0x0b
    55a6:	0a 87       	std	Y+10, r16	; 0x0a
    55a8:	80 50       	subi	r24, 0x00	; 0
    55aa:	94 40       	sbci	r25, 0x04	; 4
    55ac:	a0 40       	sbci	r26, 0x00	; 0
    55ae:	b0 40       	sbci	r27, 0x00	; 0
    55b0:	8e 87       	std	Y+14, r24	; 0x0e
    55b2:	9f 87       	std	Y+15, r25	; 0x0f
    55b4:	a8 8b       	std	Y+16, r26	; 0x10
    55b6:	b9 8b       	std	Y+17, r27	; 0x11
    55b8:	06 c0       	rjmp	.+12     	; 0x55c6 <main+0xe48>
					else 			{ cnt = (WORD)p1; p1 = 0; }
    55ba:	9b 87       	std	Y+11, r25	; 0x0b
    55bc:	8a 87       	std	Y+10, r24	; 0x0a
    55be:	1e 86       	std	Y+14, r1	; 0x0e
    55c0:	1f 86       	std	Y+15, r1	; 0x0f
    55c2:	18 8a       	std	Y+16, r1	; 0x10
    55c4:	19 8a       	std	Y+17, r1	; 0x11
					res = f_read(&file1, Buff, cnt, &s2);
    55c6:	4a 85       	ldd	r20, Y+10	; 0x0a
    55c8:	5b 85       	ldd	r21, Y+11	; 0x0b
    55ca:	c4 01       	movw	r24, r8
    55cc:	6c e1       	ldi	r22, 0x1C	; 28
    55ce:	77 e0       	ldi	r23, 0x07	; 7
    55d0:	91 01       	movw	r18, r2
    55d2:	0e 94 9b 40 	call	0x8136	; 0x8136 <f_read>
					if (res != FR_OK) { put_rc(res); break; }
    55d6:	88 23       	and	r24, r24
    55d8:	21 f0       	breq	.+8      	; 0x55e2 <main+0xe64>
    55da:	90 e0       	ldi	r25, 0x00	; 0
    55dc:	0e 94 ef 21 	call	0x43de	; 0x43de <put_rc>
    55e0:	1f c0       	rjmp	.+62     	; 0x5620 <main+0xea2>
					p2 += s2;
    55e2:	28 85       	ldd	r18, Y+8	; 0x08
    55e4:	39 85       	ldd	r19, Y+9	; 0x09
    55e6:	a9 01       	movw	r20, r18
    55e8:	60 e0       	ldi	r22, 0x00	; 0
    55ea:	70 e0       	ldi	r23, 0x00	; 0
    55ec:	8a 89       	ldd	r24, Y+18	; 0x12
    55ee:	9b 89       	ldd	r25, Y+19	; 0x13
    55f0:	ac 89       	ldd	r26, Y+20	; 0x14
    55f2:	bd 89       	ldd	r27, Y+21	; 0x15
    55f4:	84 0f       	add	r24, r20
    55f6:	95 1f       	adc	r25, r21
    55f8:	a6 1f       	adc	r26, r22
    55fa:	b7 1f       	adc	r27, r23
    55fc:	8a 8b       	std	Y+18, r24	; 0x12
    55fe:	9b 8b       	std	Y+19, r25	; 0x13
    5600:	ac 8b       	std	Y+20, r26	; 0x14
    5602:	bd 8b       	std	Y+21, r27	; 0x15
					if (cnt != s2) break;
    5604:	8a 85       	ldd	r24, Y+10	; 0x0a
    5606:	9b 85       	ldd	r25, Y+11	; 0x0b
    5608:	82 17       	cp	r24, r18
    560a:	93 07       	cpc	r25, r19
    560c:	49 f4       	brne	.+18     	; 0x5620 <main+0xea2>

			case 'r' :	/* fr <len> - read file */
				if (!xatoi(&ptr, &p1)) break;
				p2 = 0;
				Timer = 0;
				while (p1) {
    560e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5610:	9f 85       	ldd	r25, Y+15	; 0x0f
    5612:	a8 89       	ldd	r26, Y+16	; 0x10
    5614:	b9 89       	ldd	r27, Y+17	; 0x11
    5616:	00 97       	sbiw	r24, 0x00	; 0
    5618:	a1 05       	cpc	r26, r1
    561a:	b1 05       	cpc	r27, r1
    561c:	09 f0       	breq	.+2      	; 0x5620 <main+0xea2>
    561e:	ba cf       	rjmp	.-140    	; 0x5594 <main+0xe16>
					res = f_read(&file1, Buff, cnt, &s2);
					if (res != FR_OK) { put_rc(res); break; }
					p2 += s2;
					if (cnt != s2) break;
				}
				s2 = Timer;
    5620:	00 91 1a 07 	lds	r16, 0x071A
    5624:	10 91 1b 07 	lds	r17, 0x071B
    5628:	19 87       	std	Y+9, r17	; 0x09
    562a:	08 87       	std	Y+8, r16	; 0x08
				xprintf(PSTR("%lu bytes read with %lu bytes/sec.\n"), p2, s2 ? (p2 * 100 / s2) : 0);
    562c:	ca 88       	ldd	r12, Y+18	; 0x12
    562e:	db 88       	ldd	r13, Y+19	; 0x13
    5630:	ec 88       	ldd	r14, Y+20	; 0x14
    5632:	fd 88       	ldd	r15, Y+21	; 0x15
    5634:	01 15       	cp	r16, r1
    5636:	11 05       	cpc	r17, r1
    5638:	71 f0       	breq	.+28     	; 0x5656 <main+0xed8>
    563a:	c7 01       	movw	r24, r14
    563c:	b6 01       	movw	r22, r12
    563e:	24 e6       	ldi	r18, 0x64	; 100
    5640:	30 e0       	ldi	r19, 0x00	; 0
    5642:	40 e0       	ldi	r20, 0x00	; 0
    5644:	50 e0       	ldi	r21, 0x00	; 0
    5646:	0e 94 4f 5c 	call	0xb89e	; 0xb89e <__mulsi3>
    564a:	98 01       	movw	r18, r16
    564c:	40 e0       	ldi	r20, 0x00	; 0
    564e:	50 e0       	ldi	r21, 0x00	; 0
    5650:	0e 94 b7 5c 	call	0xb96e	; 0xb96e <__divmodsi4>
    5654:	04 c0       	rjmp	.+8      	; 0x565e <main+0xee0>
    5656:	20 e0       	ldi	r18, 0x00	; 0
    5658:	30 e0       	ldi	r19, 0x00	; 0
    565a:	40 e0       	ldi	r20, 0x00	; 0
    565c:	50 e0       	ldi	r21, 0x00	; 0
    565e:	8d b7       	in	r24, 0x3d	; 61
    5660:	9e b7       	in	r25, 0x3e	; 62
    5662:	0a 97       	sbiw	r24, 0x0a	; 10
    5664:	0f b6       	in	r0, 0x3f	; 63
    5666:	f8 94       	cli
    5668:	9e bf       	out	0x3e, r25	; 62
    566a:	0f be       	out	0x3f, r0	; 63
    566c:	8d bf       	out	0x3d, r24	; 61
    566e:	ed b7       	in	r30, 0x3d	; 61
    5670:	fe b7       	in	r31, 0x3e	; 62
    5672:	31 96       	adiw	r30, 0x01	; 1
    5674:	87 e6       	ldi	r24, 0x67	; 103
    5676:	91 e0       	ldi	r25, 0x01	; 1
    5678:	f1 c0       	rjmp	.+482    	; 0x585c <main+0x10de>
				break;

			case 'd' :	/* fd <len> - read and dump file from current fp */
				if (!xatoi(&ptr, &p1)) break;
    567a:	ce 01       	movw	r24, r28
    567c:	02 96       	adiw	r24, 0x02	; 2
    567e:	be 01       	movw	r22, r28
    5680:	62 5f       	subi	r22, 0xF2	; 242
    5682:	7f 4f       	sbci	r23, 0xFF	; 255
    5684:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    5688:	88 23       	and	r24, r24
    568a:	09 f4       	brne	.+2      	; 0x568e <main+0xf10>
    568c:	e9 c8       	rjmp	.-3630   	; 0x4860 <main+0xe2>
				ofs = file1.fptr;
    568e:	fe 01       	movw	r30, r28
    5690:	ea 5b       	subi	r30, 0xBA	; 186
    5692:	ff 4f       	sbci	r31, 0xFF	; 255
    5694:	e0 80       	ld	r14, Z
    5696:	f1 80       	ldd	r15, Z+1	; 0x01
    5698:	02 81       	ldd	r16, Z+2	; 0x02
    569a:	13 81       	ldd	r17, Z+3	; 0x03
				while (p1) {
					if (p1 >= 16)	{ cnt = 16; p1 -= 16; }
    569c:	90 e1       	ldi	r25, 0x10	; 16
    569e:	c9 2e       	mov	r12, r25
    56a0:	d1 2c       	mov	r13, r1
					else 			{ cnt = (WORD)p1; p1 = 0; }
					res = f_read(&file1, Buff, cnt, &cnt);
    56a2:	8a e0       	ldi	r24, 0x0A	; 10
    56a4:	a8 2e       	mov	r10, r24
    56a6:	b1 2c       	mov	r11, r1
    56a8:	ac 0e       	add	r10, r28
    56aa:	bd 1e       	adc	r11, r29
				break;

			case 'd' :	/* fd <len> - read and dump file from current fp */
				if (!xatoi(&ptr, &p1)) break;
				ofs = file1.fptr;
				while (p1) {
    56ac:	34 c0       	rjmp	.+104    	; 0x5716 <main+0xf98>
					if (p1 >= 16)	{ cnt = 16; p1 -= 16; }
    56ae:	80 31       	cpi	r24, 0x10	; 16
    56b0:	91 05       	cpc	r25, r1
    56b2:	a1 05       	cpc	r26, r1
    56b4:	b1 05       	cpc	r27, r1
    56b6:	54 f0       	brlt	.+20     	; 0x56cc <main+0xf4e>
    56b8:	db 86       	std	Y+11, r13	; 0x0b
    56ba:	ca 86       	std	Y+10, r12	; 0x0a
    56bc:	40 97       	sbiw	r24, 0x10	; 16
    56be:	a1 09       	sbc	r26, r1
    56c0:	b1 09       	sbc	r27, r1
    56c2:	8e 87       	std	Y+14, r24	; 0x0e
    56c4:	9f 87       	std	Y+15, r25	; 0x0f
    56c6:	a8 8b       	std	Y+16, r26	; 0x10
    56c8:	b9 8b       	std	Y+17, r27	; 0x11
    56ca:	06 c0       	rjmp	.+12     	; 0x56d8 <main+0xf5a>
					else 			{ cnt = (WORD)p1; p1 = 0; }
    56cc:	9b 87       	std	Y+11, r25	; 0x0b
    56ce:	8a 87       	std	Y+10, r24	; 0x0a
    56d0:	1e 86       	std	Y+14, r1	; 0x0e
    56d2:	1f 86       	std	Y+15, r1	; 0x0f
    56d4:	18 8a       	std	Y+16, r1	; 0x10
    56d6:	19 8a       	std	Y+17, r1	; 0x11
					res = f_read(&file1, Buff, cnt, &cnt);
    56d8:	4a 85       	ldd	r20, Y+10	; 0x0a
    56da:	5b 85       	ldd	r21, Y+11	; 0x0b
    56dc:	c4 01       	movw	r24, r8
    56de:	6c e1       	ldi	r22, 0x1C	; 28
    56e0:	77 e0       	ldi	r23, 0x07	; 7
    56e2:	95 01       	movw	r18, r10
    56e4:	0e 94 9b 40 	call	0x8136	; 0x8136 <f_read>
					if (res != FR_OK) { put_rc(res); break; }
    56e8:	88 23       	and	r24, r24
    56ea:	09 f0       	breq	.+2      	; 0x56ee <main+0xf70>
    56ec:	bb c2       	rjmp	.+1398   	; 0x5c64 <main+0x14e6>
					if (!cnt) break;
    56ee:	2a 85       	ldd	r18, Y+10	; 0x0a
    56f0:	3b 85       	ldd	r19, Y+11	; 0x0b
    56f2:	21 15       	cp	r18, r1
    56f4:	31 05       	cpc	r19, r1
    56f6:	09 f4       	brne	.+2      	; 0x56fa <main+0xf7c>
    56f8:	b3 c8       	rjmp	.-3738   	; 0x4860 <main+0xe2>
					put_dump(Buff, ofs, cnt);
    56fa:	8c e1       	ldi	r24, 0x1C	; 28
    56fc:	97 e0       	ldi	r25, 0x07	; 7
    56fe:	b8 01       	movw	r22, r16
    5700:	a7 01       	movw	r20, r14
    5702:	0e 94 20 22 	call	0x4440	; 0x4440 <put_dump>
					ofs += 16;
    5706:	20 e1       	ldi	r18, 0x10	; 16
    5708:	30 e0       	ldi	r19, 0x00	; 0
    570a:	40 e0       	ldi	r20, 0x00	; 0
    570c:	50 e0       	ldi	r21, 0x00	; 0
    570e:	e2 0e       	add	r14, r18
    5710:	f3 1e       	adc	r15, r19
    5712:	04 1f       	adc	r16, r20
    5714:	15 1f       	adc	r17, r21
				break;

			case 'd' :	/* fd <len> - read and dump file from current fp */
				if (!xatoi(&ptr, &p1)) break;
				ofs = file1.fptr;
				while (p1) {
    5716:	8e 85       	ldd	r24, Y+14	; 0x0e
    5718:	9f 85       	ldd	r25, Y+15	; 0x0f
    571a:	a8 89       	ldd	r26, Y+16	; 0x10
    571c:	b9 89       	ldd	r27, Y+17	; 0x11
    571e:	00 97       	sbiw	r24, 0x00	; 0
    5720:	a1 05       	cpc	r26, r1
    5722:	b1 05       	cpc	r27, r1
    5724:	21 f6       	brne	.-120    	; 0x56ae <main+0xf30>
    5726:	9c c8       	rjmp	.-3784   	; 0x4860 <main+0xe2>
					ofs += 16;
				}
				break;

			case 'w' :	/* fw <len> <val> - write file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
    5728:	8e 01       	movw	r16, r28
    572a:	0e 5f       	subi	r16, 0xFE	; 254
    572c:	1f 4f       	sbci	r17, 0xFF	; 255
    572e:	c8 01       	movw	r24, r16
    5730:	be 01       	movw	r22, r28
    5732:	62 5f       	subi	r22, 0xF2	; 242
    5734:	7f 4f       	sbci	r23, 0xFF	; 255
    5736:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    573a:	88 23       	and	r24, r24
    573c:	09 f4       	brne	.+2      	; 0x5740 <main+0xfc2>
    573e:	90 c8       	rjmp	.-3808   	; 0x4860 <main+0xe2>
    5740:	c8 01       	movw	r24, r16
    5742:	be 01       	movw	r22, r28
    5744:	6e 5e       	subi	r22, 0xEE	; 238
    5746:	7f 4f       	sbci	r23, 0xFF	; 255
    5748:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    574c:	88 23       	and	r24, r24
    574e:	09 f4       	brne	.+2      	; 0x5752 <main+0xfd4>
    5750:	87 c8       	rjmp	.-3826   	; 0x4860 <main+0xe2>
				memset(Buff, (BYTE)p2, sizeof(Buff));
    5752:	6a 89       	ldd	r22, Y+18	; 0x12
    5754:	8c e1       	ldi	r24, 0x1C	; 28
    5756:	97 e0       	ldi	r25, 0x07	; 7
    5758:	70 e0       	ldi	r23, 0x00	; 0
    575a:	40 e0       	ldi	r20, 0x00	; 0
    575c:	54 e0       	ldi	r21, 0x04	; 4
    575e:	0e 94 0f 5d 	call	0xba1e	; 0xba1e <memset>
				p2 = 0;
    5762:	1a 8a       	std	Y+18, r1	; 0x12
    5764:	1b 8a       	std	Y+19, r1	; 0x13
    5766:	1c 8a       	std	Y+20, r1	; 0x14
    5768:	1d 8a       	std	Y+21, r1	; 0x15
				Timer = 0;
    576a:	10 92 1b 07 	sts	0x071B, r1
    576e:	10 92 1a 07 	sts	0x071A, r1
				while (p1) {
					if (p1 >= sizeof(Buff))	{ cnt = sizeof(Buff); p1 -= sizeof(Buff); }
    5772:	00 e0       	ldi	r16, 0x00	; 0
    5774:	14 e0       	ldi	r17, 0x04	; 4
			case 'w' :	/* fw <len> <val> - write file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
				memset(Buff, (BYTE)p2, sizeof(Buff));
				p2 = 0;
				Timer = 0;
				while (p1) {
    5776:	3d c0       	rjmp	.+122    	; 0x57f2 <main+0x1074>
					if (p1 >= sizeof(Buff))	{ cnt = sizeof(Buff); p1 -= sizeof(Buff); }
    5778:	80 30       	cpi	r24, 0x00	; 0
    577a:	34 e0       	ldi	r19, 0x04	; 4
    577c:	93 07       	cpc	r25, r19
    577e:	30 e0       	ldi	r19, 0x00	; 0
    5780:	a3 07       	cpc	r26, r19
    5782:	30 e0       	ldi	r19, 0x00	; 0
    5784:	b3 07       	cpc	r27, r19
    5786:	5c f0       	brlt	.+22     	; 0x579e <main+0x1020>
    5788:	1b 87       	std	Y+11, r17	; 0x0b
    578a:	0a 87       	std	Y+10, r16	; 0x0a
    578c:	80 50       	subi	r24, 0x00	; 0
    578e:	94 40       	sbci	r25, 0x04	; 4
    5790:	a0 40       	sbci	r26, 0x00	; 0
    5792:	b0 40       	sbci	r27, 0x00	; 0
    5794:	8e 87       	std	Y+14, r24	; 0x0e
    5796:	9f 87       	std	Y+15, r25	; 0x0f
    5798:	a8 8b       	std	Y+16, r26	; 0x10
    579a:	b9 8b       	std	Y+17, r27	; 0x11
    579c:	06 c0       	rjmp	.+12     	; 0x57aa <main+0x102c>
					else 			{ cnt = (WORD)p1; p1 = 0; }
    579e:	9b 87       	std	Y+11, r25	; 0x0b
    57a0:	8a 87       	std	Y+10, r24	; 0x0a
    57a2:	1e 86       	std	Y+14, r1	; 0x0e
    57a4:	1f 86       	std	Y+15, r1	; 0x0f
    57a6:	18 8a       	std	Y+16, r1	; 0x10
    57a8:	19 8a       	std	Y+17, r1	; 0x11
					res = f_write(&file1, Buff, cnt, &s2);
    57aa:	4a 85       	ldd	r20, Y+10	; 0x0a
    57ac:	5b 85       	ldd	r21, Y+11	; 0x0b
    57ae:	c4 01       	movw	r24, r8
    57b0:	6c e1       	ldi	r22, 0x1C	; 28
    57b2:	77 e0       	ldi	r23, 0x07	; 7
    57b4:	91 01       	movw	r18, r2
    57b6:	0e 94 03 42 	call	0x8406	; 0x8406 <f_write>
					if (res != FR_OK) { put_rc(res); break; }
    57ba:	88 23       	and	r24, r24
    57bc:	21 f0       	breq	.+8      	; 0x57c6 <main+0x1048>
    57be:	90 e0       	ldi	r25, 0x00	; 0
    57c0:	0e 94 ef 21 	call	0x43de	; 0x43de <put_rc>
    57c4:	1f c0       	rjmp	.+62     	; 0x5804 <main+0x1086>
					p2 += s2;
    57c6:	28 85       	ldd	r18, Y+8	; 0x08
    57c8:	39 85       	ldd	r19, Y+9	; 0x09
    57ca:	a9 01       	movw	r20, r18
    57cc:	60 e0       	ldi	r22, 0x00	; 0
    57ce:	70 e0       	ldi	r23, 0x00	; 0
    57d0:	8a 89       	ldd	r24, Y+18	; 0x12
    57d2:	9b 89       	ldd	r25, Y+19	; 0x13
    57d4:	ac 89       	ldd	r26, Y+20	; 0x14
    57d6:	bd 89       	ldd	r27, Y+21	; 0x15
    57d8:	84 0f       	add	r24, r20
    57da:	95 1f       	adc	r25, r21
    57dc:	a6 1f       	adc	r26, r22
    57de:	b7 1f       	adc	r27, r23
    57e0:	8a 8b       	std	Y+18, r24	; 0x12
    57e2:	9b 8b       	std	Y+19, r25	; 0x13
    57e4:	ac 8b       	std	Y+20, r26	; 0x14
    57e6:	bd 8b       	std	Y+21, r27	; 0x15
					if (cnt != s2) break;
    57e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    57ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    57ec:	82 17       	cp	r24, r18
    57ee:	93 07       	cpc	r25, r19
    57f0:	49 f4       	brne	.+18     	; 0x5804 <main+0x1086>
			case 'w' :	/* fw <len> <val> - write file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
				memset(Buff, (BYTE)p2, sizeof(Buff));
				p2 = 0;
				Timer = 0;
				while (p1) {
    57f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    57f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    57f6:	a8 89       	ldd	r26, Y+16	; 0x10
    57f8:	b9 89       	ldd	r27, Y+17	; 0x11
    57fa:	00 97       	sbiw	r24, 0x00	; 0
    57fc:	a1 05       	cpc	r26, r1
    57fe:	b1 05       	cpc	r27, r1
    5800:	09 f0       	breq	.+2      	; 0x5804 <main+0x1086>
    5802:	ba cf       	rjmp	.-140    	; 0x5778 <main+0xffa>
					res = f_write(&file1, Buff, cnt, &s2);
					if (res != FR_OK) { put_rc(res); break; }
					p2 += s2;
					if (cnt != s2) break;
				}
				s2 = Timer;
    5804:	00 91 1a 07 	lds	r16, 0x071A
    5808:	10 91 1b 07 	lds	r17, 0x071B
    580c:	19 87       	std	Y+9, r17	; 0x09
    580e:	08 87       	std	Y+8, r16	; 0x08
				xprintf(PSTR("%lu bytes written with %lu bytes/sec.\n"), p2, s2 ? (p2 * 100 / s2) : 0);
    5810:	ca 88       	ldd	r12, Y+18	; 0x12
    5812:	db 88       	ldd	r13, Y+19	; 0x13
    5814:	ec 88       	ldd	r14, Y+20	; 0x14
    5816:	fd 88       	ldd	r15, Y+21	; 0x15
    5818:	01 15       	cp	r16, r1
    581a:	11 05       	cpc	r17, r1
    581c:	71 f0       	breq	.+28     	; 0x583a <main+0x10bc>
    581e:	c7 01       	movw	r24, r14
    5820:	b6 01       	movw	r22, r12
    5822:	24 e6       	ldi	r18, 0x64	; 100
    5824:	30 e0       	ldi	r19, 0x00	; 0
    5826:	40 e0       	ldi	r20, 0x00	; 0
    5828:	50 e0       	ldi	r21, 0x00	; 0
    582a:	0e 94 4f 5c 	call	0xb89e	; 0xb89e <__mulsi3>
    582e:	98 01       	movw	r18, r16
    5830:	40 e0       	ldi	r20, 0x00	; 0
    5832:	50 e0       	ldi	r21, 0x00	; 0
    5834:	0e 94 b7 5c 	call	0xb96e	; 0xb96e <__divmodsi4>
    5838:	04 c0       	rjmp	.+8      	; 0x5842 <main+0x10c4>
    583a:	20 e0       	ldi	r18, 0x00	; 0
    583c:	30 e0       	ldi	r19, 0x00	; 0
    583e:	40 e0       	ldi	r20, 0x00	; 0
    5840:	50 e0       	ldi	r21, 0x00	; 0
    5842:	8d b7       	in	r24, 0x3d	; 61
    5844:	9e b7       	in	r25, 0x3e	; 62
    5846:	0a 97       	sbiw	r24, 0x0a	; 10
    5848:	0f b6       	in	r0, 0x3f	; 63
    584a:	f8 94       	cli
    584c:	9e bf       	out	0x3e, r25	; 62
    584e:	0f be       	out	0x3f, r0	; 63
    5850:	8d bf       	out	0x3d, r24	; 61
    5852:	ed b7       	in	r30, 0x3d	; 61
    5854:	fe b7       	in	r31, 0x3e	; 62
    5856:	31 96       	adiw	r30, 0x01	; 1
    5858:	80 e4       	ldi	r24, 0x40	; 64
    585a:	91 e0       	ldi	r25, 0x01	; 1
    585c:	ad b7       	in	r26, 0x3d	; 61
    585e:	be b7       	in	r27, 0x3e	; 62
    5860:	12 96       	adiw	r26, 0x02	; 2
    5862:	9c 93       	st	X, r25
    5864:	8e 93       	st	-X, r24
    5866:	11 97       	sbiw	r26, 0x01	; 1
    5868:	c2 82       	std	Z+2, r12	; 0x02
    586a:	d3 82       	std	Z+3, r13	; 0x03
    586c:	e4 82       	std	Z+4, r14	; 0x04
    586e:	f5 82       	std	Z+5, r15	; 0x05
    5870:	26 83       	std	Z+6, r18	; 0x06
    5872:	37 83       	std	Z+7, r19	; 0x07
    5874:	40 87       	std	Z+8, r20	; 0x08
    5876:	51 87       	std	Z+9, r21	; 0x09
    5878:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
				break;
    587c:	ed b7       	in	r30, 0x3d	; 61
    587e:	fe b7       	in	r31, 0x3e	; 62
    5880:	3a 96       	adiw	r30, 0x0a	; 10
    5882:	af c2       	rjmp	.+1374   	; 0x5de2 <main+0x1664>

			case 'v' :	/* fv - Truncate file */
				put_rc(f_truncate(&file1));
    5884:	c4 01       	movw	r24, r8
    5886:	0e 94 2b 49 	call	0x9256	; 0x9256 <f_truncate>
    588a:	42 c2       	rjmp	.+1156   	; 0x5d10 <main+0x1592>
				break;

			case 'n' :	/* fn <old_name> <new_name> - Change file/dir name */
				while (*ptr == ' ') ptr++;
    588c:	01 96       	adiw	r24, 0x01	; 1
    588e:	9b 83       	std	Y+3, r25	; 0x03
    5890:	8a 83       	std	Y+2, r24	; 0x02
    5892:	8a 81       	ldd	r24, Y+2	; 0x02
    5894:	9b 81       	ldd	r25, Y+3	; 0x03
    5896:	dc 01       	movw	r26, r24
    5898:	2c 91       	ld	r18, X
    589a:	20 32       	cpi	r18, 0x20	; 32
    589c:	b9 f3       	breq	.-18     	; 0x588c <main+0x110e>
				ptr2 = strchr(ptr, ' ');
    589e:	60 e2       	ldi	r22, 0x20	; 32
    58a0:	70 e0       	ldi	r23, 0x00	; 0
    58a2:	0e 94 16 5d 	call	0xba2c	; 0xba2c <strchr>
				if (!ptr2) break;
    58a6:	00 97       	sbiw	r24, 0x00	; 0
    58a8:	11 f4       	brne	.+4      	; 0x58ae <main+0x1130>
    58aa:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>
				*ptr2++ = 0;
    58ae:	fc 01       	movw	r30, r24
    58b0:	11 92       	st	Z+, r1
				while (*ptr2 == ' ') ptr2++;
    58b2:	bf 01       	movw	r22, r30
    58b4:	81 91       	ld	r24, Z+
    58b6:	80 32       	cpi	r24, 0x20	; 32
    58b8:	e1 f3       	breq	.-8      	; 0x58b2 <main+0x1134>
				put_rc(f_rename(ptr, ptr2));
    58ba:	8a 81       	ldd	r24, Y+2	; 0x02
    58bc:	9b 81       	ldd	r25, Y+3	; 0x03
    58be:	0e 94 3b 4c 	call	0x9876	; 0x9876 <f_rename>
    58c2:	26 c2       	rjmp	.+1100   	; 0x5d10 <main+0x1592>
				break;

			case 'u' :	/* fu <name> - Unlink a file or dir */
				while (*ptr == ' ') ptr++;
    58c4:	01 96       	adiw	r24, 0x01	; 1
    58c6:	9b 83       	std	Y+3, r25	; 0x03
    58c8:	8a 83       	std	Y+2, r24	; 0x02
    58ca:	8a 81       	ldd	r24, Y+2	; 0x02
    58cc:	9b 81       	ldd	r25, Y+3	; 0x03
    58ce:	fc 01       	movw	r30, r24
    58d0:	20 81       	ld	r18, Z
    58d2:	20 32       	cpi	r18, 0x20	; 32
    58d4:	b9 f3       	breq	.-18     	; 0x58c4 <main+0x1146>
				put_rc(f_unlink(ptr));
    58d6:	0e 94 ba 49 	call	0x9374	; 0x9374 <f_unlink>
    58da:	1a c2       	rjmp	.+1076   	; 0x5d10 <main+0x1592>
				break;

			case 'k' :	/* fk <name> - Create a directory */
				while (*ptr == ' ') ptr++;
    58dc:	01 96       	adiw	r24, 0x01	; 1
    58de:	9b 83       	std	Y+3, r25	; 0x03
    58e0:	8a 83       	std	Y+2, r24	; 0x02
    58e2:	8a 81       	ldd	r24, Y+2	; 0x02
    58e4:	9b 81       	ldd	r25, Y+3	; 0x03
    58e6:	dc 01       	movw	r26, r24
    58e8:	2c 91       	ld	r18, X
    58ea:	20 32       	cpi	r18, 0x20	; 32
    58ec:	b9 f3       	breq	.-18     	; 0x58dc <main+0x115e>
				put_rc(f_mkdir(ptr));
    58ee:	0e 94 6d 4a 	call	0x94da	; 0x94da <f_mkdir>
    58f2:	0e c2       	rjmp	.+1052   	; 0x5d10 <main+0x1592>
				break;

			case 'a' :	/* fa <atrr> <mask> <name> - Change file/dir attribute */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
    58f4:	8e 01       	movw	r16, r28
    58f6:	0e 5f       	subi	r16, 0xFE	; 254
    58f8:	1f 4f       	sbci	r17, 0xFF	; 255
    58fa:	c8 01       	movw	r24, r16
    58fc:	be 01       	movw	r22, r28
    58fe:	62 5f       	subi	r22, 0xF2	; 242
    5900:	7f 4f       	sbci	r23, 0xFF	; 255
    5902:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    5906:	88 23       	and	r24, r24
    5908:	11 f4       	brne	.+4      	; 0x590e <main+0x1190>
    590a:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>
    590e:	c8 01       	movw	r24, r16
    5910:	be 01       	movw	r22, r28
    5912:	6e 5e       	subi	r22, 0xEE	; 238
    5914:	7f 4f       	sbci	r23, 0xFF	; 255
    5916:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    591a:	88 23       	and	r24, r24
    591c:	11 f4       	brne	.+4      	; 0x5922 <main+0x11a4>
    591e:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>
    5922:	03 c0       	rjmp	.+6      	; 0x592a <main+0x11ac>
				while (*ptr == ' ') ptr++;
    5924:	01 96       	adiw	r24, 0x01	; 1
    5926:	9b 83       	std	Y+3, r25	; 0x03
    5928:	8a 83       	std	Y+2, r24	; 0x02
    592a:	8a 81       	ldd	r24, Y+2	; 0x02
    592c:	9b 81       	ldd	r25, Y+3	; 0x03
    592e:	fc 01       	movw	r30, r24
    5930:	20 81       	ld	r18, Z
    5932:	20 32       	cpi	r18, 0x20	; 32
    5934:	b9 f3       	breq	.-18     	; 0x5924 <main+0x11a6>
				put_rc(f_chmod(ptr, p1, p2));
    5936:	6e 85       	ldd	r22, Y+14	; 0x0e
    5938:	4a 89       	ldd	r20, Y+18	; 0x12
    593a:	0e 94 a3 4b 	call	0x9746	; 0x9746 <f_chmod>
    593e:	e8 c1       	rjmp	.+976    	; 0x5d10 <main+0x1592>
				break;

			case 't' :	/* ft <year> <month> <day> <hour> <min> <sec> <name> */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
    5940:	8e 01       	movw	r16, r28
    5942:	0e 5f       	subi	r16, 0xFE	; 254
    5944:	1f 4f       	sbci	r17, 0xFF	; 255
    5946:	be e0       	ldi	r27, 0x0E	; 14
    5948:	eb 2e       	mov	r14, r27
    594a:	f1 2c       	mov	r15, r1
    594c:	ec 0e       	add	r14, r28
    594e:	fd 1e       	adc	r15, r29
    5950:	c8 01       	movw	r24, r16
    5952:	b7 01       	movw	r22, r14
    5954:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    5958:	88 23       	and	r24, r24
    595a:	11 f4       	brne	.+4      	; 0x5960 <main+0x11e2>
    595c:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>
    5960:	a2 e1       	ldi	r26, 0x12	; 18
    5962:	ca 2e       	mov	r12, r26
    5964:	d1 2c       	mov	r13, r1
    5966:	cc 0e       	add	r12, r28
    5968:	dd 1e       	adc	r13, r29
    596a:	c8 01       	movw	r24, r16
    596c:	b6 01       	movw	r22, r12
    596e:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    5972:	88 23       	and	r24, r24
    5974:	11 f4       	brne	.+4      	; 0x597a <main+0x11fc>
    5976:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>
    597a:	f6 e1       	ldi	r31, 0x16	; 22
    597c:	af 2e       	mov	r10, r31
    597e:	b1 2c       	mov	r11, r1
    5980:	ac 0e       	add	r10, r28
    5982:	bd 1e       	adc	r11, r29
    5984:	c8 01       	movw	r24, r16
    5986:	b5 01       	movw	r22, r10
    5988:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    598c:	88 23       	and	r24, r24
    598e:	11 f4       	brne	.+4      	; 0x5994 <main+0x1216>
    5990:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>
				Finfo.fdate = ((p1 - 1980) << 9) | ((p2 & 15) << 5) | (p3 & 31);
    5994:	2e 85       	ldd	r18, Y+14	; 0x0e
    5996:	3f 85       	ldd	r19, Y+15	; 0x0f
    5998:	48 89       	ldd	r20, Y+16	; 0x10
    599a:	59 89       	ldd	r21, Y+17	; 0x11
    599c:	2c 5b       	subi	r18, 0xBC	; 188
    599e:	37 40       	sbci	r19, 0x07	; 7
    59a0:	40 40       	sbci	r20, 0x00	; 0
    59a2:	50 40       	sbci	r21, 0x00	; 0
    59a4:	e9 e0       	ldi	r30, 0x09	; 9
    59a6:	22 0f       	add	r18, r18
    59a8:	33 1f       	adc	r19, r19
    59aa:	44 1f       	adc	r20, r20
    59ac:	55 1f       	adc	r21, r21
    59ae:	ea 95       	dec	r30
    59b0:	d1 f7       	brne	.-12     	; 0x59a6 <main+0x1228>
    59b2:	8a 89       	ldd	r24, Y+18	; 0x12
    59b4:	9b 89       	ldd	r25, Y+19	; 0x13
    59b6:	ac 89       	ldd	r26, Y+20	; 0x14
    59b8:	bd 89       	ldd	r27, Y+21	; 0x15
    59ba:	8f 70       	andi	r24, 0x0F	; 15
    59bc:	90 70       	andi	r25, 0x00	; 0
    59be:	a0 70       	andi	r26, 0x00	; 0
    59c0:	b0 70       	andi	r27, 0x00	; 0
    59c2:	75 e0       	ldi	r23, 0x05	; 5
    59c4:	88 0f       	add	r24, r24
    59c6:	99 1f       	adc	r25, r25
    59c8:	aa 1f       	adc	r26, r26
    59ca:	bb 1f       	adc	r27, r27
    59cc:	7a 95       	dec	r23
    59ce:	d1 f7       	brne	.-12     	; 0x59c4 <main+0x1246>
    59d0:	82 2b       	or	r24, r18
    59d2:	93 2b       	or	r25, r19
    59d4:	2e 89       	ldd	r18, Y+22	; 0x16
    59d6:	3f 89       	ldd	r19, Y+23	; 0x17
    59d8:	2f 71       	andi	r18, 0x1F	; 31
    59da:	30 70       	andi	r19, 0x00	; 0
    59dc:	82 2b       	or	r24, r18
    59de:	93 2b       	or	r25, r19
    59e0:	90 93 01 07 	sts	0x0701, r25
    59e4:	80 93 00 07 	sts	0x0700, r24
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
    59e8:	c8 01       	movw	r24, r16
    59ea:	b7 01       	movw	r22, r14
    59ec:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    59f0:	88 23       	and	r24, r24
    59f2:	11 f4       	brne	.+4      	; 0x59f8 <main+0x127a>
    59f4:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>
    59f8:	c8 01       	movw	r24, r16
    59fa:	b6 01       	movw	r22, r12
    59fc:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    5a00:	88 23       	and	r24, r24
    5a02:	11 f4       	brne	.+4      	; 0x5a08 <main+0x128a>
    5a04:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>
    5a08:	c8 01       	movw	r24, r16
    5a0a:	b5 01       	movw	r22, r10
    5a0c:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    5a10:	88 23       	and	r24, r24
    5a12:	11 f4       	brne	.+4      	; 0x5a18 <main+0x129a>
    5a14:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>
				Finfo.ftime = ((p1 & 31) << 11) | ((p2 & 63) << 5) | ((p3 >> 1) & 31);
    5a18:	2a 89       	ldd	r18, Y+18	; 0x12
    5a1a:	3b 89       	ldd	r19, Y+19	; 0x13
    5a1c:	4c 89       	ldd	r20, Y+20	; 0x14
    5a1e:	5d 89       	ldd	r21, Y+21	; 0x15
    5a20:	2f 73       	andi	r18, 0x3F	; 63
    5a22:	30 70       	andi	r19, 0x00	; 0
    5a24:	40 70       	andi	r20, 0x00	; 0
    5a26:	50 70       	andi	r21, 0x00	; 0
    5a28:	65 e0       	ldi	r22, 0x05	; 5
    5a2a:	22 0f       	add	r18, r18
    5a2c:	33 1f       	adc	r19, r19
    5a2e:	44 1f       	adc	r20, r20
    5a30:	55 1f       	adc	r21, r21
    5a32:	6a 95       	dec	r22
    5a34:	d1 f7       	brne	.-12     	; 0x5a2a <main+0x12ac>
    5a36:	8e 89       	ldd	r24, Y+22	; 0x16
    5a38:	9f 89       	ldd	r25, Y+23	; 0x17
    5a3a:	a8 8d       	ldd	r26, Y+24	; 0x18
    5a3c:	b9 8d       	ldd	r27, Y+25	; 0x19
    5a3e:	b5 95       	asr	r27
    5a40:	a7 95       	ror	r26
    5a42:	97 95       	ror	r25
    5a44:	87 95       	ror	r24
    5a46:	bc 01       	movw	r22, r24
    5a48:	6f 71       	andi	r22, 0x1F	; 31
    5a4a:	70 70       	andi	r23, 0x00	; 0
    5a4c:	62 2b       	or	r22, r18
    5a4e:	73 2b       	or	r23, r19
    5a50:	8e 85       	ldd	r24, Y+14	; 0x0e
    5a52:	9f 85       	ldd	r25, Y+15	; 0x0f
    5a54:	a8 89       	ldd	r26, Y+16	; 0x10
    5a56:	b9 89       	ldd	r27, Y+17	; 0x11
    5a58:	0b e0       	ldi	r16, 0x0B	; 11
    5a5a:	88 0f       	add	r24, r24
    5a5c:	99 1f       	adc	r25, r25
    5a5e:	aa 1f       	adc	r26, r26
    5a60:	bb 1f       	adc	r27, r27
    5a62:	0a 95       	dec	r16
    5a64:	d1 f7       	brne	.-12     	; 0x5a5a <main+0x12dc>
    5a66:	68 2b       	or	r22, r24
    5a68:	79 2b       	or	r23, r25
    5a6a:	70 93 03 07 	sts	0x0703, r23
    5a6e:	60 93 02 07 	sts	0x0702, r22
				while (*ptr == ' ') ptr++;
    5a72:	03 c0       	rjmp	.+6      	; 0x5a7a <main+0x12fc>
    5a74:	01 96       	adiw	r24, 0x01	; 1
    5a76:	9b 83       	std	Y+3, r25	; 0x03
    5a78:	8a 83       	std	Y+2, r24	; 0x02
    5a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    5a7c:	9b 81       	ldd	r25, Y+3	; 0x03
    5a7e:	dc 01       	movw	r26, r24
    5a80:	2c 91       	ld	r18, X
    5a82:	20 32       	cpi	r18, 0x20	; 32
    5a84:	b9 f3       	breq	.-18     	; 0x5a74 <main+0x12f6>
				put_rc(f_utime(ptr, &Finfo));
    5a86:	6c ef       	ldi	r22, 0xFC	; 252
    5a88:	76 e0       	ldi	r23, 0x06	; 6
    5a8a:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <f_utime>
    5a8e:	40 c1       	rjmp	.+640    	; 0x5d10 <main+0x1592>
				break;

			case 'x' : /* fx <src_name> <dst_name> - Copy file */
				while (*ptr == ' ') ptr++;
    5a90:	01 96       	adiw	r24, 0x01	; 1
    5a92:	9b 83       	std	Y+3, r25	; 0x03
    5a94:	8a 83       	std	Y+2, r24	; 0x02
    5a96:	8a 81       	ldd	r24, Y+2	; 0x02
    5a98:	9b 81       	ldd	r25, Y+3	; 0x03
    5a9a:	fc 01       	movw	r30, r24
    5a9c:	20 81       	ld	r18, Z
    5a9e:	20 32       	cpi	r18, 0x20	; 32
    5aa0:	b9 f3       	breq	.-18     	; 0x5a90 <main+0x1312>
				ptr2 = strchr(ptr, ' ');
    5aa2:	60 e2       	ldi	r22, 0x20	; 32
    5aa4:	70 e0       	ldi	r23, 0x00	; 0
    5aa6:	0e 94 16 5d 	call	0xba2c	; 0xba2c <strchr>
				if (!ptr2) break;
    5aaa:	00 97       	sbiw	r24, 0x00	; 0
    5aac:	11 f4       	brne	.+4      	; 0x5ab2 <main+0x1334>
    5aae:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>
				*ptr2++ = 0;
    5ab2:	fc 01       	movw	r30, r24
    5ab4:	11 92       	st	Z+, r1
				while (*ptr2 == ' ') ptr2++;
    5ab6:	0e 2f       	mov	r16, r30
    5ab8:	ef 2e       	mov	r14, r31
    5aba:	81 91       	ld	r24, Z+
    5abc:	80 32       	cpi	r24, 0x20	; 32
    5abe:	d9 f3       	breq	.-10     	; 0x5ab6 <main+0x1338>
				xprintf(PSTR("Opening \"%s\""), ptr);
    5ac0:	00 d0       	rcall	.+0      	; 0x5ac2 <main+0x1344>
    5ac2:	00 d0       	rcall	.+0      	; 0x5ac4 <main+0x1346>
    5ac4:	e3 e3       	ldi	r30, 0x33	; 51
    5ac6:	f1 e0       	ldi	r31, 0x01	; 1
    5ac8:	ad b7       	in	r26, 0x3d	; 61
    5aca:	be b7       	in	r27, 0x3e	; 62
    5acc:	12 96       	adiw	r26, 0x02	; 2
    5ace:	fc 93       	st	X, r31
    5ad0:	ee 93       	st	-X, r30
    5ad2:	11 97       	sbiw	r26, 0x01	; 1
    5ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ad6:	9b 81       	ldd	r25, Y+3	; 0x03
    5ad8:	14 96       	adiw	r26, 0x04	; 4
    5ada:	9c 93       	st	X, r25
    5adc:	8e 93       	st	-X, r24
    5ade:	13 97       	sbiw	r26, 0x03	; 3
    5ae0:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
				res = f_open(&file1, ptr, FA_OPEN_EXISTING | FA_READ);
    5ae4:	0f 90       	pop	r0
    5ae6:	0f 90       	pop	r0
    5ae8:	0f 90       	pop	r0
    5aea:	0f 90       	pop	r0
    5aec:	6a 81       	ldd	r22, Y+2	; 0x02
    5aee:	7b 81       	ldd	r23, Y+3	; 0x03
    5af0:	c4 01       	movw	r24, r8
    5af2:	41 e0       	ldi	r20, 0x01	; 1
    5af4:	0e 94 64 3f 	call	0x7ec8	; 0x7ec8 <f_open>
				if (res) {
    5af8:	88 23       	and	r24, r24
    5afa:	09 f0       	breq	.+2      	; 0x5afe <main+0x1380>
    5afc:	b3 c0       	rjmp	.+358    	; 0x5c64 <main+0x14e6>
					put_rc(res);
					break;
				}
				xprintf(PSTR("\nCreating \"%s\""), ptr2);
    5afe:	00 d0       	rcall	.+0      	; 0x5b00 <main+0x1382>
    5b00:	00 d0       	rcall	.+0      	; 0x5b02 <main+0x1384>
    5b02:	ed b7       	in	r30, 0x3d	; 61
    5b04:	fe b7       	in	r31, 0x3e	; 62
    5b06:	31 96       	adiw	r30, 0x01	; 1
    5b08:	14 e2       	ldi	r17, 0x24	; 36
    5b0a:	c1 2e       	mov	r12, r17
    5b0c:	11 e0       	ldi	r17, 0x01	; 1
    5b0e:	d1 2e       	mov	r13, r17
    5b10:	ad b7       	in	r26, 0x3d	; 61
    5b12:	be b7       	in	r27, 0x3e	; 62
    5b14:	12 96       	adiw	r26, 0x02	; 2
    5b16:	dc 92       	st	X, r13
    5b18:	ce 92       	st	-X, r12
    5b1a:	11 97       	sbiw	r26, 0x01	; 1
    5b1c:	02 83       	std	Z+2, r16	; 0x02
    5b1e:	e3 82       	std	Z+3, r14	; 0x03
    5b20:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
				res = f_open(&file2, ptr2, FA_CREATE_ALWAYS | FA_WRITE);
    5b24:	0f 90       	pop	r0
    5b26:	0f 90       	pop	r0
    5b28:	0f 90       	pop	r0
    5b2a:	0f 90       	pop	r0
    5b2c:	c2 01       	movw	r24, r4
    5b2e:	60 2f       	mov	r22, r16
    5b30:	7e 2d       	mov	r23, r14
    5b32:	4a e0       	ldi	r20, 0x0A	; 10
    5b34:	0e 94 64 3f 	call	0x7ec8	; 0x7ec8 <f_open>
				if (res) {
    5b38:	88 23       	and	r24, r24
    5b3a:	29 f0       	breq	.+10     	; 0x5b46 <main+0x13c8>
					put_rc(res);
    5b3c:	90 e0       	ldi	r25, 0x00	; 0
    5b3e:	0e 94 ef 21 	call	0x43de	; 0x43de <put_rc>
					f_close(&file1);
    5b42:	c4 01       	movw	r24, r8
    5b44:	68 c0       	rjmp	.+208    	; 0x5c16 <main+0x1498>
					break;
				}
				xprintf(PSTR("\nCopying..."));
    5b46:	00 d0       	rcall	.+0      	; 0x5b48 <main+0x13ca>
    5b48:	e8 e1       	ldi	r30, 0x18	; 24
    5b4a:	f1 e0       	ldi	r31, 0x01	; 1
    5b4c:	ad b7       	in	r26, 0x3d	; 61
    5b4e:	be b7       	in	r27, 0x3e	; 62
    5b50:	12 96       	adiw	r26, 0x02	; 2
    5b52:	fc 93       	st	X, r31
    5b54:	ee 93       	st	-X, r30
    5b56:	11 97       	sbiw	r26, 0x01	; 1
    5b58:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
				p1 = 0;
    5b5c:	1e 86       	std	Y+14, r1	; 0x0e
    5b5e:	1f 86       	std	Y+15, r1	; 0x0f
    5b60:	18 8a       	std	Y+16, r1	; 0x10
    5b62:	19 8a       	std	Y+17, r1	; 0x11
    5b64:	0f 90       	pop	r0
    5b66:	0f 90       	pop	r0
				for (;;) {
					res = f_read(&file1, Buff, sizeof(Buff), &s1);
    5b68:	c4 01       	movw	r24, r8
    5b6a:	6c e1       	ldi	r22, 0x1C	; 28
    5b6c:	77 e0       	ldi	r23, 0x07	; 7
    5b6e:	40 e0       	ldi	r20, 0x00	; 0
    5b70:	54 e0       	ldi	r21, 0x04	; 4
    5b72:	9e 01       	movw	r18, r28
    5b74:	2a 5f       	subi	r18, 0xFA	; 250
    5b76:	3f 4f       	sbci	r19, 0xFF	; 255
    5b78:	0e 94 9b 40 	call	0x8136	; 0x8136 <f_read>
					if (res || s1 == 0) break;   /* error or eof */
    5b7c:	88 23       	and	r24, r24
    5b7e:	21 f5       	brne	.+72     	; 0x5bc8 <main+0x144a>
    5b80:	4e 81       	ldd	r20, Y+6	; 0x06
    5b82:	5f 81       	ldd	r21, Y+7	; 0x07
    5b84:	41 15       	cp	r20, r1
    5b86:	51 05       	cpc	r21, r1
    5b88:	11 f1       	breq	.+68     	; 0x5bce <main+0x1450>
					res = f_write(&file2, Buff, s1, &s2);
    5b8a:	c2 01       	movw	r24, r4
    5b8c:	6c e1       	ldi	r22, 0x1C	; 28
    5b8e:	77 e0       	ldi	r23, 0x07	; 7
    5b90:	91 01       	movw	r18, r2
    5b92:	0e 94 03 42 	call	0x8406	; 0x8406 <f_write>
					p1 += s2;
    5b96:	68 85       	ldd	r22, Y+8	; 0x08
    5b98:	79 85       	ldd	r23, Y+9	; 0x09
    5b9a:	7b 01       	movw	r14, r22
    5b9c:	00 e0       	ldi	r16, 0x00	; 0
    5b9e:	10 e0       	ldi	r17, 0x00	; 0
    5ba0:	2e 85       	ldd	r18, Y+14	; 0x0e
    5ba2:	3f 85       	ldd	r19, Y+15	; 0x0f
    5ba4:	48 89       	ldd	r20, Y+16	; 0x10
    5ba6:	59 89       	ldd	r21, Y+17	; 0x11
    5ba8:	2e 0d       	add	r18, r14
    5baa:	3f 1d       	adc	r19, r15
    5bac:	40 1f       	adc	r20, r16
    5bae:	51 1f       	adc	r21, r17
    5bb0:	2e 87       	std	Y+14, r18	; 0x0e
    5bb2:	3f 87       	std	Y+15, r19	; 0x0f
    5bb4:	48 8b       	std	Y+16, r20	; 0x10
    5bb6:	59 8b       	std	Y+17, r21	; 0x11
					if (res || s2 < s1) break;   /* error or disk full */
    5bb8:	88 23       	and	r24, r24
    5bba:	31 f4       	brne	.+12     	; 0x5bc8 <main+0x144a>
    5bbc:	8e 81       	ldd	r24, Y+6	; 0x06
    5bbe:	9f 81       	ldd	r25, Y+7	; 0x07
    5bc0:	68 17       	cp	r22, r24
    5bc2:	79 07       	cpc	r23, r25
    5bc4:	88 f6       	brcc	.-94     	; 0x5b68 <main+0x13ea>
    5bc6:	03 c0       	rjmp	.+6      	; 0x5bce <main+0x1450>
				}
				if (res) put_rc(res);
    5bc8:	90 e0       	ldi	r25, 0x00	; 0
    5bca:	0e 94 ef 21 	call	0x43de	; 0x43de <put_rc>
				xprintf(PSTR("\n%lu bytes copied.\n"), p1);
    5bce:	00 d0       	rcall	.+0      	; 0x5bd0 <main+0x1452>
    5bd0:	00 d0       	rcall	.+0      	; 0x5bd2 <main+0x1454>
    5bd2:	00 d0       	rcall	.+0      	; 0x5bd4 <main+0x1456>
    5bd4:	e4 e0       	ldi	r30, 0x04	; 4
    5bd6:	f1 e0       	ldi	r31, 0x01	; 1
    5bd8:	ad b7       	in	r26, 0x3d	; 61
    5bda:	be b7       	in	r27, 0x3e	; 62
    5bdc:	12 96       	adiw	r26, 0x02	; 2
    5bde:	fc 93       	st	X, r31
    5be0:	ee 93       	st	-X, r30
    5be2:	11 97       	sbiw	r26, 0x01	; 1
    5be4:	8e 85       	ldd	r24, Y+14	; 0x0e
    5be6:	9f 85       	ldd	r25, Y+15	; 0x0f
    5be8:	a8 89       	ldd	r26, Y+16	; 0x10
    5bea:	b9 89       	ldd	r27, Y+17	; 0x11
    5bec:	ed b7       	in	r30, 0x3d	; 61
    5bee:	fe b7       	in	r31, 0x3e	; 62
    5bf0:	83 83       	std	Z+3, r24	; 0x03
    5bf2:	94 83       	std	Z+4, r25	; 0x04
    5bf4:	a5 83       	std	Z+5, r26	; 0x05
    5bf6:	b6 83       	std	Z+6, r27	; 0x06
    5bf8:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
				f_close(&file1);
    5bfc:	2d b7       	in	r18, 0x3d	; 61
    5bfe:	3e b7       	in	r19, 0x3e	; 62
    5c00:	2a 5f       	subi	r18, 0xFA	; 250
    5c02:	3f 4f       	sbci	r19, 0xFF	; 255
    5c04:	0f b6       	in	r0, 0x3f	; 63
    5c06:	f8 94       	cli
    5c08:	3e bf       	out	0x3e, r19	; 62
    5c0a:	0f be       	out	0x3f, r0	; 63
    5c0c:	2d bf       	out	0x3d, r18	; 61
    5c0e:	c4 01       	movw	r24, r8
    5c10:	0e 94 35 44 	call	0x886a	; 0x886a <f_close>
				f_close(&file2);
    5c14:	c2 01       	movw	r24, r4
    5c16:	0e 94 35 44 	call	0x886a	; 0x886a <f_close>
				break;
    5c1a:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>
#if _FS_RPATH
			case 'g' :	/* fg <path> - Change current directory */
				while (*ptr == ' ') ptr++;
    5c1e:	01 96       	adiw	r24, 0x01	; 1
    5c20:	9b 83       	std	Y+3, r25	; 0x03
    5c22:	8a 83       	std	Y+2, r24	; 0x02
    5c24:	8a 81       	ldd	r24, Y+2	; 0x02
    5c26:	9b 81       	ldd	r25, Y+3	; 0x03
    5c28:	dc 01       	movw	r26, r24
    5c2a:	2c 91       	ld	r18, X
    5c2c:	20 32       	cpi	r18, 0x20	; 32
    5c2e:	b9 f3       	breq	.-18     	; 0x5c1e <main+0x14a0>
				put_rc(f_chdir(ptr));
    5c30:	0e 94 4e 44 	call	0x889c	; 0x889c <f_chdir>
    5c34:	6d c0       	rjmp	.+218    	; 0x5d10 <main+0x1592>
				break;

			case 'j' :	/* fj <drive#> - Change current drive */
				if (xatoi(&ptr, &p1)) {
    5c36:	ce 01       	movw	r24, r28
    5c38:	02 96       	adiw	r24, 0x02	; 2
    5c3a:	be 01       	movw	r22, r28
    5c3c:	62 5f       	subi	r22, 0xF2	; 242
    5c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    5c40:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    5c44:	88 23       	and	r24, r24
    5c46:	11 f4       	brne	.+4      	; 0x5c4c <main+0x14ce>
    5c48:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>
					put_rc(f_chdrive((BYTE)p1));
    5c4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    5c4e:	0e 94 43 44 	call	0x8886	; 0x8886 <f_chdrive>
    5c52:	5e c0       	rjmp	.+188    	; 0x5d10 <main+0x1592>
				}
				break;
#if _FS_RPATH >= 2
			case 'q' :	/* fq - Show current dir path */
				res = f_getcwd(Line, sizeof(Line));
    5c54:	81 ea       	ldi	r24, 0xA1	; 161
    5c56:	9b e0       	ldi	r25, 0x0B	; 11
    5c58:	60 e8       	ldi	r22, 0x80	; 128
    5c5a:	70 e0       	ldi	r23, 0x00	; 0
    5c5c:	0e 94 a9 44 	call	0x8952	; 0x8952 <f_getcwd>
				if (res)
    5c60:	88 23       	and	r24, r24
    5c62:	11 f0       	breq	.+4      	; 0x5c68 <main+0x14ea>
					put_rc(res);
    5c64:	90 e0       	ldi	r25, 0x00	; 0
    5c66:	54 c0       	rjmp	.+168    	; 0x5d10 <main+0x1592>
				else
					xprintf("%s\n", Line);
    5c68:	00 d0       	rcall	.+0      	; 0x5c6a <main+0x14ec>
    5c6a:	00 d0       	rcall	.+0      	; 0x5c6c <main+0x14ee>
    5c6c:	80 e0       	ldi	r24, 0x00	; 0
    5c6e:	91 e0       	ldi	r25, 0x01	; 1
    5c70:	ed b7       	in	r30, 0x3d	; 61
    5c72:	fe b7       	in	r31, 0x3e	; 62
    5c74:	92 83       	std	Z+2, r25	; 0x02
    5c76:	81 83       	std	Z+1, r24	; 0x01
    5c78:	74 82       	std	Z+4, r7	; 0x04
    5c7a:	63 82       	std	Z+3, r6	; 0x03
    5c7c:	0c 94 f6 24 	jmp	0x49ec	; 0x49ec <main+0x26e>
				break;
#endif
#endif
#if _USE_MKFS
			case 'm' :	/* fm <logi drv#> <part type> <bytes/clust> - Create file system */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
    5c80:	8e 01       	movw	r16, r28
    5c82:	0e 5f       	subi	r16, 0xFE	; 254
    5c84:	1f 4f       	sbci	r17, 0xFF	; 255
    5c86:	c8 01       	movw	r24, r16
    5c88:	be 01       	movw	r22, r28
    5c8a:	62 5f       	subi	r22, 0xF2	; 242
    5c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    5c8e:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    5c92:	88 23       	and	r24, r24
    5c94:	11 f4       	brne	.+4      	; 0x5c9a <main+0x151c>
    5c96:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>
    5c9a:	c8 01       	movw	r24, r16
    5c9c:	be 01       	movw	r22, r28
    5c9e:	6e 5e       	subi	r22, 0xEE	; 238
    5ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ca2:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    5ca6:	88 23       	and	r24, r24
    5ca8:	11 f4       	brne	.+4      	; 0x5cae <main+0x1530>
    5caa:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>
    5cae:	c8 01       	movw	r24, r16
    5cb0:	be 01       	movw	r22, r28
    5cb2:	6a 5e       	subi	r22, 0xEA	; 234
    5cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    5cb6:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    5cba:	88 23       	and	r24, r24
    5cbc:	11 f4       	brne	.+4      	; 0x5cc2 <main+0x1544>
    5cbe:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>
				xprintf(PSTR("The drive %u will be formatted. Are you sure? (Y/n)="), (WORD)p1);
    5cc2:	00 d0       	rcall	.+0      	; 0x5cc4 <main+0x1546>
    5cc4:	00 d0       	rcall	.+0      	; 0x5cc6 <main+0x1548>
    5cc6:	8f ec       	ldi	r24, 0xCF	; 207
    5cc8:	90 e0       	ldi	r25, 0x00	; 0
    5cca:	ad b7       	in	r26, 0x3d	; 61
    5ccc:	be b7       	in	r27, 0x3e	; 62
    5cce:	12 96       	adiw	r26, 0x02	; 2
    5cd0:	9c 93       	st	X, r25
    5cd2:	8e 93       	st	-X, r24
    5cd4:	11 97       	sbiw	r26, 0x01	; 1
    5cd6:	8e 85       	ldd	r24, Y+14	; 0x0e
    5cd8:	9f 85       	ldd	r25, Y+15	; 0x0f
    5cda:	14 96       	adiw	r26, 0x04	; 4
    5cdc:	9c 93       	st	X, r25
    5cde:	8e 93       	st	-X, r24
    5ce0:	13 97       	sbiw	r26, 0x03	; 3
    5ce2:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
				get_line(ptr, sizeof(Line));
    5ce6:	0f 90       	pop	r0
    5ce8:	0f 90       	pop	r0
    5cea:	0f 90       	pop	r0
    5cec:	0f 90       	pop	r0
    5cee:	8a 81       	ldd	r24, Y+2	; 0x02
    5cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    5cf2:	0e 94 09 23 	call	0x4612	; 0x4612 <get_line.clone.0>
				if (*ptr == 'Y') put_rc(f_mkfs((BYTE)p1, (BYTE)p2, (WORD)p3));
    5cf6:	ea 81       	ldd	r30, Y+2	; 0x02
    5cf8:	fb 81       	ldd	r31, Y+3	; 0x03
    5cfa:	80 81       	ld	r24, Z
    5cfc:	89 35       	cpi	r24, 0x59	; 89
    5cfe:	11 f0       	breq	.+4      	; 0x5d04 <main+0x1586>
    5d00:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>
    5d04:	4e 89       	ldd	r20, Y+22	; 0x16
    5d06:	5f 89       	ldd	r21, Y+23	; 0x17
    5d08:	8e 85       	ldd	r24, Y+14	; 0x0e
    5d0a:	6a 89       	ldd	r22, Y+18	; 0x12
    5d0c:	0e 94 3f 4d 	call	0x9a7e	; 0x9a7e <f_mkfs>
    5d10:	0e 94 ef 21 	call	0x43de	; 0x43de <put_rc>
    5d14:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>
#endif
			}
			break;

		case 't' :	/* t [<year> <mon> <mday> <hour> <min> <sec>] */
			if (xatoi(&ptr, &p1)) {
    5d18:	8e 01       	movw	r16, r28
    5d1a:	0e 5f       	subi	r16, 0xFE	; 254
    5d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    5d1e:	be e0       	ldi	r27, 0x0E	; 14
    5d20:	eb 2e       	mov	r14, r27
    5d22:	f1 2c       	mov	r15, r1
    5d24:	ec 0e       	add	r14, r28
    5d26:	fd 1e       	adc	r15, r29
    5d28:	c8 01       	movw	r24, r16
    5d2a:	b7 01       	movw	r22, r14
    5d2c:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    5d30:	88 23       	and	r24, r24
    5d32:	51 f1       	breq	.+84     	; 0x5d88 <main+0x160a>
				rtc.year = (WORD)p1;
    5d34:	8e 85       	ldd	r24, Y+14	; 0x0e
    5d36:	9f 85       	ldd	r25, Y+15	; 0x0f
    5d38:	9f 8f       	std	Y+31, r25	; 0x1f
    5d3a:	8e 8f       	std	Y+30, r24	; 0x1e
				xatoi(&ptr, &p1); rtc.month = (BYTE)p1;
    5d3c:	c8 01       	movw	r24, r16
    5d3e:	b7 01       	movw	r22, r14
    5d40:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    5d44:	8e 85       	ldd	r24, Y+14	; 0x0e
    5d46:	88 a3       	std	Y+32, r24	; 0x20
				xatoi(&ptr, &p1); rtc.mday = (BYTE)p1;
    5d48:	c8 01       	movw	r24, r16
    5d4a:	b7 01       	movw	r22, r14
    5d4c:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    5d50:	8e 85       	ldd	r24, Y+14	; 0x0e
    5d52:	89 a3       	std	Y+33, r24	; 0x21
				xatoi(&ptr, &p1); rtc.hour = (BYTE)p1;
    5d54:	c8 01       	movw	r24, r16
    5d56:	b7 01       	movw	r22, r14
    5d58:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    5d5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    5d5e:	8b a3       	std	Y+35, r24	; 0x23
				xatoi(&ptr, &p1); rtc.min = (BYTE)p1;
    5d60:	c8 01       	movw	r24, r16
    5d62:	b7 01       	movw	r22, r14
    5d64:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    5d68:	8e 85       	ldd	r24, Y+14	; 0x0e
    5d6a:	8c a3       	std	Y+36, r24	; 0x24
				if (!xatoi(&ptr, &p1)) break;
    5d6c:	c8 01       	movw	r24, r16
    5d6e:	b7 01       	movw	r22, r14
    5d70:	0e 94 11 57 	call	0xae22	; 0xae22 <xatoi>
    5d74:	88 23       	and	r24, r24
    5d76:	11 f4       	brne	.+4      	; 0x5d7c <main+0x15fe>
    5d78:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>
				rtc.sec = (BYTE)p1;
    5d7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    5d7e:	8d a3       	std	Y+37, r24	; 0x25
				rtc_settime(&rtc);
    5d80:	ce 01       	movw	r24, r28
    5d82:	4e 96       	adiw	r24, 0x1e	; 30
    5d84:	0e 94 de 55 	call	0xabbc	; 0xabbc <rtc_settime>
			}
			rtc_gettime(&rtc);
    5d88:	ce 01       	movw	r24, r28
    5d8a:	4e 96       	adiw	r24, 0x1e	; 30
    5d8c:	0e 94 cc 55 	call	0xab98	; 0xab98 <rtc_gettime>
			xprintf(PSTR("%u/%u/%u %02u:%02u:%02u\n"), rtc.year, rtc.month, rtc.mday, rtc.hour, rtc.min, rtc.sec);
    5d90:	ed b7       	in	r30, 0x3d	; 61
    5d92:	fe b7       	in	r31, 0x3e	; 62
    5d94:	3e 97       	sbiw	r30, 0x0e	; 14
    5d96:	0f b6       	in	r0, 0x3f	; 63
    5d98:	f8 94       	cli
    5d9a:	fe bf       	out	0x3e, r31	; 62
    5d9c:	0f be       	out	0x3f, r0	; 63
    5d9e:	ed bf       	out	0x3d, r30	; 61
    5da0:	31 96       	adiw	r30, 0x01	; 1
    5da2:	86 eb       	ldi	r24, 0xB6	; 182
    5da4:	90 e0       	ldi	r25, 0x00	; 0
    5da6:	ad b7       	in	r26, 0x3d	; 61
    5da8:	be b7       	in	r27, 0x3e	; 62
    5daa:	12 96       	adiw	r26, 0x02	; 2
    5dac:	9c 93       	st	X, r25
    5dae:	8e 93       	st	-X, r24
    5db0:	11 97       	sbiw	r26, 0x01	; 1
    5db2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5db4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5db6:	93 83       	std	Z+3, r25	; 0x03
    5db8:	82 83       	std	Z+2, r24	; 0x02
    5dba:	88 a1       	ldd	r24, Y+32	; 0x20
    5dbc:	84 83       	std	Z+4, r24	; 0x04
    5dbe:	15 82       	std	Z+5, r1	; 0x05
    5dc0:	89 a1       	ldd	r24, Y+33	; 0x21
    5dc2:	86 83       	std	Z+6, r24	; 0x06
    5dc4:	17 82       	std	Z+7, r1	; 0x07
    5dc6:	8b a1       	ldd	r24, Y+35	; 0x23
    5dc8:	80 87       	std	Z+8, r24	; 0x08
    5dca:	11 86       	std	Z+9, r1	; 0x09
    5dcc:	8c a1       	ldd	r24, Y+36	; 0x24
    5dce:	82 87       	std	Z+10, r24	; 0x0a
    5dd0:	13 86       	std	Z+11, r1	; 0x0b
    5dd2:	8d a1       	ldd	r24, Y+37	; 0x25
    5dd4:	84 87       	std	Z+12, r24	; 0x0c
    5dd6:	15 86       	std	Z+13, r1	; 0x0d
    5dd8:	0e 94 b3 56 	call	0xad66	; 0xad66 <xprintf>
			break;
    5ddc:	ed b7       	in	r30, 0x3d	; 61
    5dde:	fe b7       	in	r31, 0x3e	; 62
    5de0:	3e 96       	adiw	r30, 0x0e	; 14
    5de2:	0f b6       	in	r0, 0x3f	; 63
    5de4:	f8 94       	cli
    5de6:	fe bf       	out	0x3e, r31	; 62
    5de8:	0f be       	out	0x3f, r0	; 63
    5dea:	ed bf       	out	0x3d, r30	; 61
    5dec:	0c 94 30 24 	jmp	0x4860	; 0x4860 <main+0xe2>

00005df0 <USART_Transmit>:
#define   BAUD      9600

void USART_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR0A & (1<<UDRE0)) );
    5df0:	90 91 c0 00 	lds	r25, 0x00C0
    5df4:	95 ff       	sbrs	r25, 5
    5df6:	fc cf       	rjmp	.-8      	; 0x5df0 <USART_Transmit>
   /* Put data into buffer, sends the data */
   UDR0 = txData;
    5df8:	80 93 c6 00 	sts	0x00C6, r24
}
    5dfc:	08 95       	ret

00005dfe <USART_set_baud_rate>:

void USART_set_baud_rate(double baudrate)
{
    5dfe:	af 92       	push	r10
    5e00:	bf 92       	push	r11
    5e02:	cf 92       	push	r12
    5e04:	df 92       	push	r13
    5e06:	ef 92       	push	r14
    5e08:	ff 92       	push	r15
    5e0a:	0f 93       	push	r16
    5e0c:	1f 93       	push	r17
    5e0e:	7b 01       	movw	r14, r22
    5e10:	8c 01       	movw	r16, r24
   // calculate division factor for requested baud rate, and set it
   int bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
    5e12:	20 e0       	ldi	r18, 0x00	; 0
    5e14:	30 e0       	ldi	r19, 0x00	; 0
    5e16:	40 e0       	ldi	r20, 0x00	; 0
    5e18:	51 e4       	ldi	r21, 0x41	; 65
    5e1a:	0e 94 16 59 	call	0xb22c	; 0xb22c <__mulsf3>
    5e1e:	20 e0       	ldi	r18, 0x00	; 0
    5e20:	34 e2       	ldi	r19, 0x24	; 36
    5e22:	44 e7       	ldi	r20, 0x74	; 116
    5e24:	59 e4       	ldi	r21, 0x49	; 73
    5e26:	0e 94 b8 58 	call	0xb170	; 0xb170 <__addsf3>
    5e2a:	5b 01       	movw	r10, r22
    5e2c:	6c 01       	movw	r12, r24
    5e2e:	c8 01       	movw	r24, r16
    5e30:	b7 01       	movw	r22, r14
    5e32:	20 e0       	ldi	r18, 0x00	; 0
    5e34:	30 e0       	ldi	r19, 0x00	; 0
    5e36:	40 e8       	ldi	r20, 0x80	; 128
    5e38:	51 e4       	ldi	r21, 0x41	; 65
    5e3a:	0e 94 16 59 	call	0xb22c	; 0xb22c <__mulsf3>
    5e3e:	9b 01       	movw	r18, r22
    5e40:	ac 01       	movw	r20, r24
    5e42:	c6 01       	movw	r24, r12
    5e44:	b5 01       	movw	r22, r10
    5e46:	0e 94 13 5a 	call	0xb426	; 0xb426 <__divsf3>
    5e4a:	20 e0       	ldi	r18, 0x00	; 0
    5e4c:	30 e0       	ldi	r19, 0x00	; 0
    5e4e:	40 e8       	ldi	r20, 0x80	; 128
    5e50:	5f e3       	ldi	r21, 0x3F	; 63
    5e52:	0e 94 e5 58 	call	0xb1ca	; 0xb1ca <__subsf3>
    5e56:	0e 94 c2 5a 	call	0xb584	; 0xb584 <__fixsfsi>
   UBRR0L= bauddiv;
    5e5a:	60 93 c4 00 	sts	0x00C4, r22
#ifdef UBRR0H
   UBRR0H= (bauddiv>>8);
    5e5e:	67 2f       	mov	r22, r23
    5e60:	77 0f       	add	r23, r23
    5e62:	77 0b       	sbc	r23, r23
    5e64:	60 93 c5 00 	sts	0x00C5, r22
#endif
}
    5e68:	1f 91       	pop	r17
    5e6a:	0f 91       	pop	r16
    5e6c:	ff 90       	pop	r15
    5e6e:	ef 90       	pop	r14
    5e70:	df 90       	pop	r13
    5e72:	cf 90       	pop	r12
    5e74:	bf 90       	pop	r11
    5e76:	af 90       	pop	r10
    5e78:	08 95       	ret

00005e7a <uart_init>:

/* Initialize UART */

void uart_init()
{
   UCSR0B = (1<<RXEN0)|(1<<TXEN0);      // Turn on U(S)ART port
    5e7a:	88 e1       	ldi	r24, 0x18	; 24
    5e7c:	80 93 c1 00 	sts	0x00C1, r24
   UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);   // Set frame format: 8 data bits, 1 stop bit, no parity
    5e80:	86 e0       	ldi	r24, 0x06	; 6
    5e82:	80 93 c2 00 	sts	0x00C2, r24
   USART_set_baud_rate(BAUD); //Set baud rate
    5e86:	60 e0       	ldi	r22, 0x00	; 0
    5e88:	70 e0       	ldi	r23, 0x00	; 0
    5e8a:	86 e1       	ldi	r24, 0x16	; 22
    5e8c:	96 e4       	ldi	r25, 0x46	; 70
    5e8e:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <USART_set_baud_rate>
}
    5e92:	08 95       	ret

00005e94 <uart_get>:

/* Get a received character */
uint8_t uart_get ()
{
   unsigned char d;
   while ((UCSR0A & (1 << RXC0)) == 0) {}; // Do nothing until data have been recieved and is ready to be read from UDR
    5e94:	80 91 c0 00 	lds	r24, 0x00C0
    5e98:	87 ff       	sbrs	r24, 7
    5e9a:	fc cf       	rjmp	.-8      	; 0x5e94 <uart_get>
   d=UDR0;
    5e9c:	80 91 c6 00 	lds	r24, 0x00C6
   return d;
}
    5ea0:	08 95       	ret

00005ea2 <uart_put>:

/* Transmit a character */
void uart_put(uint8_t d)
{
   
   USART_Transmit( d );
    5ea2:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <USART_Transmit>
}
    5ea6:	08 95       	ret

00005ea8 <uart_puts>:

/* Transmit a string */
void uart_puts(const char *s)
{
    5ea8:	ef 92       	push	r14
    5eaa:	ff 92       	push	r15
    5eac:	cf 93       	push	r28
    5eae:	df 93       	push	r29
    5eb0:	e8 2e       	mov	r14, r24
    5eb2:	e7 01       	movw	r28, r14
    5eb4:	7e 01       	movw	r14, r28
    5eb6:	f9 2e       	mov	r15, r25
    5eb8:	e7 01       	movw	r28, r14
   while (*s)
    5eba:	02 c0       	rjmp	.+4      	; 0x5ec0 <uart_puts+0x18>
      USART_Transmit( *s++ );
    5ebc:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <USART_Transmit>
}

/* Transmit a string */
void uart_puts(const char *s)
{
   while (*s)
    5ec0:	89 91       	ld	r24, Y+
    5ec2:	88 23       	and	r24, r24
    5ec4:	d9 f7       	brne	.-10     	; 0x5ebc <uart_puts+0x14>
      USART_Transmit( *s++ );
} 
    5ec6:	df 91       	pop	r29
    5ec8:	cf 91       	pop	r28
    5eca:	ff 90       	pop	r15
    5ecc:	ef 90       	pop	r14
    5ece:	08 95       	ret

00005ed0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    5ed0:	cf 93       	push	r28
    5ed2:	df 93       	push	r29
	BYTE *d = (BYTE*)dst;
    5ed4:	9c 01       	movw	r18, r24
	const BYTE *s = (const BYTE*)src;
    5ed6:	cb 01       	movw	r24, r22
    5ed8:	db 01       	movw	r26, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    5eda:	f9 01       	movw	r30, r18
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof(int)) {
    5edc:	ba 01       	movw	r22, r20
    5ede:	06 c0       	rjmp	.+12     	; 0x5eec <mem_cpy+0x1c>
		*(int*)d = *(int*)s;
    5ee0:	cd 91       	ld	r28, X+
    5ee2:	dd 91       	ld	r29, X+
    5ee4:	c1 93       	st	Z+, r28
    5ee6:	d1 93       	st	Z+, r29
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
    5ee8:	62 50       	subi	r22, 0x02	; 2
    5eea:	70 40       	sbci	r23, 0x00	; 0
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof(int)) {
    5eec:	62 30       	cpi	r22, 0x02	; 2
    5eee:	71 05       	cpc	r23, r1
    5ef0:	b8 f7       	brcc	.-18     	; 0x5ee0 <mem_cpy+0x10>
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    5ef2:	ba 01       	movw	r22, r20
    5ef4:	6e 7f       	andi	r22, 0xFE	; 254
    5ef6:	26 0f       	add	r18, r22
    5ef8:	37 1f       	adc	r19, r23
    5efa:	86 0f       	add	r24, r22
    5efc:	97 1f       	adc	r25, r23
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    5efe:	40 ff       	sbrs	r20, 0
    5f00:	04 c0       	rjmp	.+8      	; 0x5f0a <mem_cpy+0x3a>
		*d++ = *s++;
    5f02:	fc 01       	movw	r30, r24
    5f04:	80 81       	ld	r24, Z
    5f06:	f9 01       	movw	r30, r18
    5f08:	80 83       	st	Z, r24
}
    5f0a:	df 91       	pop	r29
    5f0c:	cf 91       	pop	r28
    5f0e:	08 95       	ret

00005f10 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    5f10:	28 2f       	mov	r18, r24
    5f12:	39 2f       	mov	r19, r25
    5f14:	f9 01       	movw	r30, r18

	while (cnt--)
    5f16:	03 c0       	rjmp	.+6      	; 0x5f1e <mem_set+0xe>
		*d++ = (BYTE)val;
    5f18:	61 93       	st	Z+, r22
    5f1a:	41 50       	subi	r20, 0x01	; 1
    5f1c:	50 40       	sbci	r21, 0x00	; 0
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    5f1e:	41 15       	cp	r20, r1
    5f20:	51 05       	cpc	r21, r1
    5f22:	d1 f7       	brne	.-12     	; 0x5f18 <mem_set+0x8>
		*d++ = (BYTE)val;
}
    5f24:	08 95       	ret

00005f26 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    5f26:	fc 01       	movw	r30, r24
	BYTE sum = 0;
	UINT n = 11;
    5f28:	2b e0       	ldi	r18, 0x0B	; 11
    5f2a:	30 e0       	ldi	r19, 0x00	; 0
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
	BYTE sum = 0;
    5f2c:	80 e0       	ldi	r24, 0x00	; 0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    5f2e:	98 2f       	mov	r25, r24
    5f30:	97 95       	ror	r25
    5f32:	99 27       	eor	r25, r25
    5f34:	97 95       	ror	r25
    5f36:	86 95       	lsr	r24
    5f38:	89 2b       	or	r24, r25
    5f3a:	91 91       	ld	r25, Z+
    5f3c:	89 0f       	add	r24, r25
    5f3e:	21 50       	subi	r18, 0x01	; 1
    5f40:	30 40       	sbci	r19, 0x00	; 0
    5f42:	a9 f7       	brne	.-22     	; 0x5f2e <sum_sfn+0x8>
	return sum;
}
    5f44:	08 95       	ret

00005f46 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    5f46:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    5f48:	00 97       	sbiw	r24, 0x00	; 0
    5f4a:	81 f0       	breq	.+32     	; 0x5f6c <validate+0x26>
    5f4c:	80 81       	ld	r24, Z
    5f4e:	88 23       	and	r24, r24
    5f50:	69 f0       	breq	.+26     	; 0x5f6c <validate+0x26>
    5f52:	86 81       	ldd	r24, Z+6	; 0x06
    5f54:	97 81       	ldd	r25, Z+7	; 0x07
    5f56:	86 17       	cp	r24, r22
    5f58:	97 07       	cpc	r25, r23
    5f5a:	41 f4       	brne	.+16     	; 0x5f6c <validate+0x26>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    5f5c:	81 81       	ldd	r24, Z+1	; 0x01
    5f5e:	0e 94 83 53 	call	0xa706	; 0xa706 <disk_status>
    5f62:	80 ff       	sbrs	r24, 0
    5f64:	06 c0       	rjmp	.+12     	; 0x5f72 <validate+0x2c>
		return FR_NOT_READY;
    5f66:	23 e0       	ldi	r18, 0x03	; 3
    5f68:	30 e0       	ldi	r19, 0x00	; 0
    5f6a:	05 c0       	rjmp	.+10     	; 0x5f76 <validate+0x30>
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
    5f6c:	29 e0       	ldi	r18, 0x09	; 9
    5f6e:	30 e0       	ldi	r19, 0x00	; 0
    5f70:	02 c0       	rjmp	.+4      	; 0x5f76 <validate+0x30>
	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
    5f72:	20 e0       	ldi	r18, 0x00	; 0
    5f74:	30 e0       	ldi	r19, 0x00	; 0
}
    5f76:	c9 01       	movw	r24, r18
    5f78:	08 95       	ret

00005f7a <check_fs>:
static
BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    5f7a:	ef 92       	push	r14
    5f7c:	ff 92       	push	r15
    5f7e:	0f 93       	push	r16
    5f80:	cf 93       	push	r28
    5f82:	df 93       	push	r29
    5f84:	ec 01       	movw	r28, r24
    5f86:	9a 01       	movw	r18, r20
    5f88:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    5f8a:	82 e3       	ldi	r24, 0x32	; 50
    5f8c:	e8 2e       	mov	r14, r24
    5f8e:	f1 2c       	mov	r15, r1
    5f90:	ec 0e       	add	r14, r28
    5f92:	fd 1e       	adc	r15, r29
    5f94:	89 81       	ldd	r24, Y+1	; 0x01
    5f96:	b7 01       	movw	r22, r14
    5f98:	01 e0       	ldi	r16, 0x01	; 1
    5f9a:	0e 94 8a 53 	call	0xa714	; 0xa714 <disk_read>
    5f9e:	00 97       	sbiw	r24, 0x00	; 0
    5fa0:	41 f5       	brne	.+80     	; 0x5ff2 <check_fs+0x78>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    5fa2:	fe 01       	movw	r30, r28
    5fa4:	e0 5d       	subi	r30, 0xD0	; 208
    5fa6:	fd 4f       	sbci	r31, 0xFD	; 253
    5fa8:	80 81       	ld	r24, Z
    5faa:	91 81       	ldd	r25, Z+1	; 0x01
    5fac:	2a ea       	ldi	r18, 0xAA	; 170
    5fae:	85 35       	cpi	r24, 0x55	; 85
    5fb0:	92 07       	cpc	r25, r18
    5fb2:	09 f5       	brne	.+66     	; 0x5ff6 <check_fs+0x7c>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    5fb4:	f7 01       	movw	r30, r14
    5fb6:	86 a9       	ldd	r24, Z+54	; 0x36
    5fb8:	97 a9       	ldd	r25, Z+55	; 0x37
    5fba:	a0 ad       	ldd	r26, Z+56	; 0x38
    5fbc:	b1 ad       	ldd	r27, Z+57	; 0x39
    5fbe:	b0 70       	andi	r27, 0x00	; 0
    5fc0:	86 34       	cpi	r24, 0x46	; 70
    5fc2:	f1 e4       	ldi	r31, 0x41	; 65
    5fc4:	9f 07       	cpc	r25, r31
    5fc6:	f4 e5       	ldi	r31, 0x54	; 84
    5fc8:	af 07       	cpc	r26, r31
    5fca:	f0 e0       	ldi	r31, 0x00	; 0
    5fcc:	bf 07       	cpc	r27, r31
    5fce:	a9 f0       	breq	.+42     	; 0x5ffa <check_fs+0x80>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    5fd0:	cc 57       	subi	r28, 0x7C	; 124
    5fd2:	df 4f       	sbci	r29, 0xFF	; 255
    5fd4:	28 81       	ld	r18, Y
    5fd6:	39 81       	ldd	r19, Y+1	; 0x01
    5fd8:	4a 81       	ldd	r20, Y+2	; 0x02
    5fda:	5b 81       	ldd	r21, Y+3	; 0x03
    5fdc:	50 70       	andi	r21, 0x00	; 0
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
    5fde:	81 e0       	ldi	r24, 0x01	; 1
    5fe0:	26 34       	cpi	r18, 0x46	; 70
    5fe2:	91 e4       	ldi	r25, 0x41	; 65
    5fe4:	39 07       	cpc	r19, r25
    5fe6:	94 e5       	ldi	r25, 0x54	; 84
    5fe8:	49 07       	cpc	r20, r25
    5fea:	90 e0       	ldi	r25, 0x00	; 0
    5fec:	59 07       	cpc	r21, r25
    5fee:	31 f4       	brne	.+12     	; 0x5ffc <check_fs+0x82>
    5ff0:	04 c0       	rjmp	.+8      	; 0x5ffa <check_fs+0x80>
    5ff2:	83 e0       	ldi	r24, 0x03	; 3
    5ff4:	03 c0       	rjmp	.+6      	; 0x5ffc <check_fs+0x82>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
    5ff6:	82 e0       	ldi	r24, 0x02	; 2
    5ff8:	01 c0       	rjmp	.+2      	; 0x5ffc <check_fs+0x82>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
    5ffa:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    5ffc:	df 91       	pop	r29
    5ffe:	cf 91       	pop	r28
    6000:	0f 91       	pop	r16
    6002:	ff 90       	pop	r15
    6004:	ef 90       	pop	r14
    6006:	08 95       	ret

00006008 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    6008:	a0 e1       	ldi	r26, 0x10	; 16
    600a:	b0 e0       	ldi	r27, 0x00	; 0
    600c:	ea e0       	ldi	r30, 0x0A	; 10
    600e:	f0 e3       	ldi	r31, 0x30	; 48
    6010:	0c 94 d2 5c 	jmp	0xb9a4	; 0xb9a4 <__prologue_saves__>
    6014:	fc 01       	movw	r30, r24
    6016:	e4 2e       	mov	r14, r20
	BYTE fmt, b, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    6018:	a0 81       	ld	r26, Z
    601a:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    601c:	0c 91       	ld	r16, X
    601e:	11 27       	eor	r17, r17
    6020:	07 fd       	sbrc	r16, 7
    6022:	10 95       	com	r17
    6024:	00 53       	subi	r16, 0x30	; 48
    6026:	10 40       	sbci	r17, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    6028:	0a 30       	cpi	r16, 0x0A	; 10
    602a:	11 05       	cpc	r17, r1
    602c:	48 f4       	brcc	.+18     	; 0x6040 <chk_mounted+0x38>
    602e:	11 96       	adiw	r26, 0x01	; 1
    6030:	8c 91       	ld	r24, X
    6032:	11 97       	sbiw	r26, 0x01	; 1
    6034:	8a 33       	cpi	r24, 0x3A	; 58
    6036:	21 f4       	brne	.+8      	; 0x6040 <chk_mounted+0x38>
		p += 2; *path = p;				/* Return pointer to the path name */
    6038:	12 96       	adiw	r26, 0x02	; 2
    603a:	b1 83       	std	Z+1, r27	; 0x01
    603c:	a0 83       	st	Z, r26
    603e:	03 c0       	rjmp	.+6      	; 0x6046 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
    6040:	00 91 90 02 	lds	r16, 0x0290
    6044:	10 e0       	ldi	r17, 0x00	; 0
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    6046:	02 30       	cpi	r16, 0x02	; 2
    6048:	11 05       	cpc	r17, r1
    604a:	08 f0       	brcs	.+2      	; 0x604e <chk_mounted+0x46>
    604c:	2d c2       	rjmp	.+1114   	; 0x64a8 <chk_mounted+0x4a0>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    604e:	f8 01       	movw	r30, r16
    6050:	ee 0f       	add	r30, r30
    6052:	ff 1f       	adc	r31, r31
    6054:	e6 57       	subi	r30, 0x76	; 118
    6056:	fe 4f       	sbci	r31, 0xFE	; 254
    6058:	20 80       	ld	r2, Z
    605a:	31 80       	ldd	r3, Z+1	; 0x01
    605c:	db 01       	movw	r26, r22
    605e:	11 96       	adiw	r26, 0x01	; 1
    6060:	3c 92       	st	X, r3
    6062:	2e 92       	st	-X, r2
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    6064:	21 14       	cp	r2, r1
    6066:	31 04       	cpc	r3, r1
    6068:	09 f4       	brne	.+2      	; 0x606c <chk_mounted+0x64>
    606a:	21 c2       	rjmp	.+1090   	; 0x64ae <chk_mounted+0x4a6>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    606c:	f1 01       	movw	r30, r2
    606e:	80 81       	ld	r24, Z
    6070:	88 23       	and	r24, r24
    6072:	59 f0       	breq	.+22     	; 0x608a <chk_mounted+0x82>
		stat = disk_status(fs->drv);
    6074:	81 81       	ldd	r24, Z+1	; 0x01
    6076:	0e 94 83 53 	call	0xa706	; 0xa706 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    607a:	80 fd       	sbrc	r24, 0
    607c:	06 c0       	rjmp	.+12     	; 0x608a <chk_mounted+0x82>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    607e:	ee 20       	and	r14, r14
    6080:	09 f4       	brne	.+2      	; 0x6084 <chk_mounted+0x7c>
    6082:	18 c2       	rjmp	.+1072   	; 0x64b4 <chk_mounted+0x4ac>
    6084:	82 ff       	sbrs	r24, 2
    6086:	16 c2       	rjmp	.+1068   	; 0x64b4 <chk_mounted+0x4ac>
    6088:	1b c2       	rjmp	.+1078   	; 0x64c0 <chk_mounted+0x4b8>
	}

	/* The logical drive must be mounted. */
	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    608a:	d1 01       	movw	r26, r2
    608c:	1c 92       	st	X, r1
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
    608e:	11 96       	adiw	r26, 0x01	; 1
    6090:	0c 93       	st	X, r16
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    6092:	80 2f       	mov	r24, r16
    6094:	0e 94 cc 52 	call	0xa598	; 0xa598 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    6098:	80 fd       	sbrc	r24, 0
    609a:	0f c2       	rjmp	.+1054   	; 0x64ba <chk_mounted+0x4b2>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    609c:	ee 20       	and	r14, r14
    609e:	11 f0       	breq	.+4      	; 0x60a4 <chk_mounted+0x9c>
    60a0:	82 fd       	sbrc	r24, 2
    60a2:	0e c2       	rjmp	.+1052   	; 0x64c0 <chk_mounted+0x4b8>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
    60a4:	c1 01       	movw	r24, r2
    60a6:	40 e0       	ldi	r20, 0x00	; 0
    60a8:	50 e0       	ldi	r21, 0x00	; 0
    60aa:	60 e0       	ldi	r22, 0x00	; 0
    60ac:	70 e0       	ldi	r23, 0x00	; 0
    60ae:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <check_fs>
	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
    60b2:	81 30       	cpi	r24, 0x01	; 1
    60b4:	e1 f4       	brne	.+56     	; 0x60ee <chk_mounted+0xe6>
		/* Check the partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
		if (tbl[4]) {									/* Is the partition existing? */
    60b6:	f1 01       	movw	r30, r2
    60b8:	ec 50       	subi	r30, 0x0C	; 12
    60ba:	fe 4f       	sbci	r31, 0xFE	; 254
    60bc:	80 81       	ld	r24, Z
    60be:	88 23       	and	r24, r24
    60c0:	09 f4       	brne	.+2      	; 0x60c4 <chk_mounted+0xbc>
    60c2:	04 c2       	rjmp	.+1032   	; 0x64cc <chk_mounted+0x4c4>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    60c4:	91 01       	movw	r18, r2
    60c6:	28 50       	subi	r18, 0x08	; 8
    60c8:	3e 4f       	sbci	r19, 0xFE	; 254
    60ca:	d9 01       	movw	r26, r18
    60cc:	8d 91       	ld	r24, X+
    60ce:	9d 91       	ld	r25, X+
    60d0:	0d 90       	ld	r0, X+
    60d2:	bc 91       	ld	r27, X
    60d4:	a0 2d       	mov	r26, r0
    60d6:	89 83       	std	Y+1, r24	; 0x01
    60d8:	9a 83       	std	Y+2, r25	; 0x02
    60da:	ab 83       	std	Y+3, r26	; 0x03
    60dc:	bc 83       	std	Y+4, r27	; 0x04
			fmt = check_fs(fs, bsect);					/* Check the partition */
    60de:	c1 01       	movw	r24, r2
    60e0:	49 81       	ldd	r20, Y+1	; 0x01
    60e2:	5a 81       	ldd	r21, Y+2	; 0x02
    60e4:	6b 81       	ldd	r22, Y+3	; 0x03
    60e6:	7c 81       	ldd	r23, Y+4	; 0x04
    60e8:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <check_fs>
    60ec:	04 c0       	rjmp	.+8      	; 0x60f6 <chk_mounted+0xee>
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
    60ee:	19 82       	std	Y+1, r1	; 0x01
    60f0:	1a 82       	std	Y+2, r1	; 0x02
    60f2:	1b 82       	std	Y+3, r1	; 0x03
    60f4:	1c 82       	std	Y+4, r1	; 0x04
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    60f6:	83 30       	cpi	r24, 0x03	; 3
    60f8:	09 f4       	brne	.+2      	; 0x60fc <chk_mounted+0xf4>
    60fa:	e5 c1       	rjmp	.+970    	; 0x64c6 <chk_mounted+0x4be>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
    60fc:	88 23       	and	r24, r24
    60fe:	09 f0       	breq	.+2      	; 0x6102 <chk_mounted+0xfa>
    6100:	e5 c1       	rjmp	.+970    	; 0x64cc <chk_mounted+0x4c4>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    6102:	a2 e3       	ldi	r26, 0x32	; 50
    6104:	ea 2e       	mov	r14, r26
    6106:	f1 2c       	mov	r15, r1
    6108:	e2 0c       	add	r14, r2
    610a:	f3 1c       	adc	r15, r3
    610c:	f7 01       	movw	r30, r14
    610e:	83 85       	ldd	r24, Z+11	; 0x0b
    6110:	94 85       	ldd	r25, Z+12	; 0x0c
    6112:	f2 e0       	ldi	r31, 0x02	; 2
    6114:	80 30       	cpi	r24, 0x00	; 0
    6116:	9f 07       	cpc	r25, r31
    6118:	09 f0       	breq	.+2      	; 0x611c <chk_mounted+0x114>
    611a:	d8 c1       	rjmp	.+944    	; 0x64cc <chk_mounted+0x4c4>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    611c:	d7 01       	movw	r26, r14
    611e:	56 96       	adiw	r26, 0x16	; 22
    6120:	8d 91       	ld	r24, X+
    6122:	9c 91       	ld	r25, X
    6124:	57 97       	sbiw	r26, 0x17	; 23
    6126:	9c 01       	movw	r18, r24
    6128:	40 e0       	ldi	r20, 0x00	; 0
    612a:	50 e0       	ldi	r21, 0x00	; 0
    612c:	2d 83       	std	Y+5, r18	; 0x05
    612e:	3e 83       	std	Y+6, r19	; 0x06
    6130:	4f 83       	std	Y+7, r20	; 0x07
    6132:	58 87       	std	Y+8, r21	; 0x08
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    6134:	21 15       	cp	r18, r1
    6136:	31 05       	cpc	r19, r1
    6138:	41 05       	cpc	r20, r1
    613a:	51 05       	cpc	r21, r1
    613c:	51 f4       	brne	.+20     	; 0x6152 <chk_mounted+0x14a>
    613e:	94 96       	adiw	r26, 0x24	; 36
    6140:	8d 91       	ld	r24, X+
    6142:	9d 91       	ld	r25, X+
    6144:	0d 90       	ld	r0, X+
    6146:	bc 91       	ld	r27, X
    6148:	a0 2d       	mov	r26, r0
    614a:	8d 83       	std	Y+5, r24	; 0x05
    614c:	9e 83       	std	Y+6, r25	; 0x06
    614e:	af 83       	std	Y+7, r26	; 0x07
    6150:	b8 87       	std	Y+8, r27	; 0x08
	fs->fsize = fasize;
    6152:	2d 81       	ldd	r18, Y+5	; 0x05
    6154:	3e 81       	ldd	r19, Y+6	; 0x06
    6156:	4f 81       	ldd	r20, Y+7	; 0x07
    6158:	58 85       	ldd	r21, Y+8	; 0x08
    615a:	d1 01       	movw	r26, r2
    615c:	5e 96       	adiw	r26, 0x1e	; 30
    615e:	2d 93       	st	X+, r18
    6160:	3d 93       	st	X+, r19
    6162:	4d 93       	st	X+, r20
    6164:	5c 93       	st	X, r21
    6166:	91 97       	sbiw	r26, 0x21	; 33

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    6168:	f1 01       	movw	r30, r2
    616a:	ee 5b       	subi	r30, 0xBE	; 190
    616c:	ff 4f       	sbci	r31, 0xFF	; 255
    616e:	20 81       	ld	r18, Z
    6170:	f1 01       	movw	r30, r2
    6172:	23 83       	std	Z+3, r18	; 0x03
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    6174:	82 2f       	mov	r24, r18
    6176:	81 50       	subi	r24, 0x01	; 1
    6178:	82 30       	cpi	r24, 0x02	; 2
    617a:	08 f0       	brcs	.+2      	; 0x617e <chk_mounted+0x176>
    617c:	a7 c1       	rjmp	.+846    	; 0x64cc <chk_mounted+0x4c4>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    617e:	17 ad       	ldd	r17, Z+63	; 0x3f
    6180:	12 83       	std	Z+2, r17	; 0x02
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    6182:	11 23       	and	r17, r17
    6184:	09 f4       	brne	.+2      	; 0x6188 <chk_mounted+0x180>
    6186:	a2 c1       	rjmp	.+836    	; 0x64cc <chk_mounted+0x4c4>
    6188:	41 2f       	mov	r20, r17
    618a:	50 e0       	ldi	r21, 0x00	; 0
    618c:	ca 01       	movw	r24, r20
    618e:	01 97       	sbiw	r24, 0x01	; 1
    6190:	84 23       	and	r24, r20
    6192:	95 23       	and	r25, r21
    6194:	00 97       	sbiw	r24, 0x00	; 0
    6196:	09 f0       	breq	.+2      	; 0x619a <chk_mounted+0x192>
    6198:	99 c1       	rjmp	.+818    	; 0x64cc <chk_mounted+0x4c4>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    619a:	d7 01       	movw	r26, r14
    619c:	51 96       	adiw	r26, 0x11	; 17
    619e:	4d 90       	ld	r4, X+
    61a0:	5c 90       	ld	r5, X
    61a2:	52 97       	sbiw	r26, 0x12	; 18
    61a4:	51 86       	std	Z+9, r5	; 0x09
    61a6:	40 86       	std	Z+8, r4	; 0x08
	if (fs->n_rootdir % (SS(fs) / 32)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    61a8:	c2 01       	movw	r24, r4
    61aa:	8f 70       	andi	r24, 0x0F	; 15
    61ac:	90 70       	andi	r25, 0x00	; 0
    61ae:	00 97       	sbiw	r24, 0x00	; 0
    61b0:	09 f0       	breq	.+2      	; 0x61b4 <chk_mounted+0x1ac>
    61b2:	8c c1       	rjmp	.+792    	; 0x64cc <chk_mounted+0x4c4>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    61b4:	53 96       	adiw	r26, 0x13	; 19
    61b6:	6d 90       	ld	r6, X+
    61b8:	7c 90       	ld	r7, X
    61ba:	54 97       	sbiw	r26, 0x14	; 20
    61bc:	88 24       	eor	r8, r8
    61be:	99 24       	eor	r9, r9
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    61c0:	61 14       	cp	r6, r1
    61c2:	71 04       	cpc	r7, r1
    61c4:	81 04       	cpc	r8, r1
    61c6:	91 04       	cpc	r9, r1
    61c8:	31 f4       	brne	.+12     	; 0x61d6 <chk_mounted+0x1ce>
    61ca:	90 96       	adiw	r26, 0x20	; 32
    61cc:	6d 90       	ld	r6, X+
    61ce:	7d 90       	ld	r7, X+
    61d0:	8d 90       	ld	r8, X+
    61d2:	9c 90       	ld	r9, X
    61d4:	93 97       	sbiw	r26, 0x23	; 35

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    61d6:	f7 01       	movw	r30, r14
    61d8:	a6 84       	ldd	r10, Z+14	; 0x0e
    61da:	b7 84       	ldd	r11, Z+15	; 0x0f
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    61dc:	a1 14       	cp	r10, r1
    61de:	b1 04       	cpc	r11, r1
    61e0:	09 f4       	brne	.+2      	; 0x61e4 <chk_mounted+0x1dc>
    61e2:	74 c1       	rjmp	.+744    	; 0x64cc <chk_mounted+0x4c4>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    61e4:	30 e0       	ldi	r19, 0x00	; 0
    61e6:	40 e0       	ldi	r20, 0x00	; 0
    61e8:	50 e0       	ldi	r21, 0x00	; 0
    61ea:	6d 81       	ldd	r22, Y+5	; 0x05
    61ec:	7e 81       	ldd	r23, Y+6	; 0x06
    61ee:	8f 81       	ldd	r24, Y+7	; 0x07
    61f0:	98 85       	ldd	r25, Y+8	; 0x08
    61f2:	0e 94 4f 5c 	call	0xb89e	; 0xb89e <__mulsi3>
    61f6:	69 87       	std	Y+9, r22	; 0x09
    61f8:	7a 87       	std	Y+10, r23	; 0x0a
    61fa:	8b 87       	std	Y+11, r24	; 0x0b
    61fc:	9c 87       	std	Y+12, r25	; 0x0c

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
    61fe:	95 01       	movw	r18, r10
    6200:	40 e0       	ldi	r20, 0x00	; 0
    6202:	50 e0       	ldi	r21, 0x00	; 0
    6204:	2d 87       	std	Y+13, r18	; 0x0d
    6206:	3e 87       	std	Y+14, r19	; 0x0e
    6208:	4f 87       	std	Y+15, r20	; 0x0f
    620a:	58 8b       	std	Y+16, r21	; 0x10
    620c:	52 01       	movw	r10, r4
    620e:	f4 e0       	ldi	r31, 0x04	; 4
    6210:	b6 94       	lsr	r11
    6212:	a7 94       	ror	r10
    6214:	fa 95       	dec	r31
    6216:	e1 f7       	brne	.-8      	; 0x6210 <chk_mounted+0x208>
    6218:	cc 24       	eor	r12, r12
    621a:	dd 24       	eor	r13, r13
    621c:	a2 0e       	add	r10, r18
    621e:	b3 1e       	adc	r11, r19
    6220:	c4 1e       	adc	r12, r20
    6222:	d5 1e       	adc	r13, r21
    6224:	a6 0e       	add	r10, r22
    6226:	b7 1e       	adc	r11, r23
    6228:	c8 1e       	adc	r12, r24
    622a:	d9 1e       	adc	r13, r25
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    622c:	6a 14       	cp	r6, r10
    622e:	7b 04       	cpc	r7, r11
    6230:	8c 04       	cpc	r8, r12
    6232:	9d 04       	cpc	r9, r13
    6234:	08 f4       	brcc	.+2      	; 0x6238 <chk_mounted+0x230>
    6236:	4a c1       	rjmp	.+660    	; 0x64cc <chk_mounted+0x4c4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    6238:	c4 01       	movw	r24, r8
    623a:	b3 01       	movw	r22, r6
    623c:	6a 19       	sub	r22, r10
    623e:	7b 09       	sbc	r23, r11
    6240:	8c 09       	sbc	r24, r12
    6242:	9d 09       	sbc	r25, r13
    6244:	21 2f       	mov	r18, r17
    6246:	30 e0       	ldi	r19, 0x00	; 0
    6248:	40 e0       	ldi	r20, 0x00	; 0
    624a:	50 e0       	ldi	r21, 0x00	; 0
    624c:	0e 94 95 5c 	call	0xb92a	; 0xb92a <__udivmodsi4>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    6250:	21 15       	cp	r18, r1
    6252:	31 05       	cpc	r19, r1
    6254:	41 05       	cpc	r20, r1
    6256:	51 05       	cpc	r21, r1
    6258:	09 f4       	brne	.+2      	; 0x625c <chk_mounted+0x254>
    625a:	38 c1       	rjmp	.+624    	; 0x64cc <chk_mounted+0x4c4>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    625c:	26 3f       	cpi	r18, 0xF6	; 246
    625e:	8f e0       	ldi	r24, 0x0F	; 15
    6260:	38 07       	cpc	r19, r24
    6262:	80 e0       	ldi	r24, 0x00	; 0
    6264:	48 07       	cpc	r20, r24
    6266:	80 e0       	ldi	r24, 0x00	; 0
    6268:	58 07       	cpc	r21, r24
    626a:	50 f0       	brcs	.+20     	; 0x6280 <chk_mounted+0x278>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    626c:	26 3f       	cpi	r18, 0xF6	; 246
    626e:	9f ef       	ldi	r25, 0xFF	; 255
    6270:	39 07       	cpc	r19, r25
    6272:	90 e0       	ldi	r25, 0x00	; 0
    6274:	49 07       	cpc	r20, r25
    6276:	90 e0       	ldi	r25, 0x00	; 0
    6278:	59 07       	cpc	r21, r25
    627a:	20 f4       	brcc	.+8      	; 0x6284 <chk_mounted+0x27c>
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    627c:	12 e0       	ldi	r17, 0x02	; 2
    627e:	03 c0       	rjmp	.+6      	; 0x6286 <chk_mounted+0x27e>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
    6280:	11 e0       	ldi	r17, 0x01	; 1
    6282:	01 c0       	rjmp	.+2      	; 0x6286 <chk_mounted+0x27e>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    6284:	13 e0       	ldi	r17, 0x03	; 3

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    6286:	2e 5f       	subi	r18, 0xFE	; 254
    6288:	3f 4f       	sbci	r19, 0xFF	; 255
    628a:	4f 4f       	sbci	r20, 0xFF	; 255
    628c:	5f 4f       	sbci	r21, 0xFF	; 255
    628e:	d1 01       	movw	r26, r2
    6290:	5a 96       	adiw	r26, 0x1a	; 26
    6292:	2d 93       	st	X+, r18
    6294:	3d 93       	st	X+, r19
    6296:	4d 93       	st	X+, r20
    6298:	5c 93       	st	X, r21
    629a:	5d 97       	sbiw	r26, 0x1d	; 29
	fs->database = bsect + sysect;						/* Data start sector */
    629c:	89 81       	ldd	r24, Y+1	; 0x01
    629e:	9a 81       	ldd	r25, Y+2	; 0x02
    62a0:	ab 81       	ldd	r26, Y+3	; 0x03
    62a2:	bc 81       	ldd	r27, Y+4	; 0x04
    62a4:	a8 0e       	add	r10, r24
    62a6:	b9 1e       	adc	r11, r25
    62a8:	ca 1e       	adc	r12, r26
    62aa:	db 1e       	adc	r13, r27
    62ac:	d1 01       	movw	r26, r2
    62ae:	9a 96       	adiw	r26, 0x2a	; 42
    62b0:	ad 92       	st	X+, r10
    62b2:	bd 92       	st	X+, r11
    62b4:	cd 92       	st	X+, r12
    62b6:	dc 92       	st	X, r13
    62b8:	9d 97       	sbiw	r26, 0x2d	; 45
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    62ba:	a9 80       	ldd	r10, Y+1	; 0x01
    62bc:	ba 80       	ldd	r11, Y+2	; 0x02
    62be:	cb 80       	ldd	r12, Y+3	; 0x03
    62c0:	dc 80       	ldd	r13, Y+4	; 0x04
    62c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    62c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    62c6:	af 85       	ldd	r26, Y+15	; 0x0f
    62c8:	b8 89       	ldd	r27, Y+16	; 0x10
    62ca:	a8 0e       	add	r10, r24
    62cc:	b9 1e       	adc	r11, r25
    62ce:	ca 1e       	adc	r12, r26
    62d0:	db 1e       	adc	r13, r27
    62d2:	d1 01       	movw	r26, r2
    62d4:	92 96       	adiw	r26, 0x22	; 34
    62d6:	ad 92       	st	X+, r10
    62d8:	bd 92       	st	X+, r11
    62da:	cd 92       	st	X+, r12
    62dc:	dc 92       	st	X, r13
    62de:	95 97       	sbiw	r26, 0x25	; 37
	if (fmt == FS_FAT32) {
    62e0:	13 30       	cpi	r17, 0x03	; 3
    62e2:	c1 f4       	brne	.+48     	; 0x6314 <chk_mounted+0x30c>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    62e4:	41 14       	cp	r4, r1
    62e6:	51 04       	cpc	r5, r1
    62e8:	09 f0       	breq	.+2      	; 0x62ec <chk_mounted+0x2e4>
    62ea:	f0 c0       	rjmp	.+480    	; 0x64cc <chk_mounted+0x4c4>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    62ec:	f7 01       	movw	r30, r14
    62ee:	84 a5       	ldd	r24, Z+44	; 0x2c
    62f0:	95 a5       	ldd	r25, Z+45	; 0x2d
    62f2:	a6 a5       	ldd	r26, Z+46	; 0x2e
    62f4:	b7 a5       	ldd	r27, Z+47	; 0x2f
    62f6:	f1 01       	movw	r30, r2
    62f8:	86 a3       	std	Z+38, r24	; 0x26
    62fa:	97 a3       	std	Z+39, r25	; 0x27
    62fc:	a0 a7       	std	Z+40, r26	; 0x28
    62fe:	b1 a7       	std	Z+41, r27	; 0x29
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    6300:	da 01       	movw	r26, r20
    6302:	c9 01       	movw	r24, r18
    6304:	e2 e0       	ldi	r30, 0x02	; 2
    6306:	88 0f       	add	r24, r24
    6308:	99 1f       	adc	r25, r25
    630a:	aa 1f       	adc	r26, r26
    630c:	bb 1f       	adc	r27, r27
    630e:	ea 95       	dec	r30
    6310:	d1 f7       	brne	.-12     	; 0x6306 <chk_mounted+0x2fe>
    6312:	29 c0       	rjmp	.+82     	; 0x6366 <chk_mounted+0x35e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    6314:	41 14       	cp	r4, r1
    6316:	51 04       	cpc	r5, r1
    6318:	09 f4       	brne	.+2      	; 0x631c <chk_mounted+0x314>
    631a:	d8 c0       	rjmp	.+432    	; 0x64cc <chk_mounted+0x4c4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    631c:	89 85       	ldd	r24, Y+9	; 0x09
    631e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6320:	ab 85       	ldd	r26, Y+11	; 0x0b
    6322:	bc 85       	ldd	r27, Y+12	; 0x0c
    6324:	8a 0d       	add	r24, r10
    6326:	9b 1d       	adc	r25, r11
    6328:	ac 1d       	adc	r26, r12
    632a:	bd 1d       	adc	r27, r13
    632c:	f1 01       	movw	r30, r2
    632e:	86 a3       	std	Z+38, r24	; 0x26
    6330:	97 a3       	std	Z+39, r25	; 0x27
    6332:	a0 a7       	std	Z+40, r26	; 0x28
    6334:	b1 a7       	std	Z+41, r27	; 0x29
    6336:	da 01       	movw	r26, r20
    6338:	c9 01       	movw	r24, r18
    633a:	88 0f       	add	r24, r24
    633c:	99 1f       	adc	r25, r25
    633e:	aa 1f       	adc	r26, r26
    6340:	bb 1f       	adc	r27, r27
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    6342:	12 30       	cpi	r17, 0x02	; 2
    6344:	81 f0       	breq	.+32     	; 0x6366 <chk_mounted+0x35e>
    6346:	82 0f       	add	r24, r18
    6348:	93 1f       	adc	r25, r19
    634a:	a4 1f       	adc	r26, r20
    634c:	b5 1f       	adc	r27, r21
    634e:	b6 95       	lsr	r27
    6350:	a7 95       	ror	r26
    6352:	97 95       	ror	r25
    6354:	87 95       	ror	r24
    6356:	21 70       	andi	r18, 0x01	; 1
    6358:	30 70       	andi	r19, 0x00	; 0
    635a:	40 70       	andi	r20, 0x00	; 0
    635c:	50 70       	andi	r21, 0x00	; 0
    635e:	82 0f       	add	r24, r18
    6360:	93 1f       	adc	r25, r19
    6362:	a4 1f       	adc	r26, r20
    6364:	b5 1f       	adc	r27, r21
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (FAT size must not be less than FAT sectors */
    6366:	81 50       	subi	r24, 0x01	; 1
    6368:	9e 4f       	sbci	r25, 0xFE	; 254
    636a:	af 4f       	sbci	r26, 0xFF	; 255
    636c:	bf 4f       	sbci	r27, 0xFF	; 255
    636e:	29 e0       	ldi	r18, 0x09	; 9
    6370:	b6 95       	lsr	r27
    6372:	a7 95       	ror	r26
    6374:	97 95       	ror	r25
    6376:	87 95       	ror	r24
    6378:	2a 95       	dec	r18
    637a:	d1 f7       	brne	.-12     	; 0x6370 <chk_mounted+0x368>
    637c:	2d 81       	ldd	r18, Y+5	; 0x05
    637e:	3e 81       	ldd	r19, Y+6	; 0x06
    6380:	4f 81       	ldd	r20, Y+7	; 0x07
    6382:	58 85       	ldd	r21, Y+8	; 0x08
    6384:	28 17       	cp	r18, r24
    6386:	39 07       	cpc	r19, r25
    6388:	4a 07       	cpc	r20, r26
    638a:	5b 07       	cpc	r21, r27
    638c:	08 f4       	brcc	.+2      	; 0x6390 <chk_mounted+0x388>
    638e:	9e c0       	rjmp	.+316    	; 0x64cc <chk_mounted+0x4c4>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    6390:	8f ef       	ldi	r24, 0xFF	; 255
    6392:	9f ef       	ldi	r25, 0xFF	; 255
    6394:	af ef       	ldi	r26, 0xFF	; 255
    6396:	bf ef       	ldi	r27, 0xFF	; 255
    6398:	f1 01       	movw	r30, r2
    639a:	86 87       	std	Z+14, r24	; 0x0e
    639c:	97 87       	std	Z+15, r25	; 0x0f
    639e:	a0 8b       	std	Z+16, r26	; 0x10
    63a0:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    63a2:	d1 01       	movw	r26, r2
    63a4:	1a 96       	adiw	r26, 0x0a	; 10
    63a6:	1d 92       	st	X+, r1
    63a8:	1d 92       	st	X+, r1
    63aa:	1d 92       	st	X+, r1
    63ac:	1c 92       	st	X, r1
    63ae:	1d 97       	sbiw	r26, 0x0d	; 13

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    63b0:	13 30       	cpi	r17, 0x03	; 3
    63b2:	09 f0       	breq	.+2      	; 0x63b6 <chk_mounted+0x3ae>
    63b4:	5d c0       	rjmp	.+186    	; 0x6470 <chk_mounted+0x468>
	 	fs->fsi_flag = 0;
    63b6:	15 96       	adiw	r26, 0x05	; 5
    63b8:	1c 92       	st	X, r1
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    63ba:	f7 01       	movw	r30, r14
    63bc:	20 a9       	ldd	r18, Z+48	; 0x30
    63be:	31 a9       	ldd	r19, Z+49	; 0x31
    63c0:	40 e0       	ldi	r20, 0x00	; 0
    63c2:	50 e0       	ldi	r21, 0x00	; 0
    63c4:	89 81       	ldd	r24, Y+1	; 0x01
    63c6:	9a 81       	ldd	r25, Y+2	; 0x02
    63c8:	ab 81       	ldd	r26, Y+3	; 0x03
    63ca:	bc 81       	ldd	r27, Y+4	; 0x04
    63cc:	28 0f       	add	r18, r24
    63ce:	39 1f       	adc	r19, r25
    63d0:	4a 1f       	adc	r20, r26
    63d2:	5b 1f       	adc	r21, r27
    63d4:	d1 01       	movw	r26, r2
    63d6:	52 96       	adiw	r26, 0x12	; 18
    63d8:	2d 93       	st	X+, r18
    63da:	3d 93       	st	X+, r19
    63dc:	4d 93       	st	X+, r20
    63de:	5c 93       	st	X, r21
    63e0:	55 97       	sbiw	r26, 0x15	; 21
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    63e2:	b1 01       	movw	r22, r2
    63e4:	6e 5c       	subi	r22, 0xCE	; 206
    63e6:	7f 4f       	sbci	r23, 0xFF	; 255
    63e8:	11 96       	adiw	r26, 0x01	; 1
    63ea:	8c 91       	ld	r24, X
    63ec:	01 e0       	ldi	r16, 0x01	; 1
    63ee:	0e 94 8a 53 	call	0xa714	; 0xa714 <disk_read>
    63f2:	00 97       	sbiw	r24, 0x00	; 0
    63f4:	e9 f5       	brne	.+122    	; 0x6470 <chk_mounted+0x468>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    63f6:	f7 01       	movw	r30, r14
    63f8:	e2 50       	subi	r30, 0x02	; 2
    63fa:	fe 4f       	sbci	r31, 0xFE	; 254

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    63fc:	80 81       	ld	r24, Z
    63fe:	91 81       	ldd	r25, Z+1	; 0x01
    6400:	ba ea       	ldi	r27, 0xAA	; 170
    6402:	85 35       	cpi	r24, 0x55	; 85
    6404:	9b 07       	cpc	r25, r27
    6406:	a1 f5       	brne	.+104    	; 0x6470 <chk_mounted+0x468>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    6408:	f1 01       	movw	r30, r2
    640a:	82 a9       	ldd	r24, Z+50	; 0x32
    640c:	93 a9       	ldd	r25, Z+51	; 0x33
    640e:	a4 a9       	ldd	r26, Z+52	; 0x34
    6410:	b5 a9       	ldd	r27, Z+53	; 0x35
    6412:	82 35       	cpi	r24, 0x52	; 82
    6414:	f2 e5       	ldi	r31, 0x52	; 82
    6416:	9f 07       	cpc	r25, r31
    6418:	f1 e6       	ldi	r31, 0x61	; 97
    641a:	af 07       	cpc	r26, r31
    641c:	f1 e4       	ldi	r31, 0x41	; 65
    641e:	bf 07       	cpc	r27, r31
    6420:	39 f5       	brne	.+78     	; 0x6470 <chk_mounted+0x468>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    6422:	f7 01       	movw	r30, r14
    6424:	ec 51       	subi	r30, 0x1C	; 28
    6426:	fe 4f       	sbci	r31, 0xFE	; 254
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    6428:	80 81       	ld	r24, Z
    642a:	91 81       	ldd	r25, Z+1	; 0x01
    642c:	a2 81       	ldd	r26, Z+2	; 0x02
    642e:	b3 81       	ldd	r27, Z+3	; 0x03
    6430:	82 37       	cpi	r24, 0x72	; 114
    6432:	22 e7       	ldi	r18, 0x72	; 114
    6434:	92 07       	cpc	r25, r18
    6436:	21 e4       	ldi	r18, 0x41	; 65
    6438:	a2 07       	cpc	r26, r18
    643a:	21 e6       	ldi	r18, 0x61	; 97
    643c:	b2 07       	cpc	r27, r18
    643e:	c1 f4       	brne	.+48     	; 0x6470 <chk_mounted+0x468>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    6440:	f7 01       	movw	r30, r14
    6442:	e4 51       	subi	r30, 0x14	; 20
    6444:	fe 4f       	sbci	r31, 0xFE	; 254
    6446:	80 81       	ld	r24, Z
    6448:	91 81       	ldd	r25, Z+1	; 0x01
    644a:	a2 81       	ldd	r26, Z+2	; 0x02
    644c:	b3 81       	ldd	r27, Z+3	; 0x03
    644e:	f1 01       	movw	r30, r2
    6450:	82 87       	std	Z+10, r24	; 0x0a
    6452:	93 87       	std	Z+11, r25	; 0x0b
    6454:	a4 87       	std	Z+12, r26	; 0x0c
    6456:	b5 87       	std	Z+13, r27	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    6458:	f7 01       	movw	r30, r14
    645a:	e8 51       	subi	r30, 0x18	; 24
    645c:	fe 4f       	sbci	r31, 0xFE	; 254
    645e:	80 81       	ld	r24, Z
    6460:	91 81       	ldd	r25, Z+1	; 0x01
    6462:	a2 81       	ldd	r26, Z+2	; 0x02
    6464:	b3 81       	ldd	r27, Z+3	; 0x03
    6466:	f1 01       	movw	r30, r2
    6468:	86 87       	std	Z+14, r24	; 0x0e
    646a:	97 87       	std	Z+15, r25	; 0x0f
    646c:	a0 8b       	std	Z+16, r26	; 0x10
    646e:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    6470:	d1 01       	movw	r26, r2
    6472:	1c 93       	st	X, r17
	fs->id = ++Fsid;		/* File system mount ID */
    6474:	80 91 91 02 	lds	r24, 0x0291
    6478:	90 91 92 02 	lds	r25, 0x0292
    647c:	01 96       	adiw	r24, 0x01	; 1
    647e:	90 93 92 02 	sts	0x0292, r25
    6482:	80 93 91 02 	sts	0x0291, r24
    6486:	17 96       	adiw	r26, 0x07	; 7
    6488:	9c 93       	st	X, r25
    648a:	8e 93       	st	-X, r24
    648c:	16 97       	sbiw	r26, 0x06	; 6
	fs->winsect = 0;		/* Invalidate sector cache */
    648e:	f1 01       	movw	r30, r2
    6490:	16 a6       	std	Z+46, r1	; 0x2e
    6492:	17 a6       	std	Z+47, r1	; 0x2f
    6494:	10 aa       	std	Z+48, r1	; 0x30
    6496:	11 aa       	std	Z+49, r1	; 0x31
	fs->wflag = 0;
    6498:	14 82       	std	Z+4, r1	; 0x04
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    649a:	56 96       	adiw	r26, 0x16	; 22
    649c:	1d 92       	st	X+, r1
    649e:	1d 92       	st	X+, r1
    64a0:	1d 92       	st	X+, r1
    64a2:	1c 92       	st	X, r1
    64a4:	59 97       	sbiw	r26, 0x19	; 25
    64a6:	06 c0       	rjmp	.+12     	; 0x64b4 <chk_mounted+0x4ac>
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
    64a8:	2b e0       	ldi	r18, 0x0B	; 11
    64aa:	30 e0       	ldi	r19, 0x00	; 0
    64ac:	11 c0       	rjmp	.+34     	; 0x64d0 <chk_mounted+0x4c8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    64ae:	2c e0       	ldi	r18, 0x0C	; 12
    64b0:	30 e0       	ldi	r19, 0x00	; 0
    64b2:	0e c0       	rjmp	.+28     	; 0x64d0 <chk_mounted+0x4c8>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
#endif
			return FR_OK;				/* The file system object is valid */
    64b4:	20 e0       	ldi	r18, 0x00	; 0
    64b6:	30 e0       	ldi	r19, 0x00	; 0
    64b8:	0b c0       	rjmp	.+22     	; 0x64d0 <chk_mounted+0x4c8>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    64ba:	23 e0       	ldi	r18, 0x03	; 3
    64bc:	30 e0       	ldi	r19, 0x00	; 0
    64be:	08 c0       	rjmp	.+16     	; 0x64d0 <chk_mounted+0x4c8>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    64c0:	2a e0       	ldi	r18, 0x0A	; 10
    64c2:	30 e0       	ldi	r19, 0x00	; 0
    64c4:	05 c0       	rjmp	.+10     	; 0x64d0 <chk_mounted+0x4c8>
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    64c6:	21 e0       	ldi	r18, 0x01	; 1
    64c8:	30 e0       	ldi	r19, 0x00	; 0
    64ca:	02 c0       	rjmp	.+4      	; 0x64d0 <chk_mounted+0x4c8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (FAT size must not be less than FAT sectors */
		return FR_NO_FILESYSTEM;
    64cc:	2d e0       	ldi	r18, 0x0D	; 13
    64ce:	30 e0       	ldi	r19, 0x00	; 0
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
    64d0:	c9 01       	movw	r24, r18
    64d2:	60 96       	adiw	r28, 0x10	; 16
    64d4:	e2 e1       	ldi	r30, 0x12	; 18
    64d6:	0c 94 ee 5c 	jmp	0xb9dc	; 0xb9dc <__epilogue_restores__>

000064da <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    64da:	a0 e0       	ldi	r26, 0x00	; 0
    64dc:	b0 e0       	ldi	r27, 0x00	; 0
    64de:	e3 e7       	ldi	r30, 0x73	; 115
    64e0:	f2 e3       	ldi	r31, 0x32	; 50
    64e2:	0c 94 d6 5c 	jmp	0xb9ac	; 0xb9ac <__prologue_saves__+0x8>
    64e6:	ec 01       	movw	r28, r24
    64e8:	4a 01       	movw	r8, r20
    64ea:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    64ec:	ce a4       	ldd	r12, Y+46	; 0x2e
    64ee:	df a4       	ldd	r13, Y+47	; 0x2f
    64f0:	e8 a8       	ldd	r14, Y+48	; 0x30
    64f2:	f9 a8       	ldd	r15, Y+49	; 0x31
	if (wsect != sector) {	/* Changed current window */
    64f4:	c4 16       	cp	r12, r20
    64f6:	d5 06       	cpc	r13, r21
    64f8:	e6 06       	cpc	r14, r22
    64fa:	f7 06       	cpc	r15, r23
    64fc:	09 f4       	brne	.+2      	; 0x6500 <move_window+0x26>
    64fe:	4b c0       	rjmp	.+150    	; 0x6596 <move_window+0xbc>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    6500:	8c 81       	ldd	r24, Y+4	; 0x04
    6502:	88 23       	and	r24, r24
    6504:	a1 f1       	breq	.+104    	; 0x656e <move_window+0x94>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    6506:	02 e3       	ldi	r16, 0x32	; 50
    6508:	60 2e       	mov	r6, r16
    650a:	71 2c       	mov	r7, r1
    650c:	6c 0e       	add	r6, r28
    650e:	7d 1e       	adc	r7, r29
    6510:	89 81       	ldd	r24, Y+1	; 0x01
    6512:	b3 01       	movw	r22, r6
    6514:	a7 01       	movw	r20, r14
    6516:	96 01       	movw	r18, r12
    6518:	01 e0       	ldi	r16, 0x01	; 1
    651a:	0e 94 e1 53 	call	0xa7c2	; 0xa7c2 <disk_write>
    651e:	00 97       	sbiw	r24, 0x00	; 0
    6520:	e9 f5       	brne	.+122    	; 0x659c <move_window+0xc2>
				return FR_DISK_ERR;
			fs->wflag = 0;
    6522:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    6524:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6526:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6528:	a8 a1       	ldd	r26, Y+32	; 0x20
    652a:	b9 a1       	ldd	r27, Y+33	; 0x21
    652c:	2a a1       	ldd	r18, Y+34	; 0x22
    652e:	3b a1       	ldd	r19, Y+35	; 0x23
    6530:	4c a1       	ldd	r20, Y+36	; 0x24
    6532:	5d a1       	ldd	r21, Y+37	; 0x25
    6534:	82 0f       	add	r24, r18
    6536:	93 1f       	adc	r25, r19
    6538:	a4 1f       	adc	r26, r20
    653a:	b5 1f       	adc	r27, r21
    653c:	c8 16       	cp	r12, r24
    653e:	d9 06       	cpc	r13, r25
    6540:	ea 06       	cpc	r14, r26
    6542:	fb 06       	cpc	r15, r27
    6544:	a0 f4       	brcc	.+40     	; 0x656e <move_window+0x94>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    6546:	1b 81       	ldd	r17, Y+3	; 0x03
    6548:	10 c0       	rjmp	.+32     	; 0x656a <move_window+0x90>
					wsect += fs->fsize;
    654a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    654c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    654e:	a8 a1       	ldd	r26, Y+32	; 0x20
    6550:	b9 a1       	ldd	r27, Y+33	; 0x21
    6552:	c8 0e       	add	r12, r24
    6554:	d9 1e       	adc	r13, r25
    6556:	ea 1e       	adc	r14, r26
    6558:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    655a:	89 81       	ldd	r24, Y+1	; 0x01
    655c:	b3 01       	movw	r22, r6
    655e:	a7 01       	movw	r20, r14
    6560:	96 01       	movw	r18, r12
    6562:	01 e0       	ldi	r16, 0x01	; 1
    6564:	0e 94 e1 53 	call	0xa7c2	; 0xa7c2 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    6568:	11 50       	subi	r17, 0x01	; 1
    656a:	12 30       	cpi	r17, 0x02	; 2
    656c:	70 f7       	brcc	.-36     	; 0x654a <move_window+0x70>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    656e:	81 14       	cp	r8, r1
    6570:	91 04       	cpc	r9, r1
    6572:	a1 04       	cpc	r10, r1
    6574:	b1 04       	cpc	r11, r1
    6576:	79 f0       	breq	.+30     	; 0x6596 <move_window+0xbc>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    6578:	be 01       	movw	r22, r28
    657a:	6e 5c       	subi	r22, 0xCE	; 206
    657c:	7f 4f       	sbci	r23, 0xFF	; 255
    657e:	89 81       	ldd	r24, Y+1	; 0x01
    6580:	a5 01       	movw	r20, r10
    6582:	94 01       	movw	r18, r8
    6584:	01 e0       	ldi	r16, 0x01	; 1
    6586:	0e 94 8a 53 	call	0xa714	; 0xa714 <disk_read>
    658a:	00 97       	sbiw	r24, 0x00	; 0
    658c:	39 f4       	brne	.+14     	; 0x659c <move_window+0xc2>
				return FR_DISK_ERR;
			fs->winsect = sector;
    658e:	8e a6       	std	Y+46, r8	; 0x2e
    6590:	9f a6       	std	Y+47, r9	; 0x2f
    6592:	a8 aa       	std	Y+48, r10	; 0x30
    6594:	b9 aa       	std	Y+49, r11	; 0x31
		}
	}

	return FR_OK;
    6596:	20 e0       	ldi	r18, 0x00	; 0
    6598:	30 e0       	ldi	r19, 0x00	; 0
    659a:	02 c0       	rjmp	.+4      	; 0x65a0 <move_window+0xc6>
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
    659c:	21 e0       	ldi	r18, 0x01	; 1
    659e:	30 e0       	ldi	r19, 0x00	; 0
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
    65a0:	c9 01       	movw	r24, r18
    65a2:	cd b7       	in	r28, 0x3d	; 61
    65a4:	de b7       	in	r29, 0x3e	; 62
    65a6:	ee e0       	ldi	r30, 0x0E	; 14
    65a8:	0c 94 f2 5c 	jmp	0xb9e4	; 0xb9e4 <__epilogue_restores__+0x8>

000065ac <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    65ac:	0f 93       	push	r16
    65ae:	1f 93       	push	r17
    65b0:	cf 93       	push	r28
    65b2:	df 93       	push	r29
    65b4:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    65b6:	40 e0       	ldi	r20, 0x00	; 0
    65b8:	50 e0       	ldi	r21, 0x00	; 0
    65ba:	60 e0       	ldi	r22, 0x00	; 0
    65bc:	70 e0       	ldi	r23, 0x00	; 0
    65be:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    65c2:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    65c4:	00 97       	sbiw	r24, 0x00	; 0
    65c6:	09 f0       	breq	.+2      	; 0x65ca <sync+0x1e>
    65c8:	5c c0       	rjmp	.+184    	; 0x6682 <sync+0xd6>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    65ca:	88 81       	ld	r24, Y
    65cc:	83 30       	cpi	r24, 0x03	; 3
    65ce:	09 f0       	breq	.+2      	; 0x65d2 <sync+0x26>
    65d0:	4c c0       	rjmp	.+152    	; 0x666a <sync+0xbe>
    65d2:	8d 81       	ldd	r24, Y+5	; 0x05
    65d4:	88 23       	and	r24, r24
    65d6:	09 f4       	brne	.+2      	; 0x65da <sync+0x2e>
    65d8:	48 c0       	rjmp	.+144    	; 0x666a <sync+0xbe>
			fs->winsect = 0;
    65da:	1e a6       	std	Y+46, r1	; 0x2e
    65dc:	1f a6       	std	Y+47, r1	; 0x2f
    65de:	18 aa       	std	Y+48, r1	; 0x30
    65e0:	19 aa       	std	Y+49, r1	; 0x31
			mem_set(fs->win, 0, 512);
    65e2:	8e 01       	movw	r16, r28
    65e4:	0e 5c       	subi	r16, 0xCE	; 206
    65e6:	1f 4f       	sbci	r17, 0xFF	; 255
    65e8:	c8 01       	movw	r24, r16
    65ea:	60 e0       	ldi	r22, 0x00	; 0
    65ec:	70 e0       	ldi	r23, 0x00	; 0
    65ee:	40 e0       	ldi	r20, 0x00	; 0
    65f0:	52 e0       	ldi	r21, 0x02	; 2
    65f2:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    65f6:	fe 01       	movw	r30, r28
    65f8:	e0 5d       	subi	r30, 0xD0	; 208
    65fa:	fd 4f       	sbci	r31, 0xFD	; 253
    65fc:	85 e5       	ldi	r24, 0x55	; 85
    65fe:	9a ea       	ldi	r25, 0xAA	; 170
    6600:	91 83       	std	Z+1, r25	; 0x01
    6602:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    6604:	82 e5       	ldi	r24, 0x52	; 82
    6606:	92 e5       	ldi	r25, 0x52	; 82
    6608:	a1 e6       	ldi	r26, 0x61	; 97
    660a:	b1 e4       	ldi	r27, 0x41	; 65
    660c:	8a ab       	std	Y+50, r24	; 0x32
    660e:	9b ab       	std	Y+51, r25	; 0x33
    6610:	ac ab       	std	Y+52, r26	; 0x34
    6612:	bd ab       	std	Y+53, r27	; 0x35
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    6614:	fe 01       	movw	r30, r28
    6616:	ea 5e       	subi	r30, 0xEA	; 234
    6618:	fd 4f       	sbci	r31, 0xFD	; 253
    661a:	82 e7       	ldi	r24, 0x72	; 114
    661c:	92 e7       	ldi	r25, 0x72	; 114
    661e:	a1 e4       	ldi	r26, 0x41	; 65
    6620:	b1 e6       	ldi	r27, 0x61	; 97
    6622:	80 83       	st	Z, r24
    6624:	91 83       	std	Z+1, r25	; 0x01
    6626:	a2 83       	std	Z+2, r26	; 0x02
    6628:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    662a:	fe 01       	movw	r30, r28
    662c:	e6 5e       	subi	r30, 0xE6	; 230
    662e:	fd 4f       	sbci	r31, 0xFD	; 253
    6630:	8e 85       	ldd	r24, Y+14	; 0x0e
    6632:	9f 85       	ldd	r25, Y+15	; 0x0f
    6634:	a8 89       	ldd	r26, Y+16	; 0x10
    6636:	b9 89       	ldd	r27, Y+17	; 0x11
    6638:	80 83       	st	Z, r24
    663a:	91 83       	std	Z+1, r25	; 0x01
    663c:	a2 83       	std	Z+2, r26	; 0x02
    663e:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    6640:	fe 01       	movw	r30, r28
    6642:	e2 5e       	subi	r30, 0xE2	; 226
    6644:	fd 4f       	sbci	r31, 0xFD	; 253
    6646:	8a 85       	ldd	r24, Y+10	; 0x0a
    6648:	9b 85       	ldd	r25, Y+11	; 0x0b
    664a:	ac 85       	ldd	r26, Y+12	; 0x0c
    664c:	bd 85       	ldd	r27, Y+13	; 0x0d
    664e:	80 83       	st	Z, r24
    6650:	91 83       	std	Z+1, r25	; 0x01
    6652:	a2 83       	std	Z+2, r26	; 0x02
    6654:	b3 83       	std	Z+3, r27	; 0x03
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    6656:	2a 89       	ldd	r18, Y+18	; 0x12
    6658:	3b 89       	ldd	r19, Y+19	; 0x13
    665a:	4c 89       	ldd	r20, Y+20	; 0x14
    665c:	5d 89       	ldd	r21, Y+21	; 0x15
    665e:	89 81       	ldd	r24, Y+1	; 0x01
    6660:	b8 01       	movw	r22, r16
    6662:	01 e0       	ldi	r16, 0x01	; 1
    6664:	0e 94 e1 53 	call	0xa7c2	; 0xa7c2 <disk_write>
			fs->fsi_flag = 0;
    6668:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
    666a:	89 81       	ldd	r24, Y+1	; 0x01
    666c:	60 e0       	ldi	r22, 0x00	; 0
    666e:	40 e0       	ldi	r20, 0x00	; 0
    6670:	50 e0       	ldi	r21, 0x00	; 0
    6672:	0e 94 57 54 	call	0xa8ae	; 0xa8ae <disk_ioctl>
    6676:	21 e0       	ldi	r18, 0x01	; 1
    6678:	30 e0       	ldi	r19, 0x00	; 0
    667a:	00 97       	sbiw	r24, 0x00	; 0
    667c:	11 f4       	brne	.+4      	; 0x6682 <sync+0xd6>
    667e:	20 e0       	ldi	r18, 0x00	; 0
    6680:	30 e0       	ldi	r19, 0x00	; 0
			res = FR_DISK_ERR;
	}

	return res;
}
    6682:	c9 01       	movw	r24, r18
    6684:	df 91       	pop	r29
    6686:	cf 91       	pop	r28
    6688:	1f 91       	pop	r17
    668a:	0f 91       	pop	r16
    668c:	08 95       	ret

0000668e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    668e:	a1 e0       	ldi	r26, 0x01	; 1
    6690:	b0 e0       	ldi	r27, 0x00	; 0
    6692:	ed e4       	ldi	r30, 0x4D	; 77
    6694:	f3 e3       	ldi	r31, 0x33	; 51
    6696:	0c 94 d6 5c 	jmp	0xb9ac	; 0xb9ac <__prologue_saves__+0x8>
    669a:	4c 01       	movw	r8, r24
    669c:	8b 01       	movw	r16, r22
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
    669e:	a9 e0       	ldi	r26, 0x09	; 9
    66a0:	aa 2e       	mov	r10, r26
    66a2:	b1 2c       	mov	r11, r1
    66a4:	a6 0e       	add	r10, r22
    66a6:	b7 1e       	adc	r11, r23
	if (dj->sect) {
    66a8:	fc 01       	movw	r30, r24
    66aa:	86 85       	ldd	r24, Z+14	; 0x0e
    66ac:	97 85       	ldd	r25, Z+15	; 0x0f
    66ae:	a0 89       	ldd	r26, Z+16	; 0x10
    66b0:	b1 89       	ldd	r27, Z+17	; 0x11
    66b2:	00 97       	sbiw	r24, 0x00	; 0
    66b4:	a1 05       	cpc	r26, r1
    66b6:	b1 05       	cpc	r27, r1
    66b8:	09 f4       	brne	.+2      	; 0x66bc <get_fileinfo+0x2e>
    66ba:	70 c0       	rjmp	.+224    	; 0x679c <get_fileinfo+0x10e>
		dir = dj->dir;
    66bc:	a2 89       	ldd	r26, Z+18	; 0x12
    66be:	b3 89       	ldd	r27, Z+19	; 0x13
		nt = dir[DIR_NTres];		/* NT flag */
    66c0:	1c 96       	adiw	r26, 0x0c	; 12
    66c2:	cc 90       	ld	r12, X
    66c4:	1c 97       	sbiw	r26, 0x0c	; 12
    66c6:	3d 01       	movw	r6, r26
    66c8:	c5 01       	movw	r24, r10
		for (i = 0; i < 8; i++) {	/* Copy name body */
    66ca:	40 e0       	ldi	r20, 0x00	; 0
    66cc:	50 e0       	ldi	r21, 0x00	; 0
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = (TCHAR)0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
    66ce:	2c 2d       	mov	r18, r12
    66d0:	30 e0       	ldi	r19, 0x00	; 0
    66d2:	28 70       	andi	r18, 0x08	; 8
    66d4:	30 70       	andi	r19, 0x00	; 0


	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
    66d6:	5c 01       	movw	r10, r24
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    66d8:	f3 01       	movw	r30, r6
    66da:	e1 90       	ld	r14, Z+
    66dc:	3f 01       	movw	r6, r30
			if (c == ' ') break;
    66de:	fe 2d       	mov	r31, r14
    66e0:	f0 32       	cpi	r31, 0x20	; 32
    66e2:	b1 f0       	breq	.+44     	; 0x6710 <get_fileinfo+0x82>
			if (c == 0x05) c = (TCHAR)0xE5;
    66e4:	f5 30       	cpi	r31, 0x05	; 5
    66e6:	11 f4       	brne	.+4      	; 0x66ec <get_fileinfo+0x5e>
    66e8:	f5 ee       	ldi	r31, 0xE5	; 229
    66ea:	ef 2e       	mov	r14, r31
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
    66ec:	21 15       	cp	r18, r1
    66ee:	31 05       	cpc	r19, r1
    66f0:	31 f0       	breq	.+12     	; 0x66fe <get_fileinfo+0x70>
    66f2:	6e 2d       	mov	r22, r14
    66f4:	61 54       	subi	r22, 0x41	; 65
    66f6:	6a 31       	cpi	r22, 0x1A	; 26
    66f8:	10 f4       	brcc	.+4      	; 0x66fe <get_fileinfo+0x70>
    66fa:	e0 e2       	ldi	r30, 0x20	; 32
    66fc:	ee 0e       	add	r14, r30
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
    66fe:	fc 01       	movw	r30, r24
    6700:	e1 92       	st	Z+, r14
    6702:	cf 01       	movw	r24, r30
    6704:	5f 01       	movw	r10, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    6706:	4f 5f       	subi	r20, 0xFF	; 255
    6708:	5f 4f       	sbci	r21, 0xFF	; 255
    670a:	48 30       	cpi	r20, 0x08	; 8
    670c:	51 05       	cpc	r21, r1
    670e:	19 f7       	brne	.-58     	; 0x66d6 <get_fileinfo+0x48>
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    6710:	ad 01       	movw	r20, r26
    6712:	48 5f       	subi	r20, 0xF8	; 248
    6714:	5f 4f       	sbci	r21, 0xFF	; 255
    6716:	18 96       	adiw	r26, 0x08	; 8
    6718:	2c 91       	ld	r18, X
    671a:	18 97       	sbiw	r26, 0x08	; 8
    671c:	20 32       	cpi	r18, 0x20	; 32
    671e:	19 f1       	breq	.+70     	; 0x6766 <get_fileinfo+0xd8>
			*p++ = '.';
    6720:	6e e2       	ldi	r22, 0x2E	; 46
    6722:	fc 01       	movw	r30, r24
    6724:	61 93       	st	Z+, r22
    6726:	9f 01       	movw	r18, r30
/*-----------------------------------------------------------------------*/
/* Get file information from directory entry                             */
/*-----------------------------------------------------------------------*/
#if _FS_MINIMIZE <= 1
static
void get_fileinfo (		/* No return code */
    6728:	bc 01       	movw	r22, r24
    672a:	6c 5f       	subi	r22, 0xFC	; 252
    672c:	7f 4f       	sbci	r23, 0xFF	; 255
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
    672e:	8c 2d       	mov	r24, r12
    6730:	90 e0       	ldi	r25, 0x00	; 0
    6732:	80 71       	andi	r24, 0x10	; 16
    6734:	90 70       	andi	r25, 0x00	; 0
/*-----------------------------------------------------------------------*/
/* Get file information from directory entry                             */
/*-----------------------------------------------------------------------*/
#if _FS_MINIMIZE <= 1
static
void get_fileinfo (		/* No return code */
    6736:	59 01       	movw	r10, r18
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
    6738:	fa 01       	movw	r30, r20
    673a:	e1 90       	ld	r14, Z+
    673c:	af 01       	movw	r20, r30
				if (c == ' ') break;
    673e:	fe 2d       	mov	r31, r14
    6740:	f0 32       	cpi	r31, 0x20	; 32
    6742:	89 f0       	breq	.+34     	; 0x6766 <get_fileinfo+0xd8>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
    6744:	00 97       	sbiw	r24, 0x00	; 0
    6746:	41 f0       	breq	.+16     	; 0x6758 <get_fileinfo+0xca>
    6748:	ef eb       	ldi	r30, 0xBF	; 191
    674a:	ce 2e       	mov	r12, r30
    674c:	ce 0c       	add	r12, r14
    674e:	ec 2d       	mov	r30, r12
    6750:	ea 31       	cpi	r30, 0x1A	; 26
    6752:	10 f4       	brcc	.+4      	; 0x6758 <get_fileinfo+0xca>
    6754:	f0 e2       	ldi	r31, 0x20	; 32
    6756:	ef 0e       	add	r14, r31
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
    6758:	f9 01       	movw	r30, r18
    675a:	e1 92       	st	Z+, r14
    675c:	9f 01       	movw	r18, r30
    675e:	5f 01       	movw	r10, r30
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    6760:	e6 17       	cp	r30, r22
    6762:	f7 07       	cpc	r31, r23
    6764:	41 f7       	brne	.-48     	; 0x6736 <get_fileinfo+0xa8>
				if (!c) c = '?';
#endif
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    6766:	1b 96       	adiw	r26, 0x0b	; 11
    6768:	8c 91       	ld	r24, X
    676a:	1b 97       	sbiw	r26, 0x0b	; 11
    676c:	f8 01       	movw	r30, r16
    676e:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    6770:	5c 96       	adiw	r26, 0x1c	; 28
    6772:	2d 91       	ld	r18, X+
    6774:	3d 91       	ld	r19, X+
    6776:	4d 91       	ld	r20, X+
    6778:	5c 91       	ld	r21, X
    677a:	5f 97       	sbiw	r26, 0x1f	; 31
    677c:	20 83       	st	Z, r18
    677e:	31 83       	std	Z+1, r19	; 0x01
    6780:	42 83       	std	Z+2, r20	; 0x02
    6782:	53 83       	std	Z+3, r21	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    6784:	58 96       	adiw	r26, 0x18	; 24
    6786:	8d 91       	ld	r24, X+
    6788:	9c 91       	ld	r25, X
    678a:	59 97       	sbiw	r26, 0x19	; 25
    678c:	95 83       	std	Z+5, r25	; 0x05
    678e:	84 83       	std	Z+4, r24	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    6790:	56 96       	adiw	r26, 0x16	; 22
    6792:	8d 91       	ld	r24, X+
    6794:	9c 91       	ld	r25, X
    6796:	57 97       	sbiw	r26, 0x17	; 23
    6798:	97 83       	std	Z+7, r25	; 0x07
    679a:	86 83       	std	Z+6, r24	; 0x06
	}
	*p = 0;		/* Terminate SFN str by a \0 */
    679c:	f5 01       	movw	r30, r10
    679e:	10 82       	st	Z, r1

#if _USE_LFN
	if (fno->lfname && fno->lfsize) {
    67a0:	f8 01       	movw	r30, r16
    67a2:	e6 88       	ldd	r14, Z+22	; 0x16
    67a4:	f7 88       	ldd	r15, Z+23	; 0x17
    67a6:	e1 14       	cp	r14, r1
    67a8:	f1 04       	cpc	r15, r1
    67aa:	09 f4       	brne	.+2      	; 0x67ae <get_fileinfo+0x120>
    67ac:	47 c0       	rjmp	.+142    	; 0x683c <get_fileinfo+0x1ae>
    67ae:	80 8d       	ldd	r24, Z+24	; 0x18
    67b0:	91 8d       	ldd	r25, Z+25	; 0x19
    67b2:	00 97       	sbiw	r24, 0x00	; 0
    67b4:	09 f4       	brne	.+2      	; 0x67b8 <get_fileinfo+0x12a>
    67b6:	42 c0       	rjmp	.+132    	; 0x683c <get_fileinfo+0x1ae>
		TCHAR *tp = fno->lfname;
		WCHAR w, *lfn;

		i = 0;
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
    67b8:	f4 01       	movw	r30, r8
    67ba:	86 85       	ldd	r24, Z+14	; 0x0e
    67bc:	97 85       	ldd	r25, Z+15	; 0x0f
    67be:	a0 89       	ldd	r26, Z+16	; 0x10
    67c0:	b1 89       	ldd	r27, Z+17	; 0x11
    67c2:	00 97       	sbiw	r24, 0x00	; 0
    67c4:	a1 05       	cpc	r26, r1
    67c6:	b1 05       	cpc	r27, r1
    67c8:	99 f1       	breq	.+102    	; 0x6830 <get_fileinfo+0x1a2>
    67ca:	80 8d       	ldd	r24, Z+24	; 0x18
    67cc:	91 8d       	ldd	r25, Z+25	; 0x19
    67ce:	ff ef       	ldi	r31, 0xFF	; 255
    67d0:	8f 3f       	cpi	r24, 0xFF	; 255
    67d2:	9f 07       	cpc	r25, r31
    67d4:	69 f1       	breq	.+90     	; 0x6830 <get_fileinfo+0x1a2>
			lfn = dj->lfn;
    67d6:	f4 01       	movw	r30, r8
    67d8:	c6 88       	ldd	r12, Z+22	; 0x16
    67da:	d7 88       	ldd	r13, Z+23	; 0x17
#if _USE_LFN
	if (fno->lfname && fno->lfsize) {
		TCHAR *tp = fno->lfname;
		WCHAR w, *lfn;

		i = 0;
    67dc:	aa 24       	eor	r10, r10
    67de:	bb 24       	eor	r11, r11
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
			lfn = dj->lfn;
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
    67e0:	20 c0       	rjmp	.+64     	; 0x6822 <get_fileinfo+0x194>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
    67e2:	60 e0       	ldi	r22, 0x00	; 0
    67e4:	70 e0       	ldi	r23, 0x00	; 0
    67e6:	0e 94 e4 55 	call	0xabc8	; 0xabc8 <ff_convert>
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
    67ea:	00 97       	sbiw	r24, 0x00	; 0
    67ec:	09 f1       	breq	.+66     	; 0x6830 <get_fileinfo+0x1a2>
				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
    67ee:	8f 3f       	cpi	r24, 0xFF	; 255
    67f0:	91 05       	cpc	r25, r1
    67f2:	41 f0       	breq	.+16     	; 0x6804 <get_fileinfo+0x176>
    67f4:	38 f0       	brcs	.+14     	; 0x6804 <get_fileinfo+0x176>
					tp[i++] = (TCHAR)(w >> 8);
    67f6:	f7 01       	movw	r30, r14
    67f8:	ea 0d       	add	r30, r10
    67fa:	fb 1d       	adc	r31, r11
    67fc:	90 83       	st	Z, r25
    67fe:	08 94       	sec
    6800:	a1 1c       	adc	r10, r1
    6802:	b1 1c       	adc	r11, r1
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
    6804:	f8 01       	movw	r30, r16
    6806:	20 8d       	ldd	r18, Z+24	; 0x18
    6808:	31 8d       	ldd	r19, Z+25	; 0x19
    680a:	21 50       	subi	r18, 0x01	; 1
    680c:	30 40       	sbci	r19, 0x00	; 0
    680e:	a2 16       	cp	r10, r18
    6810:	b3 06       	cpc	r11, r19
    6812:	70 f4       	brcc	.+28     	; 0x6830 <get_fileinfo+0x1a2>
				tp[i++] = (TCHAR)w;
    6814:	f7 01       	movw	r30, r14
    6816:	ea 0d       	add	r30, r10
    6818:	fb 1d       	adc	r31, r11
    681a:	80 83       	st	Z, r24
    681c:	08 94       	sec
    681e:	a1 1c       	adc	r10, r1
    6820:	b1 1c       	adc	r11, r1
		WCHAR w, *lfn;

		i = 0;
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
			lfn = dj->lfn;
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
    6822:	f6 01       	movw	r30, r12
    6824:	81 91       	ld	r24, Z+
    6826:	91 91       	ld	r25, Z+
    6828:	6f 01       	movw	r12, r30
    682a:	00 97       	sbiw	r24, 0x00	; 0
    682c:	d1 f6       	brne	.-76     	; 0x67e2 <get_fileinfo+0x154>
    682e:	02 c0       	rjmp	.+4      	; 0x6834 <get_fileinfo+0x1a6>
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					tp[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
    6830:	aa 24       	eor	r10, r10
    6832:	bb 24       	eor	r11, r11
				tp[i++] = (TCHAR)w;
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
    6834:	f5 01       	movw	r30, r10
    6836:	ee 0d       	add	r30, r14
    6838:	ff 1d       	adc	r31, r15
    683a:	10 82       	st	Z, r1
	}
#endif
}
    683c:	21 96       	adiw	r28, 0x01	; 1
    683e:	ee e0       	ldi	r30, 0x0E	; 14
    6840:	0c 94 f2 5c 	jmp	0xb9e4	; 0xb9e4 <__epilogue_restores__+0x8>

00006844 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    6844:	cf 93       	push	r28
    6846:	df 93       	push	r29
    6848:	ec 01       	movw	r28, r24
    684a:	cb 01       	movw	r24, r22
    684c:	ba 01       	movw	r22, r20
	clst -= 2;
    684e:	62 50       	subi	r22, 0x02	; 2
    6850:	70 40       	sbci	r23, 0x00	; 0
    6852:	80 40       	sbci	r24, 0x00	; 0
    6854:	90 40       	sbci	r25, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    6856:	2a 8d       	ldd	r18, Y+26	; 0x1a
    6858:	3b 8d       	ldd	r19, Y+27	; 0x1b
    685a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    685c:	5d 8d       	ldd	r21, Y+29	; 0x1d
    685e:	22 50       	subi	r18, 0x02	; 2
    6860:	30 40       	sbci	r19, 0x00	; 0
    6862:	40 40       	sbci	r20, 0x00	; 0
    6864:	50 40       	sbci	r21, 0x00	; 0
    6866:	62 17       	cp	r22, r18
    6868:	73 07       	cpc	r23, r19
    686a:	84 07       	cpc	r24, r20
    686c:	95 07       	cpc	r25, r21
    686e:	88 f4       	brcc	.+34     	; 0x6892 <clust2sect+0x4e>
	return clst * fs->csize + fs->database;
    6870:	2a 81       	ldd	r18, Y+2	; 0x02
    6872:	30 e0       	ldi	r19, 0x00	; 0
    6874:	40 e0       	ldi	r20, 0x00	; 0
    6876:	50 e0       	ldi	r21, 0x00	; 0
    6878:	0e 94 4f 5c 	call	0xb89e	; 0xb89e <__mulsi3>
    687c:	9b 01       	movw	r18, r22
    687e:	ac 01       	movw	r20, r24
    6880:	8a a5       	ldd	r24, Y+42	; 0x2a
    6882:	9b a5       	ldd	r25, Y+43	; 0x2b
    6884:	ac a5       	ldd	r26, Y+44	; 0x2c
    6886:	bd a5       	ldd	r27, Y+45	; 0x2d
    6888:	28 0f       	add	r18, r24
    688a:	39 1f       	adc	r19, r25
    688c:	4a 1f       	adc	r20, r26
    688e:	5b 1f       	adc	r21, r27
    6890:	04 c0       	rjmp	.+8      	; 0x689a <clust2sect+0x56>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    6892:	20 e0       	ldi	r18, 0x00	; 0
    6894:	30 e0       	ldi	r19, 0x00	; 0
    6896:	40 e0       	ldi	r20, 0x00	; 0
    6898:	50 e0       	ldi	r21, 0x00	; 0
	return clst * fs->csize + fs->database;
}
    689a:	b9 01       	movw	r22, r18
    689c:	ca 01       	movw	r24, r20
    689e:	df 91       	pop	r29
    68a0:	cf 91       	pop	r28
    68a2:	08 95       	ret

000068a4 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    68a4:	a0 e0       	ldi	r26, 0x00	; 0
    68a6:	b0 e0       	ldi	r27, 0x00	; 0
    68a8:	e8 e5       	ldi	r30, 0x58	; 88
    68aa:	f4 e3       	ldi	r31, 0x34	; 52
    68ac:	0c 94 db 5c 	jmp	0xb9b6	; 0xb9b6 <__prologue_saves__+0x12>
    68b0:	ec 01       	movw	r28, r24
    68b2:	6a 01       	movw	r12, r20
    68b4:	7b 01       	movw	r14, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    68b6:	42 30       	cpi	r20, 0x02	; 2
    68b8:	51 05       	cpc	r21, r1
    68ba:	61 05       	cpc	r22, r1
    68bc:	71 05       	cpc	r23, r1
    68be:	08 f4       	brcc	.+2      	; 0x68c2 <get_fat+0x1e>
    68c0:	a2 c0       	rjmp	.+324    	; 0x6a06 <get_fat+0x162>
    68c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    68c4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    68c6:	ac 8d       	ldd	r26, Y+28	; 0x1c
    68c8:	bd 8d       	ldd	r27, Y+29	; 0x1d
    68ca:	48 17       	cp	r20, r24
    68cc:	59 07       	cpc	r21, r25
    68ce:	6a 07       	cpc	r22, r26
    68d0:	7b 07       	cpc	r23, r27
    68d2:	08 f0       	brcs	.+2      	; 0x68d6 <get_fat+0x32>
    68d4:	98 c0       	rjmp	.+304    	; 0x6a06 <get_fat+0x162>
		return 1;

	switch (fs->fs_type) {
    68d6:	88 81       	ld	r24, Y
    68d8:	82 30       	cpi	r24, 0x02	; 2
    68da:	09 f4       	brne	.+2      	; 0x68de <get_fat+0x3a>
    68dc:	56 c0       	rjmp	.+172    	; 0x698a <get_fat+0xe6>
    68de:	83 30       	cpi	r24, 0x03	; 3
    68e0:	09 f4       	brne	.+2      	; 0x68e4 <get_fat+0x40>
    68e2:	6f c0       	rjmp	.+222    	; 0x69c2 <get_fat+0x11e>
    68e4:	81 30       	cpi	r24, 0x01	; 1
    68e6:	09 f0       	breq	.+2      	; 0x68ea <get_fat+0x46>
    68e8:	93 c0       	rjmp	.+294    	; 0x6a10 <get_fat+0x16c>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    68ea:	8a 01       	movw	r16, r20
    68ec:	16 95       	lsr	r17
    68ee:	07 95       	ror	r16
    68f0:	04 0f       	add	r16, r20
    68f2:	15 1f       	adc	r17, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    68f4:	a8 01       	movw	r20, r16
    68f6:	45 2f       	mov	r20, r21
    68f8:	55 27       	eor	r21, r21
    68fa:	46 95       	lsr	r20
    68fc:	60 e0       	ldi	r22, 0x00	; 0
    68fe:	70 e0       	ldi	r23, 0x00	; 0
    6900:	8a a1       	ldd	r24, Y+34	; 0x22
    6902:	9b a1       	ldd	r25, Y+35	; 0x23
    6904:	ac a1       	ldd	r26, Y+36	; 0x24
    6906:	bd a1       	ldd	r27, Y+37	; 0x25
    6908:	48 0f       	add	r20, r24
    690a:	59 1f       	adc	r21, r25
    690c:	6a 1f       	adc	r22, r26
    690e:	7b 1f       	adc	r23, r27
    6910:	ce 01       	movw	r24, r28
    6912:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    6916:	00 97       	sbiw	r24, 0x00	; 0
    6918:	09 f0       	breq	.+2      	; 0x691c <get_fat+0x78>
    691a:	7a c0       	rjmp	.+244    	; 0x6a10 <get_fat+0x16c>
		wc = fs->win[bc % SS(fs)]; bc++;
    691c:	f8 01       	movw	r30, r16
    691e:	f1 70       	andi	r31, 0x01	; 1
    6920:	ec 0f       	add	r30, r28
    6922:	fd 1f       	adc	r31, r29
    6924:	b2 a8       	ldd	r11, Z+50	; 0x32
    6926:	0f 5f       	subi	r16, 0xFF	; 255
    6928:	1f 4f       	sbci	r17, 0xFF	; 255
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    692a:	a8 01       	movw	r20, r16
    692c:	45 2f       	mov	r20, r21
    692e:	55 27       	eor	r21, r21
    6930:	46 95       	lsr	r20
    6932:	60 e0       	ldi	r22, 0x00	; 0
    6934:	70 e0       	ldi	r23, 0x00	; 0
    6936:	8a a1       	ldd	r24, Y+34	; 0x22
    6938:	9b a1       	ldd	r25, Y+35	; 0x23
    693a:	ac a1       	ldd	r26, Y+36	; 0x24
    693c:	bd a1       	ldd	r27, Y+37	; 0x25
    693e:	48 0f       	add	r20, r24
    6940:	59 1f       	adc	r21, r25
    6942:	6a 1f       	adc	r22, r26
    6944:	7b 1f       	adc	r23, r27
    6946:	ce 01       	movw	r24, r28
    6948:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    694c:	00 97       	sbiw	r24, 0x00	; 0
    694e:	09 f0       	breq	.+2      	; 0x6952 <get_fat+0xae>
    6950:	5f c0       	rjmp	.+190    	; 0x6a10 <get_fat+0x16c>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    6952:	2b 2d       	mov	r18, r11
    6954:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    6956:	11 70       	andi	r17, 0x01	; 1
    6958:	0c 0f       	add	r16, r28
    695a:	1d 1f       	adc	r17, r29
    695c:	f8 01       	movw	r30, r16
    695e:	92 a9       	ldd	r25, Z+50	; 0x32
    6960:	80 e0       	ldi	r24, 0x00	; 0
    6962:	28 2b       	or	r18, r24
    6964:	39 2b       	or	r19, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    6966:	f1 e0       	ldi	r31, 0x01	; 1
    6968:	cf 22       	and	r12, r31
    696a:	dd 24       	eor	r13, r13
    696c:	c1 14       	cp	r12, r1
    696e:	d1 04       	cpc	r13, r1
    6970:	31 f0       	breq	.+12     	; 0x697e <get_fat+0xda>
    6972:	44 e0       	ldi	r20, 0x04	; 4
    6974:	36 95       	lsr	r19
    6976:	27 95       	ror	r18
    6978:	4a 95       	dec	r20
    697a:	e1 f7       	brne	.-8      	; 0x6974 <get_fat+0xd0>
    697c:	1f c0       	rjmp	.+62     	; 0x69bc <get_fat+0x118>
    697e:	40 e0       	ldi	r20, 0x00	; 0
    6980:	50 e0       	ldi	r21, 0x00	; 0
    6982:	3f 70       	andi	r19, 0x0F	; 15
    6984:	40 70       	andi	r20, 0x00	; 0
    6986:	50 70       	andi	r21, 0x00	; 0
    6988:	47 c0       	rjmp	.+142    	; 0x6a18 <get_fat+0x174>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    698a:	45 2f       	mov	r20, r21
    698c:	56 2f       	mov	r21, r22
    698e:	67 2f       	mov	r22, r23
    6990:	77 27       	eor	r23, r23
    6992:	8a a1       	ldd	r24, Y+34	; 0x22
    6994:	9b a1       	ldd	r25, Y+35	; 0x23
    6996:	ac a1       	ldd	r26, Y+36	; 0x24
    6998:	bd a1       	ldd	r27, Y+37	; 0x25
    699a:	48 0f       	add	r20, r24
    699c:	59 1f       	adc	r21, r25
    699e:	6a 1f       	adc	r22, r26
    69a0:	7b 1f       	adc	r23, r27
    69a2:	ce 01       	movw	r24, r28
    69a4:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    69a8:	00 97       	sbiw	r24, 0x00	; 0
    69aa:	91 f5       	brne	.+100    	; 0x6a10 <get_fat+0x16c>
		p = &fs->win[clst * 2 % SS(fs)];
    69ac:	f6 01       	movw	r30, r12
    69ae:	ee 0f       	add	r30, r30
    69b0:	ff 1f       	adc	r31, r31
    69b2:	f1 70       	andi	r31, 0x01	; 1
		return LD_WORD(p);
    69b4:	ec 0f       	add	r30, r28
    69b6:	fd 1f       	adc	r31, r29
    69b8:	22 a9       	ldd	r18, Z+50	; 0x32
    69ba:	33 a9       	ldd	r19, Z+51	; 0x33
    69bc:	40 e0       	ldi	r20, 0x00	; 0
    69be:	50 e0       	ldi	r21, 0x00	; 0
    69c0:	2b c0       	rjmp	.+86     	; 0x6a18 <get_fat+0x174>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    69c2:	87 e0       	ldi	r24, 0x07	; 7
    69c4:	76 95       	lsr	r23
    69c6:	67 95       	ror	r22
    69c8:	57 95       	ror	r21
    69ca:	47 95       	ror	r20
    69cc:	8a 95       	dec	r24
    69ce:	d1 f7       	brne	.-12     	; 0x69c4 <get_fat+0x120>
    69d0:	8a a1       	ldd	r24, Y+34	; 0x22
    69d2:	9b a1       	ldd	r25, Y+35	; 0x23
    69d4:	ac a1       	ldd	r26, Y+36	; 0x24
    69d6:	bd a1       	ldd	r27, Y+37	; 0x25
    69d8:	48 0f       	add	r20, r24
    69da:	59 1f       	adc	r21, r25
    69dc:	6a 1f       	adc	r22, r26
    69de:	7b 1f       	adc	r23, r27
    69e0:	ce 01       	movw	r24, r28
    69e2:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    69e6:	00 97       	sbiw	r24, 0x00	; 0
    69e8:	99 f4       	brne	.+38     	; 0x6a10 <get_fat+0x16c>
		p = &fs->win[clst * 4 % SS(fs)];
    69ea:	f6 01       	movw	r30, r12
    69ec:	ee 0f       	add	r30, r30
    69ee:	ff 1f       	adc	r31, r31
    69f0:	ee 0f       	add	r30, r30
    69f2:	ff 1f       	adc	r31, r31
    69f4:	f1 70       	andi	r31, 0x01	; 1
		return LD_DWORD(p) & 0x0FFFFFFF;
    69f6:	ec 0f       	add	r30, r28
    69f8:	fd 1f       	adc	r31, r29
    69fa:	22 a9       	ldd	r18, Z+50	; 0x32
    69fc:	33 a9       	ldd	r19, Z+51	; 0x33
    69fe:	44 a9       	ldd	r20, Z+52	; 0x34
    6a00:	55 a9       	ldd	r21, Z+53	; 0x35
    6a02:	5f 70       	andi	r21, 0x0F	; 15
    6a04:	09 c0       	rjmp	.+18     	; 0x6a18 <get_fat+0x174>
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;
    6a06:	21 e0       	ldi	r18, 0x01	; 1
    6a08:	30 e0       	ldi	r19, 0x00	; 0
    6a0a:	40 e0       	ldi	r20, 0x00	; 0
    6a0c:	50 e0       	ldi	r21, 0x00	; 0
    6a0e:	04 c0       	rjmp	.+8      	; 0x6a18 <get_fat+0x174>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    6a10:	2f ef       	ldi	r18, 0xFF	; 255
    6a12:	3f ef       	ldi	r19, 0xFF	; 255
    6a14:	4f ef       	ldi	r20, 0xFF	; 255
    6a16:	5f ef       	ldi	r21, 0xFF	; 255
}
    6a18:	b9 01       	movw	r22, r18
    6a1a:	ca 01       	movw	r24, r20
    6a1c:	cd b7       	in	r28, 0x3d	; 61
    6a1e:	de b7       	in	r29, 0x3e	; 62
    6a20:	e9 e0       	ldi	r30, 0x09	; 9
    6a22:	0c 94 f7 5c 	jmp	0xb9ee	; 0xb9ee <__epilogue_restores__+0x12>

00006a26 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    6a26:	ef 92       	push	r14
    6a28:	ff 92       	push	r15
    6a2a:	0f 93       	push	r16
    6a2c:	1f 93       	push	r17
    6a2e:	cf 93       	push	r28
    6a30:	df 93       	push	r29
    6a32:	ec 01       	movw	r28, r24
    6a34:	8b 01       	movw	r16, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    6a36:	7d 83       	std	Y+5, r23	; 0x05
    6a38:	6c 83       	std	Y+4, r22	; 0x04
	clst = dj->sclust;
    6a3a:	4e 81       	ldd	r20, Y+6	; 0x06
    6a3c:	5f 81       	ldd	r21, Y+7	; 0x07
    6a3e:	68 85       	ldd	r22, Y+8	; 0x08
    6a40:	79 85       	ldd	r23, Y+9	; 0x09
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    6a42:	41 30       	cpi	r20, 0x01	; 1
    6a44:	51 05       	cpc	r21, r1
    6a46:	61 05       	cpc	r22, r1
    6a48:	71 05       	cpc	r23, r1
    6a4a:	09 f4       	brne	.+2      	; 0x6a4e <dir_sdi+0x28>
    6a4c:	8c c0       	rjmp	.+280    	; 0x6b66 <dir_sdi+0x140>
    6a4e:	e8 81       	ld	r30, Y
    6a50:	f9 81       	ldd	r31, Y+1	; 0x01
    6a52:	82 8d       	ldd	r24, Z+26	; 0x1a
    6a54:	93 8d       	ldd	r25, Z+27	; 0x1b
    6a56:	a4 8d       	ldd	r26, Z+28	; 0x1c
    6a58:	b5 8d       	ldd	r27, Z+29	; 0x1d
    6a5a:	48 17       	cp	r20, r24
    6a5c:	59 07       	cpc	r21, r25
    6a5e:	6a 07       	cpc	r22, r26
    6a60:	7b 07       	cpc	r23, r27
    6a62:	08 f0       	brcs	.+2      	; 0x6a66 <dir_sdi+0x40>
    6a64:	80 c0       	rjmp	.+256    	; 0x6b66 <dir_sdi+0x140>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    6a66:	41 15       	cp	r20, r1
    6a68:	51 05       	cpc	r21, r1
    6a6a:	61 05       	cpc	r22, r1
    6a6c:	71 05       	cpc	r23, r1
    6a6e:	19 f5       	brne	.+70     	; 0x6ab6 <dir_sdi+0x90>
    6a70:	80 81       	ld	r24, Z
    6a72:	83 30       	cpi	r24, 0x03	; 3
    6a74:	49 f4       	brne	.+18     	; 0x6a88 <dir_sdi+0x62>
		clst = dj->fs->dirbase;
    6a76:	46 a1       	ldd	r20, Z+38	; 0x26
    6a78:	57 a1       	ldd	r21, Z+39	; 0x27
    6a7a:	60 a5       	ldd	r22, Z+40	; 0x28
    6a7c:	71 a5       	ldd	r23, Z+41	; 0x29

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    6a7e:	41 15       	cp	r20, r1
    6a80:	51 05       	cpc	r21, r1
    6a82:	61 05       	cpc	r22, r1
    6a84:	71 05       	cpc	r23, r1
    6a86:	b9 f4       	brne	.+46     	; 0x6ab6 <dir_sdi+0x90>
		dj->clust = clst;
    6a88:	1a 86       	std	Y+10, r1	; 0x0a
    6a8a:	1b 86       	std	Y+11, r1	; 0x0b
    6a8c:	1c 86       	std	Y+12, r1	; 0x0c
    6a8e:	1d 86       	std	Y+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    6a90:	80 85       	ldd	r24, Z+8	; 0x08
    6a92:	91 85       	ldd	r25, Z+9	; 0x09
    6a94:	08 17       	cp	r16, r24
    6a96:	19 07       	cpc	r17, r25
    6a98:	08 f0       	brcs	.+2      	; 0x6a9c <dir_sdi+0x76>
    6a9a:	65 c0       	rjmp	.+202    	; 0x6b66 <dir_sdi+0x140>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    6a9c:	c8 01       	movw	r24, r16
    6a9e:	24 e0       	ldi	r18, 0x04	; 4
    6aa0:	96 95       	lsr	r25
    6aa2:	87 95       	ror	r24
    6aa4:	2a 95       	dec	r18
    6aa6:	e1 f7       	brne	.-8      	; 0x6aa0 <dir_sdi+0x7a>
    6aa8:	a0 e0       	ldi	r26, 0x00	; 0
    6aaa:	b0 e0       	ldi	r27, 0x00	; 0
    6aac:	26 a1       	ldd	r18, Z+38	; 0x26
    6aae:	37 a1       	ldd	r19, Z+39	; 0x27
    6ab0:	40 a5       	ldd	r20, Z+40	; 0x28
    6ab2:	51 a5       	ldd	r21, Z+41	; 0x29
    6ab4:	3c c0       	rjmp	.+120    	; 0x6b2e <dir_sdi+0x108>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    6ab6:	e2 80       	ldd	r14, Z+2	; 0x02
    6ab8:	ff 24       	eor	r15, r15
    6aba:	b4 e0       	ldi	r27, 0x04	; 4
    6abc:	ee 0c       	add	r14, r14
    6abe:	ff 1c       	adc	r15, r15
    6ac0:	ba 95       	dec	r27
    6ac2:	e1 f7       	brne	.-8      	; 0x6abc <dir_sdi+0x96>
		while (idx >= ic) {	/* Follow cluster chain */
    6ac4:	1f c0       	rjmp	.+62     	; 0x6b04 <dir_sdi+0xde>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    6ac6:	0e 94 52 34 	call	0x68a4	; 0x68a4 <get_fat>
    6aca:	ab 01       	movw	r20, r22
    6acc:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    6ace:	4f 3f       	cpi	r20, 0xFF	; 255
    6ad0:	8f ef       	ldi	r24, 0xFF	; 255
    6ad2:	58 07       	cpc	r21, r24
    6ad4:	8f ef       	ldi	r24, 0xFF	; 255
    6ad6:	68 07       	cpc	r22, r24
    6ad8:	8f ef       	ldi	r24, 0xFF	; 255
    6ada:	78 07       	cpc	r23, r24
    6adc:	09 f4       	brne	.+2      	; 0x6ae0 <dir_sdi+0xba>
    6ade:	40 c0       	rjmp	.+128    	; 0x6b60 <dir_sdi+0x13a>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    6ae0:	42 30       	cpi	r20, 0x02	; 2
    6ae2:	51 05       	cpc	r21, r1
    6ae4:	61 05       	cpc	r22, r1
    6ae6:	71 05       	cpc	r23, r1
    6ae8:	f0 f1       	brcs	.+124    	; 0x6b66 <dir_sdi+0x140>
    6aea:	e8 81       	ld	r30, Y
    6aec:	f9 81       	ldd	r31, Y+1	; 0x01
    6aee:	82 8d       	ldd	r24, Z+26	; 0x1a
    6af0:	93 8d       	ldd	r25, Z+27	; 0x1b
    6af2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    6af4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    6af6:	48 17       	cp	r20, r24
    6af8:	59 07       	cpc	r21, r25
    6afa:	6a 07       	cpc	r22, r26
    6afc:	7b 07       	cpc	r23, r27
    6afe:	98 f5       	brcc	.+102    	; 0x6b66 <dir_sdi+0x140>
				return FR_INT_ERR;
			idx -= ic;
    6b00:	0e 19       	sub	r16, r14
    6b02:	1f 09       	sbc	r17, r15
    6b04:	88 81       	ld	r24, Y
    6b06:	99 81       	ldd	r25, Y+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    6b08:	0e 15       	cp	r16, r14
    6b0a:	1f 05       	cpc	r17, r15
    6b0c:	e0 f6       	brcc	.-72     	; 0x6ac6 <dir_sdi+0xa0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    6b0e:	4a 87       	std	Y+10, r20	; 0x0a
    6b10:	5b 87       	std	Y+11, r21	; 0x0b
    6b12:	6c 87       	std	Y+12, r22	; 0x0c
    6b14:	7d 87       	std	Y+13, r23	; 0x0d
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    6b16:	0e 94 22 34 	call	0x6844	; 0x6844 <clust2sect>
    6b1a:	9b 01       	movw	r18, r22
    6b1c:	ac 01       	movw	r20, r24
    6b1e:	c8 01       	movw	r24, r16
    6b20:	a4 e0       	ldi	r26, 0x04	; 4
    6b22:	96 95       	lsr	r25
    6b24:	87 95       	ror	r24
    6b26:	aa 95       	dec	r26
    6b28:	e1 f7       	brne	.-8      	; 0x6b22 <dir_sdi+0xfc>
    6b2a:	a0 e0       	ldi	r26, 0x00	; 0
    6b2c:	b0 e0       	ldi	r27, 0x00	; 0
    6b2e:	82 0f       	add	r24, r18
    6b30:	93 1f       	adc	r25, r19
    6b32:	a4 1f       	adc	r26, r20
    6b34:	b5 1f       	adc	r27, r21
    6b36:	8e 87       	std	Y+14, r24	; 0x0e
    6b38:	9f 87       	std	Y+15, r25	; 0x0f
    6b3a:	a8 8b       	std	Y+16, r26	; 0x10
    6b3c:	b9 8b       	std	Y+17, r27	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    6b3e:	88 81       	ld	r24, Y
    6b40:	99 81       	ldd	r25, Y+1	; 0x01
    6b42:	c2 96       	adiw	r24, 0x32	; 50
    6b44:	0f 70       	andi	r16, 0x0F	; 15
    6b46:	10 70       	andi	r17, 0x00	; 0
    6b48:	f5 e0       	ldi	r31, 0x05	; 5
    6b4a:	00 0f       	add	r16, r16
    6b4c:	11 1f       	adc	r17, r17
    6b4e:	fa 95       	dec	r31
    6b50:	e1 f7       	brne	.-8      	; 0x6b4a <dir_sdi+0x124>
    6b52:	80 0f       	add	r24, r16
    6b54:	91 1f       	adc	r25, r17
    6b56:	9b 8b       	std	Y+19, r25	; 0x13
    6b58:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;	/* Seek succeeded */
    6b5a:	20 e0       	ldi	r18, 0x00	; 0
    6b5c:	30 e0       	ldi	r19, 0x00	; 0
    6b5e:	05 c0       	rjmp	.+10     	; 0x6b6a <dir_sdi+0x144>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    6b60:	21 e0       	ldi	r18, 0x01	; 1
    6b62:	30 e0       	ldi	r19, 0x00	; 0
    6b64:	02 c0       	rjmp	.+4      	; 0x6b6a <dir_sdi+0x144>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
    6b66:	22 e0       	ldi	r18, 0x02	; 2
    6b68:	30 e0       	ldi	r19, 0x00	; 0
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    6b6a:	c9 01       	movw	r24, r18
    6b6c:	cd b7       	in	r28, 0x3d	; 61
    6b6e:	de b7       	in	r29, 0x3e	; 62
    6b70:	e6 e0       	ldi	r30, 0x06	; 6
    6b72:	0c 94 fa 5c 	jmp	0xb9f4	; 0xb9f4 <__epilogue_restores__+0x18>

00006b76 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    6b76:	a0 e0       	ldi	r26, 0x00	; 0
    6b78:	b0 e0       	ldi	r27, 0x00	; 0
    6b7a:	e1 ec       	ldi	r30, 0xC1	; 193
    6b7c:	f5 e3       	ldi	r31, 0x35	; 53
    6b7e:	0c 94 d8 5c 	jmp	0xb9b0	; 0xb9b0 <__prologue_saves__+0xc>
    6b82:	ec 01       	movw	r28, r24
    6b84:	6a 01       	movw	r12, r20
    6b86:	7b 01       	movw	r14, r22
    6b88:	48 01       	movw	r8, r16
    6b8a:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    6b8c:	42 30       	cpi	r20, 0x02	; 2
    6b8e:	51 05       	cpc	r21, r1
    6b90:	61 05       	cpc	r22, r1
    6b92:	71 05       	cpc	r23, r1
    6b94:	08 f4       	brcc	.+2      	; 0x6b98 <put_fat+0x22>
    6b96:	c8 c0       	rjmp	.+400    	; 0x6d28 <put_fat+0x1b2>
    6b98:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6b9a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6b9c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    6b9e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    6ba0:	48 17       	cp	r20, r24
    6ba2:	59 07       	cpc	r21, r25
    6ba4:	6a 07       	cpc	r22, r26
    6ba6:	7b 07       	cpc	r23, r27
    6ba8:	08 f0       	brcs	.+2      	; 0x6bac <put_fat+0x36>
    6baa:	be c0       	rjmp	.+380    	; 0x6d28 <put_fat+0x1b2>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    6bac:	88 81       	ld	r24, Y
    6bae:	82 30       	cpi	r24, 0x02	; 2
    6bb0:	09 f4       	brne	.+2      	; 0x6bb4 <put_fat+0x3e>
    6bb2:	6a c0       	rjmp	.+212    	; 0x6c88 <put_fat+0x112>
    6bb4:	83 30       	cpi	r24, 0x03	; 3
    6bb6:	09 f4       	brne	.+2      	; 0x6bba <put_fat+0x44>
    6bb8:	83 c0       	rjmp	.+262    	; 0x6cc0 <put_fat+0x14a>
    6bba:	81 30       	cpi	r24, 0x01	; 1
    6bbc:	09 f0       	breq	.+2      	; 0x6bc0 <put_fat+0x4a>
    6bbe:	af c0       	rjmp	.+350    	; 0x6d1e <put_fat+0x1a8>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    6bc0:	8a 01       	movw	r16, r20
    6bc2:	16 95       	lsr	r17
    6bc4:	07 95       	ror	r16
    6bc6:	04 0f       	add	r16, r20
    6bc8:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    6bca:	a8 01       	movw	r20, r16
    6bcc:	45 2f       	mov	r20, r21
    6bce:	55 27       	eor	r21, r21
    6bd0:	46 95       	lsr	r20
    6bd2:	60 e0       	ldi	r22, 0x00	; 0
    6bd4:	70 e0       	ldi	r23, 0x00	; 0
    6bd6:	8a a1       	ldd	r24, Y+34	; 0x22
    6bd8:	9b a1       	ldd	r25, Y+35	; 0x23
    6bda:	ac a1       	ldd	r26, Y+36	; 0x24
    6bdc:	bd a1       	ldd	r27, Y+37	; 0x25
    6bde:	48 0f       	add	r20, r24
    6be0:	59 1f       	adc	r21, r25
    6be2:	6a 1f       	adc	r22, r26
    6be4:	7b 1f       	adc	r23, r27
    6be6:	ce 01       	movw	r24, r28
    6be8:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    6bec:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    6bee:	00 97       	sbiw	r24, 0x00	; 0
    6bf0:	09 f0       	breq	.+2      	; 0x6bf4 <put_fat+0x7e>
    6bf2:	97 c0       	rjmp	.+302    	; 0x6d22 <put_fat+0x1ac>
			p = &fs->win[bc % SS(fs)];
    6bf4:	c8 01       	movw	r24, r16
    6bf6:	91 70       	andi	r25, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    6bf8:	e1 e0       	ldi	r30, 0x01	; 1
    6bfa:	ce 22       	and	r12, r30
    6bfc:	dd 24       	eor	r13, r13
    6bfe:	c1 14       	cp	r12, r1
    6c00:	d1 04       	cpc	r13, r1
    6c02:	51 f0       	breq	.+20     	; 0x6c18 <put_fat+0xa2>
    6c04:	fe 01       	movw	r30, r28
    6c06:	e8 0f       	add	r30, r24
    6c08:	f9 1f       	adc	r31, r25
    6c0a:	32 a9       	ldd	r19, Z+50	; 0x32
    6c0c:	3f 70       	andi	r19, 0x0F	; 15
    6c0e:	28 2d       	mov	r18, r8
    6c10:	22 95       	swap	r18
    6c12:	20 7f       	andi	r18, 0xF0	; 240
    6c14:	23 2b       	or	r18, r19
    6c16:	01 c0       	rjmp	.+2      	; 0x6c1a <put_fat+0xa4>
    6c18:	28 2d       	mov	r18, r8
    6c1a:	8c 0f       	add	r24, r28
    6c1c:	9d 1f       	adc	r25, r29
    6c1e:	fc 01       	movw	r30, r24
    6c20:	22 ab       	std	Z+50, r18	; 0x32
			bc++;
    6c22:	0f 5f       	subi	r16, 0xFF	; 255
    6c24:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
    6c26:	81 e0       	ldi	r24, 0x01	; 1
    6c28:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    6c2a:	a8 01       	movw	r20, r16
    6c2c:	45 2f       	mov	r20, r21
    6c2e:	55 27       	eor	r21, r21
    6c30:	46 95       	lsr	r20
    6c32:	60 e0       	ldi	r22, 0x00	; 0
    6c34:	70 e0       	ldi	r23, 0x00	; 0
    6c36:	8a a1       	ldd	r24, Y+34	; 0x22
    6c38:	9b a1       	ldd	r25, Y+35	; 0x23
    6c3a:	ac a1       	ldd	r26, Y+36	; 0x24
    6c3c:	bd a1       	ldd	r27, Y+37	; 0x25
    6c3e:	48 0f       	add	r20, r24
    6c40:	59 1f       	adc	r21, r25
    6c42:	6a 1f       	adc	r22, r26
    6c44:	7b 1f       	adc	r23, r27
    6c46:	ce 01       	movw	r24, r28
    6c48:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    6c4c:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    6c4e:	00 97       	sbiw	r24, 0x00	; 0
    6c50:	09 f0       	breq	.+2      	; 0x6c54 <put_fat+0xde>
    6c52:	67 c0       	rjmp	.+206    	; 0x6d22 <put_fat+0x1ac>
			p = &fs->win[bc % SS(fs)];
    6c54:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    6c56:	c1 14       	cp	r12, r1
    6c58:	d1 04       	cpc	r13, r1
    6c5a:	49 f0       	breq	.+18     	; 0x6c6e <put_fat+0xf8>
    6c5c:	84 e0       	ldi	r24, 0x04	; 4
    6c5e:	b6 94       	lsr	r11
    6c60:	a7 94       	ror	r10
    6c62:	97 94       	ror	r9
    6c64:	87 94       	ror	r8
    6c66:	8a 95       	dec	r24
    6c68:	d1 f7       	brne	.-12     	; 0x6c5e <put_fat+0xe8>
    6c6a:	88 2d       	mov	r24, r8
    6c6c:	08 c0       	rjmp	.+16     	; 0x6c7e <put_fat+0x108>
    6c6e:	fe 01       	movw	r30, r28
    6c70:	e0 0f       	add	r30, r16
    6c72:	f1 1f       	adc	r31, r17
    6c74:	82 a9       	ldd	r24, Z+50	; 0x32
    6c76:	80 7f       	andi	r24, 0xF0	; 240
    6c78:	99 2d       	mov	r25, r9
    6c7a:	9f 70       	andi	r25, 0x0F	; 15
    6c7c:	89 2b       	or	r24, r25
    6c7e:	0c 0f       	add	r16, r28
    6c80:	1d 1f       	adc	r17, r29
    6c82:	f8 01       	movw	r30, r16
    6c84:	82 ab       	std	Z+50, r24	; 0x32
			break;
    6c86:	4d c0       	rjmp	.+154    	; 0x6d22 <put_fat+0x1ac>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    6c88:	45 2f       	mov	r20, r21
    6c8a:	56 2f       	mov	r21, r22
    6c8c:	67 2f       	mov	r22, r23
    6c8e:	77 27       	eor	r23, r23
    6c90:	8a a1       	ldd	r24, Y+34	; 0x22
    6c92:	9b a1       	ldd	r25, Y+35	; 0x23
    6c94:	ac a1       	ldd	r26, Y+36	; 0x24
    6c96:	bd a1       	ldd	r27, Y+37	; 0x25
    6c98:	48 0f       	add	r20, r24
    6c9a:	59 1f       	adc	r21, r25
    6c9c:	6a 1f       	adc	r22, r26
    6c9e:	7b 1f       	adc	r23, r27
    6ca0:	ce 01       	movw	r24, r28
    6ca2:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    6ca6:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    6ca8:	00 97       	sbiw	r24, 0x00	; 0
    6caa:	d9 f5       	brne	.+118    	; 0x6d22 <put_fat+0x1ac>
			p = &fs->win[clst * 2 % SS(fs)];
    6cac:	f6 01       	movw	r30, r12
    6cae:	ee 0f       	add	r30, r30
    6cb0:	ff 1f       	adc	r31, r31
    6cb2:	f1 70       	andi	r31, 0x01	; 1
    6cb4:	f2 96       	adiw	r30, 0x32	; 50
			ST_WORD(p, (WORD)val);
    6cb6:	ec 0f       	add	r30, r28
    6cb8:	fd 1f       	adc	r31, r29
    6cba:	91 82       	std	Z+1, r9	; 0x01
    6cbc:	80 82       	st	Z, r8
			break;
    6cbe:	31 c0       	rjmp	.+98     	; 0x6d22 <put_fat+0x1ac>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    6cc0:	e7 e0       	ldi	r30, 0x07	; 7
    6cc2:	76 95       	lsr	r23
    6cc4:	67 95       	ror	r22
    6cc6:	57 95       	ror	r21
    6cc8:	47 95       	ror	r20
    6cca:	ea 95       	dec	r30
    6ccc:	d1 f7       	brne	.-12     	; 0x6cc2 <put_fat+0x14c>
    6cce:	8a a1       	ldd	r24, Y+34	; 0x22
    6cd0:	9b a1       	ldd	r25, Y+35	; 0x23
    6cd2:	ac a1       	ldd	r26, Y+36	; 0x24
    6cd4:	bd a1       	ldd	r27, Y+37	; 0x25
    6cd6:	48 0f       	add	r20, r24
    6cd8:	59 1f       	adc	r21, r25
    6cda:	6a 1f       	adc	r22, r26
    6cdc:	7b 1f       	adc	r23, r27
    6cde:	ce 01       	movw	r24, r28
    6ce0:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    6ce4:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    6ce6:	00 97       	sbiw	r24, 0x00	; 0
    6ce8:	e1 f4       	brne	.+56     	; 0x6d22 <put_fat+0x1ac>
			p = &fs->win[clst * 4 % SS(fs)];
    6cea:	f6 01       	movw	r30, r12
    6cec:	ee 0f       	add	r30, r30
    6cee:	ff 1f       	adc	r31, r31
    6cf0:	ee 0f       	add	r30, r30
    6cf2:	ff 1f       	adc	r31, r31
    6cf4:	f1 70       	andi	r31, 0x01	; 1
    6cf6:	f2 96       	adiw	r30, 0x32	; 50
    6cf8:	ec 0f       	add	r30, r28
    6cfa:	fd 1f       	adc	r31, r29
			val |= LD_DWORD(p) & 0xF0000000;
    6cfc:	80 81       	ld	r24, Z
    6cfe:	91 81       	ldd	r25, Z+1	; 0x01
    6d00:	a2 81       	ldd	r26, Z+2	; 0x02
    6d02:	b3 81       	ldd	r27, Z+3	; 0x03
    6d04:	80 70       	andi	r24, 0x00	; 0
    6d06:	90 70       	andi	r25, 0x00	; 0
    6d08:	a0 70       	andi	r26, 0x00	; 0
    6d0a:	b0 7f       	andi	r27, 0xF0	; 240
    6d0c:	88 29       	or	r24, r8
    6d0e:	99 29       	or	r25, r9
    6d10:	aa 29       	or	r26, r10
    6d12:	bb 29       	or	r27, r11
			ST_DWORD(p, val);
    6d14:	80 83       	st	Z, r24
    6d16:	91 83       	std	Z+1, r25	; 0x01
    6d18:	a2 83       	std	Z+2, r26	; 0x02
    6d1a:	b3 83       	std	Z+3, r27	; 0x03
			break;
    6d1c:	02 c0       	rjmp	.+4      	; 0x6d22 <put_fat+0x1ac>

		default :
			res = FR_INT_ERR;
    6d1e:	22 e0       	ldi	r18, 0x02	; 2
    6d20:	30 e0       	ldi	r19, 0x00	; 0
		}
		fs->wflag = 1;
    6d22:	81 e0       	ldi	r24, 0x01	; 1
    6d24:	8c 83       	std	Y+4, r24	; 0x04
    6d26:	02 c0       	rjmp	.+4      	; 0x6d2c <put_fat+0x1b6>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    6d28:	22 e0       	ldi	r18, 0x02	; 2
    6d2a:	30 e0       	ldi	r19, 0x00	; 0
		}
		fs->wflag = 1;
	}

	return res;
}
    6d2c:	c9 01       	movw	r24, r18
    6d2e:	cd b7       	in	r28, 0x3d	; 61
    6d30:	de b7       	in	r29, 0x3e	; 62
    6d32:	ec e0       	ldi	r30, 0x0C	; 12
    6d34:	0c 94 f4 5c 	jmp	0xb9e8	; 0xb9e8 <__epilogue_restores__+0xc>

00006d38 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    6d38:	a0 e0       	ldi	r26, 0x00	; 0
    6d3a:	b0 e0       	ldi	r27, 0x00	; 0
    6d3c:	e2 ea       	ldi	r30, 0xA2	; 162
    6d3e:	f6 e3       	ldi	r31, 0x36	; 54
    6d40:	0c 94 d4 5c 	jmp	0xb9a8	; 0xb9a8 <__prologue_saves__+0x4>
    6d44:	ec 01       	movw	r28, r24
    6d46:	2a 01       	movw	r4, r20
    6d48:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    6d4a:	41 15       	cp	r20, r1
    6d4c:	51 05       	cpc	r21, r1
    6d4e:	61 05       	cpc	r22, r1
    6d50:	71 05       	cpc	r23, r1
    6d52:	99 f4       	brne	.+38     	; 0x6d7a <create_chain+0x42>
		scl = fs->last_clust;			/* Get suggested start point */
    6d54:	8a 84       	ldd	r8, Y+10	; 0x0a
    6d56:	9b 84       	ldd	r9, Y+11	; 0x0b
    6d58:	ac 84       	ldd	r10, Y+12	; 0x0c
    6d5a:	bd 84       	ldd	r11, Y+13	; 0x0d
		if (!scl || scl >= fs->n_fatent) scl = 1;
    6d5c:	81 14       	cp	r8, r1
    6d5e:	91 04       	cpc	r9, r1
    6d60:	a1 04       	cpc	r10, r1
    6d62:	b1 04       	cpc	r11, r1
    6d64:	09 f1       	breq	.+66     	; 0x6da8 <create_chain+0x70>
    6d66:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6d68:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6d6a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    6d6c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    6d6e:	88 16       	cp	r8, r24
    6d70:	99 06       	cpc	r9, r25
    6d72:	aa 06       	cpc	r10, r26
    6d74:	bb 06       	cpc	r11, r27
    6d76:	c0 f4       	brcc	.+48     	; 0x6da8 <create_chain+0x70>
    6d78:	1c c0       	rjmp	.+56     	; 0x6db2 <create_chain+0x7a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    6d7a:	0e 94 52 34 	call	0x68a4	; 0x68a4 <get_fat>
    6d7e:	9b 01       	movw	r18, r22
    6d80:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    6d82:	62 30       	cpi	r22, 0x02	; 2
    6d84:	71 05       	cpc	r23, r1
    6d86:	81 05       	cpc	r24, r1
    6d88:	91 05       	cpc	r25, r1
    6d8a:	08 f4       	brcc	.+2      	; 0x6d8e <create_chain+0x56>
    6d8c:	96 c0       	rjmp	.+300    	; 0x6eba <create_chain+0x182>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    6d8e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6d90:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6d92:	ac 8d       	ldd	r26, Y+28	; 0x1c
    6d94:	bd 8d       	ldd	r27, Y+29	; 0x1d
    6d96:	28 17       	cp	r18, r24
    6d98:	39 07       	cpc	r19, r25
    6d9a:	4a 07       	cpc	r20, r26
    6d9c:	5b 07       	cpc	r21, r27
    6d9e:	08 f4       	brcc	.+2      	; 0x6da2 <create_chain+0x6a>
    6da0:	90 c0       	rjmp	.+288    	; 0x6ec2 <create_chain+0x18a>
    6da2:	53 01       	movw	r10, r6
    6da4:	42 01       	movw	r8, r4
    6da6:	05 c0       	rjmp	.+10     	; 0x6db2 <create_chain+0x7a>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    6da8:	51 e0       	ldi	r21, 0x01	; 1
    6daa:	85 2e       	mov	r8, r21
    6dac:	91 2c       	mov	r9, r1
    6dae:	a1 2c       	mov	r10, r1
    6db0:	b1 2c       	mov	r11, r1
    6db2:	75 01       	movw	r14, r10
    6db4:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    6db6:	08 94       	sec
    6db8:	c1 1c       	adc	r12, r1
    6dba:	d1 1c       	adc	r13, r1
    6dbc:	e1 1c       	adc	r14, r1
    6dbe:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    6dc0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6dc2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6dc4:	ac 8d       	ldd	r26, Y+28	; 0x1c
    6dc6:	bd 8d       	ldd	r27, Y+29	; 0x1d
    6dc8:	c8 16       	cp	r12, r24
    6dca:	d9 06       	cpc	r13, r25
    6dcc:	ea 06       	cpc	r14, r26
    6dce:	fb 06       	cpc	r15, r27
    6dd0:	60 f0       	brcs	.+24     	; 0x6dea <create_chain+0xb2>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    6dd2:	22 e0       	ldi	r18, 0x02	; 2
    6dd4:	82 16       	cp	r8, r18
    6dd6:	91 04       	cpc	r9, r1
    6dd8:	a1 04       	cpc	r10, r1
    6dda:	b1 04       	cpc	r11, r1
    6ddc:	08 f4       	brcc	.+2      	; 0x6de0 <create_chain+0xa8>
    6dde:	65 c0       	rjmp	.+202    	; 0x6eaa <create_chain+0x172>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    6de0:	42 e0       	ldi	r20, 0x02	; 2
    6de2:	c4 2e       	mov	r12, r20
    6de4:	d1 2c       	mov	r13, r1
    6de6:	e1 2c       	mov	r14, r1
    6de8:	f1 2c       	mov	r15, r1
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    6dea:	ce 01       	movw	r24, r28
    6dec:	b7 01       	movw	r22, r14
    6dee:	a6 01       	movw	r20, r12
    6df0:	0e 94 52 34 	call	0x68a4	; 0x68a4 <get_fat>
    6df4:	9b 01       	movw	r18, r22
    6df6:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    6df8:	61 15       	cp	r22, r1
    6dfa:	71 05       	cpc	r23, r1
    6dfc:	81 05       	cpc	r24, r1
    6dfe:	91 05       	cpc	r25, r1
    6e00:	a9 f0       	breq	.+42     	; 0x6e2c <create_chain+0xf4>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    6e02:	2f 3f       	cpi	r18, 0xFF	; 255
    6e04:	8f ef       	ldi	r24, 0xFF	; 255
    6e06:	38 07       	cpc	r19, r24
    6e08:	8f ef       	ldi	r24, 0xFF	; 255
    6e0a:	48 07       	cpc	r20, r24
    6e0c:	8f ef       	ldi	r24, 0xFF	; 255
    6e0e:	58 07       	cpc	r21, r24
    6e10:	09 f4       	brne	.+2      	; 0x6e14 <create_chain+0xdc>
    6e12:	57 c0       	rjmp	.+174    	; 0x6ec2 <create_chain+0x18a>
    6e14:	21 30       	cpi	r18, 0x01	; 1
    6e16:	31 05       	cpc	r19, r1
    6e18:	41 05       	cpc	r20, r1
    6e1a:	51 05       	cpc	r21, r1
    6e1c:	09 f4       	brne	.+2      	; 0x6e20 <create_chain+0xe8>
    6e1e:	51 c0       	rjmp	.+162    	; 0x6ec2 <create_chain+0x18a>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    6e20:	c8 14       	cp	r12, r8
    6e22:	d9 04       	cpc	r13, r9
    6e24:	ea 04       	cpc	r14, r10
    6e26:	fb 04       	cpc	r15, r11
    6e28:	31 f6       	brne	.-116    	; 0x6db6 <create_chain+0x7e>
    6e2a:	3f c0       	rjmp	.+126    	; 0x6eaa <create_chain+0x172>
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
    6e2c:	8c 2c       	mov	r8, r12
    6e2e:	bd 2c       	mov	r11, r13
    6e30:	ae 2c       	mov	r10, r14
    6e32:	9f 2c       	mov	r9, r15
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    6e34:	ce 01       	movw	r24, r28
    6e36:	a6 01       	movw	r20, r12
    6e38:	b7 01       	movw	r22, r14
    6e3a:	0f ef       	ldi	r16, 0xFF	; 255
    6e3c:	1f ef       	ldi	r17, 0xFF	; 255
    6e3e:	2f ef       	ldi	r18, 0xFF	; 255
    6e40:	3f e0       	ldi	r19, 0x0F	; 15
    6e42:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <put_fat>
	if (res == FR_OK && clst != 0) {
    6e46:	00 97       	sbiw	r24, 0x00	; 0
    6e48:	41 f5       	brne	.+80     	; 0x6e9a <create_chain+0x162>
    6e4a:	41 14       	cp	r4, r1
    6e4c:	51 04       	cpc	r5, r1
    6e4e:	61 04       	cpc	r6, r1
    6e50:	71 04       	cpc	r7, r1
    6e52:	49 f0       	breq	.+18     	; 0x6e66 <create_chain+0x12e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    6e54:	ce 01       	movw	r24, r28
    6e56:	b3 01       	movw	r22, r6
    6e58:	a2 01       	movw	r20, r4
    6e5a:	86 01       	movw	r16, r12
    6e5c:	97 01       	movw	r18, r14
    6e5e:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <put_fat>
	}
	if (res == FR_OK) {
    6e62:	00 97       	sbiw	r24, 0x00	; 0
    6e64:	d1 f4       	brne	.+52     	; 0x6e9a <create_chain+0x162>
		fs->last_clust = ncl;			/* Update FSINFO */
    6e66:	8a 86       	std	Y+10, r8	; 0x0a
    6e68:	bb 86       	std	Y+11, r11	; 0x0b
    6e6a:	ac 86       	std	Y+12, r10	; 0x0c
    6e6c:	9d 86       	std	Y+13, r9	; 0x0d
		if (fs->free_clust != 0xFFFFFFFF) {
    6e6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    6e70:	9f 85       	ldd	r25, Y+15	; 0x0f
    6e72:	a8 89       	ldd	r26, Y+16	; 0x10
    6e74:	b9 89       	ldd	r27, Y+17	; 0x11
    6e76:	8f 3f       	cpi	r24, 0xFF	; 255
    6e78:	2f ef       	ldi	r18, 0xFF	; 255
    6e7a:	92 07       	cpc	r25, r18
    6e7c:	2f ef       	ldi	r18, 0xFF	; 255
    6e7e:	a2 07       	cpc	r26, r18
    6e80:	2f ef       	ldi	r18, 0xFF	; 255
    6e82:	b2 07       	cpc	r27, r18
    6e84:	b9 f0       	breq	.+46     	; 0x6eb4 <create_chain+0x17c>
			fs->free_clust--;
    6e86:	01 97       	sbiw	r24, 0x01	; 1
    6e88:	a1 09       	sbc	r26, r1
    6e8a:	b1 09       	sbc	r27, r1
    6e8c:	8e 87       	std	Y+14, r24	; 0x0e
    6e8e:	9f 87       	std	Y+15, r25	; 0x0f
    6e90:	a8 8b       	std	Y+16, r26	; 0x10
    6e92:	b9 8b       	std	Y+17, r27	; 0x11
			fs->fsi_flag = 1;
    6e94:	81 e0       	ldi	r24, 0x01	; 1
    6e96:	8d 83       	std	Y+5, r24	; 0x05
    6e98:	0d c0       	rjmp	.+26     	; 0x6eb4 <create_chain+0x17c>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    6e9a:	81 30       	cpi	r24, 0x01	; 1
    6e9c:	91 05       	cpc	r25, r1
    6e9e:	69 f4       	brne	.+26     	; 0x6eba <create_chain+0x182>
    6ea0:	2f ef       	ldi	r18, 0xFF	; 255
    6ea2:	3f ef       	ldi	r19, 0xFF	; 255
    6ea4:	4f ef       	ldi	r20, 0xFF	; 255
    6ea6:	5f ef       	ldi	r21, 0xFF	; 255
    6ea8:	0c c0       	rjmp	.+24     	; 0x6ec2 <create_chain+0x18a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    6eaa:	20 e0       	ldi	r18, 0x00	; 0
    6eac:	30 e0       	ldi	r19, 0x00	; 0
    6eae:	40 e0       	ldi	r20, 0x00	; 0
    6eb0:	50 e0       	ldi	r21, 0x00	; 0
    6eb2:	07 c0       	rjmp	.+14     	; 0x6ec2 <create_chain+0x18a>
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
    6eb4:	a7 01       	movw	r20, r14
    6eb6:	96 01       	movw	r18, r12
    6eb8:	04 c0       	rjmp	.+8      	; 0x6ec2 <create_chain+0x18a>
			fs->free_clust--;
			fs->fsi_flag = 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    6eba:	21 e0       	ldi	r18, 0x01	; 1
    6ebc:	30 e0       	ldi	r19, 0x00	; 0
    6ebe:	40 e0       	ldi	r20, 0x00	; 0
    6ec0:	50 e0       	ldi	r21, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
    6ec2:	b9 01       	movw	r22, r18
    6ec4:	ca 01       	movw	r24, r20
    6ec6:	cd b7       	in	r28, 0x3d	; 61
    6ec8:	de b7       	in	r29, 0x3e	; 62
    6eca:	e0 e1       	ldi	r30, 0x10	; 16
    6ecc:	0c 94 f0 5c 	jmp	0xb9e0	; 0xb9e0 <__epilogue_restores__+0x4>

00006ed0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    6ed0:	a0 e0       	ldi	r26, 0x00	; 0
    6ed2:	b0 e0       	ldi	r27, 0x00	; 0
    6ed4:	ee e6       	ldi	r30, 0x6E	; 110
    6ed6:	f7 e3       	ldi	r31, 0x37	; 55
    6ed8:	0c 94 d8 5c 	jmp	0xb9b0	; 0xb9b0 <__prologue_saves__+0xc>
    6edc:	ec 01       	movw	r28, r24
    6ede:	5b 01       	movw	r10, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    6ee0:	cc 80       	ldd	r12, Y+4	; 0x04
    6ee2:	dd 80       	ldd	r13, Y+5	; 0x05
    6ee4:	08 94       	sec
    6ee6:	c1 1c       	adc	r12, r1
    6ee8:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    6eea:	c1 14       	cp	r12, r1
    6eec:	d1 04       	cpc	r13, r1
    6eee:	09 f4       	brne	.+2      	; 0x6ef2 <dir_next+0x22>
    6ef0:	ed c0       	rjmp	.+474    	; 0x70cc <dir_next+0x1fc>
    6ef2:	8e 85       	ldd	r24, Y+14	; 0x0e
    6ef4:	9f 85       	ldd	r25, Y+15	; 0x0f
    6ef6:	a8 89       	ldd	r26, Y+16	; 0x10
    6ef8:	b9 89       	ldd	r27, Y+17	; 0x11
    6efa:	00 97       	sbiw	r24, 0x00	; 0
    6efc:	a1 05       	cpc	r26, r1
    6efe:	b1 05       	cpc	r27, r1
    6f00:	09 f4       	brne	.+2      	; 0x6f04 <dir_next+0x34>
    6f02:	e4 c0       	rjmp	.+456    	; 0x70cc <dir_next+0x1fc>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    6f04:	2f e0       	ldi	r18, 0x0F	; 15
    6f06:	82 2e       	mov	r8, r18
    6f08:	91 2c       	mov	r9, r1
    6f0a:	8c 20       	and	r8, r12
    6f0c:	9d 20       	and	r9, r13
    6f0e:	81 14       	cp	r8, r1
    6f10:	91 04       	cpc	r9, r1
    6f12:	09 f0       	breq	.+2      	; 0x6f16 <dir_next+0x46>
    6f14:	ca c0       	rjmp	.+404    	; 0x70aa <dir_next+0x1da>
		dj->sect++;					/* Next sector */
    6f16:	01 96       	adiw	r24, 0x01	; 1
    6f18:	a1 1d       	adc	r26, r1
    6f1a:	b1 1d       	adc	r27, r1
    6f1c:	8e 87       	std	Y+14, r24	; 0x0e
    6f1e:	9f 87       	std	Y+15, r25	; 0x0f
    6f20:	a8 8b       	std	Y+16, r26	; 0x10
    6f22:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    6f24:	4a 85       	ldd	r20, Y+10	; 0x0a
    6f26:	5b 85       	ldd	r21, Y+11	; 0x0b
    6f28:	6c 85       	ldd	r22, Y+12	; 0x0c
    6f2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    6f2c:	88 81       	ld	r24, Y
    6f2e:	99 81       	ldd	r25, Y+1	; 0x01
    6f30:	41 15       	cp	r20, r1
    6f32:	51 05       	cpc	r21, r1
    6f34:	61 05       	cpc	r22, r1
    6f36:	71 05       	cpc	r23, r1
    6f38:	41 f4       	brne	.+16     	; 0x6f4a <dir_next+0x7a>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    6f3a:	fc 01       	movw	r30, r24
    6f3c:	80 85       	ldd	r24, Z+8	; 0x08
    6f3e:	91 85       	ldd	r25, Z+9	; 0x09
    6f40:	c8 16       	cp	r12, r24
    6f42:	d9 06       	cpc	r13, r25
    6f44:	08 f4       	brcc	.+2      	; 0x6f48 <dir_next+0x78>
    6f46:	b1 c0       	rjmp	.+354    	; 0x70aa <dir_next+0x1da>
    6f48:	c1 c0       	rjmp	.+386    	; 0x70cc <dir_next+0x1fc>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    6f4a:	fc 01       	movw	r30, r24
    6f4c:	22 81       	ldd	r18, Z+2	; 0x02
    6f4e:	30 e0       	ldi	r19, 0x00	; 0
    6f50:	21 50       	subi	r18, 0x01	; 1
    6f52:	30 40       	sbci	r19, 0x00	; 0
    6f54:	f6 01       	movw	r30, r12
    6f56:	a4 e0       	ldi	r26, 0x04	; 4
    6f58:	f6 95       	lsr	r31
    6f5a:	e7 95       	ror	r30
    6f5c:	aa 95       	dec	r26
    6f5e:	e1 f7       	brne	.-8      	; 0x6f58 <dir_next+0x88>
    6f60:	2e 23       	and	r18, r30
    6f62:	3f 23       	and	r19, r31
    6f64:	21 15       	cp	r18, r1
    6f66:	31 05       	cpc	r19, r1
    6f68:	09 f0       	breq	.+2      	; 0x6f6c <dir_next+0x9c>
    6f6a:	9f c0       	rjmp	.+318    	; 0x70aa <dir_next+0x1da>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    6f6c:	0e 94 52 34 	call	0x68a4	; 0x68a4 <get_fat>
    6f70:	7b 01       	movw	r14, r22
    6f72:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    6f74:	62 30       	cpi	r22, 0x02	; 2
    6f76:	71 05       	cpc	r23, r1
    6f78:	81 05       	cpc	r24, r1
    6f7a:	91 05       	cpc	r25, r1
    6f7c:	08 f4       	brcc	.+2      	; 0x6f80 <dir_next+0xb0>
    6f7e:	ac c0       	rjmp	.+344    	; 0x70d8 <dir_next+0x208>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    6f80:	8f ef       	ldi	r24, 0xFF	; 255
    6f82:	e8 16       	cp	r14, r24
    6f84:	8f ef       	ldi	r24, 0xFF	; 255
    6f86:	f8 06       	cpc	r15, r24
    6f88:	8f ef       	ldi	r24, 0xFF	; 255
    6f8a:	08 07       	cpc	r16, r24
    6f8c:	8f ef       	ldi	r24, 0xFF	; 255
    6f8e:	18 07       	cpc	r17, r24
    6f90:	09 f4       	brne	.+2      	; 0x6f94 <dir_next+0xc4>
    6f92:	a5 c0       	rjmp	.+330    	; 0x70de <dir_next+0x20e>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    6f94:	88 81       	ld	r24, Y
    6f96:	99 81       	ldd	r25, Y+1	; 0x01
    6f98:	fc 01       	movw	r30, r24
    6f9a:	22 8d       	ldd	r18, Z+26	; 0x1a
    6f9c:	33 8d       	ldd	r19, Z+27	; 0x1b
    6f9e:	44 8d       	ldd	r20, Z+28	; 0x1c
    6fa0:	55 8d       	ldd	r21, Z+29	; 0x1d
    6fa2:	e2 16       	cp	r14, r18
    6fa4:	f3 06       	cpc	r15, r19
    6fa6:	04 07       	cpc	r16, r20
    6fa8:	15 07       	cpc	r17, r21
    6faa:	08 f4       	brcc	.+2      	; 0x6fae <dir_next+0xde>
    6fac:	70 c0       	rjmp	.+224    	; 0x708e <dir_next+0x1be>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    6fae:	a1 14       	cp	r10, r1
    6fb0:	b1 04       	cpc	r11, r1
    6fb2:	09 f4       	brne	.+2      	; 0x6fb6 <dir_next+0xe6>
    6fb4:	8b c0       	rjmp	.+278    	; 0x70cc <dir_next+0x1fc>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    6fb6:	4a 85       	ldd	r20, Y+10	; 0x0a
    6fb8:	5b 85       	ldd	r21, Y+11	; 0x0b
    6fba:	6c 85       	ldd	r22, Y+12	; 0x0c
    6fbc:	7d 85       	ldd	r23, Y+13	; 0x0d
    6fbe:	0e 94 9c 36 	call	0x6d38	; 0x6d38 <create_chain>
    6fc2:	7b 01       	movw	r14, r22
    6fc4:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    6fc6:	61 15       	cp	r22, r1
    6fc8:	71 05       	cpc	r23, r1
    6fca:	81 05       	cpc	r24, r1
    6fcc:	91 05       	cpc	r25, r1
    6fce:	09 f4       	brne	.+2      	; 0x6fd2 <dir_next+0x102>
    6fd0:	80 c0       	rjmp	.+256    	; 0x70d2 <dir_next+0x202>
					if (clst == 1) return FR_INT_ERR;
    6fd2:	61 30       	cpi	r22, 0x01	; 1
    6fd4:	71 05       	cpc	r23, r1
    6fd6:	81 05       	cpc	r24, r1
    6fd8:	91 05       	cpc	r25, r1
    6fda:	09 f4       	brne	.+2      	; 0x6fde <dir_next+0x10e>
    6fdc:	7d c0       	rjmp	.+250    	; 0x70d8 <dir_next+0x208>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    6fde:	8f ef       	ldi	r24, 0xFF	; 255
    6fe0:	e8 16       	cp	r14, r24
    6fe2:	8f ef       	ldi	r24, 0xFF	; 255
    6fe4:	f8 06       	cpc	r15, r24
    6fe6:	8f ef       	ldi	r24, 0xFF	; 255
    6fe8:	08 07       	cpc	r16, r24
    6fea:	8f ef       	ldi	r24, 0xFF	; 255
    6fec:	18 07       	cpc	r17, r24
    6fee:	09 f4       	brne	.+2      	; 0x6ff2 <dir_next+0x122>
    6ff0:	76 c0       	rjmp	.+236    	; 0x70de <dir_next+0x20e>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    6ff2:	88 81       	ld	r24, Y
    6ff4:	99 81       	ldd	r25, Y+1	; 0x01
    6ff6:	40 e0       	ldi	r20, 0x00	; 0
    6ff8:	50 e0       	ldi	r21, 0x00	; 0
    6ffa:	60 e0       	ldi	r22, 0x00	; 0
    6ffc:	70 e0       	ldi	r23, 0x00	; 0
    6ffe:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    7002:	00 97       	sbiw	r24, 0x00	; 0
    7004:	09 f0       	breq	.+2      	; 0x7008 <dir_next+0x138>
    7006:	6b c0       	rjmp	.+214    	; 0x70de <dir_next+0x20e>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    7008:	88 81       	ld	r24, Y
    700a:	99 81       	ldd	r25, Y+1	; 0x01
    700c:	c2 96       	adiw	r24, 0x32	; 50
    700e:	60 e0       	ldi	r22, 0x00	; 0
    7010:	70 e0       	ldi	r23, 0x00	; 0
    7012:	40 e0       	ldi	r20, 0x00	; 0
    7014:	52 e0       	ldi	r21, 0x02	; 2
    7016:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    701a:	a8 80       	ld	r10, Y
    701c:	b9 80       	ldd	r11, Y+1	; 0x01
    701e:	c5 01       	movw	r24, r10
    7020:	b8 01       	movw	r22, r16
    7022:	a7 01       	movw	r20, r14
    7024:	0e 94 22 34 	call	0x6844	; 0x6844 <clust2sect>
    7028:	f5 01       	movw	r30, r10
    702a:	66 a7       	std	Z+46, r22	; 0x2e
    702c:	77 a7       	std	Z+47, r23	; 0x2f
    702e:	80 ab       	std	Z+48, r24	; 0x30
    7030:	91 ab       	std	Z+49, r25	; 0x31
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7032:	bb 24       	eor	r11, r11
						dj->fs->wflag = 1;
    7034:	aa 24       	eor	r10, r10
    7036:	a3 94       	inc	r10
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7038:	19 c0       	rjmp	.+50     	; 0x706c <dir_next+0x19c>
						dj->fs->wflag = 1;
    703a:	a4 82       	std	Z+4, r10	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    703c:	cf 01       	movw	r24, r30
    703e:	40 e0       	ldi	r20, 0x00	; 0
    7040:	50 e0       	ldi	r21, 0x00	; 0
    7042:	60 e0       	ldi	r22, 0x00	; 0
    7044:	70 e0       	ldi	r23, 0x00	; 0
    7046:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    704a:	00 97       	sbiw	r24, 0x00	; 0
    704c:	09 f0       	breq	.+2      	; 0x7050 <dir_next+0x180>
    704e:	47 c0       	rjmp	.+142    	; 0x70de <dir_next+0x20e>
						dj->fs->winsect++;
    7050:	e8 81       	ld	r30, Y
    7052:	f9 81       	ldd	r31, Y+1	; 0x01
    7054:	86 a5       	ldd	r24, Z+46	; 0x2e
    7056:	97 a5       	ldd	r25, Z+47	; 0x2f
    7058:	a0 a9       	ldd	r26, Z+48	; 0x30
    705a:	b1 a9       	ldd	r27, Z+49	; 0x31
    705c:	01 96       	adiw	r24, 0x01	; 1
    705e:	a1 1d       	adc	r26, r1
    7060:	b1 1d       	adc	r27, r1
    7062:	86 a7       	std	Z+46, r24	; 0x2e
    7064:	97 a7       	std	Z+47, r25	; 0x2f
    7066:	a0 ab       	std	Z+48, r26	; 0x30
    7068:	b1 ab       	std	Z+49, r27	; 0x31
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    706a:	b3 94       	inc	r11
    706c:	e8 81       	ld	r30, Y
    706e:	f9 81       	ldd	r31, Y+1	; 0x01
    7070:	82 81       	ldd	r24, Z+2	; 0x02
    7072:	b8 16       	cp	r11, r24
    7074:	10 f3       	brcs	.-60     	; 0x703a <dir_next+0x16a>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    7076:	26 a5       	ldd	r18, Z+46	; 0x2e
    7078:	37 a5       	ldd	r19, Z+47	; 0x2f
    707a:	40 a9       	ldd	r20, Z+48	; 0x30
    707c:	51 a9       	ldd	r21, Z+49	; 0x31
    707e:	2b 19       	sub	r18, r11
    7080:	31 09       	sbc	r19, r1
    7082:	41 09       	sbc	r20, r1
    7084:	51 09       	sbc	r21, r1
    7086:	26 a7       	std	Z+46, r18	; 0x2e
    7088:	37 a7       	std	Z+47, r19	; 0x2f
    708a:	40 ab       	std	Z+48, r20	; 0x30
    708c:	51 ab       	std	Z+49, r21	; 0x31
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    708e:	ea 86       	std	Y+10, r14	; 0x0a
    7090:	fb 86       	std	Y+11, r15	; 0x0b
    7092:	0c 87       	std	Y+12, r16	; 0x0c
    7094:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    7096:	88 81       	ld	r24, Y
    7098:	99 81       	ldd	r25, Y+1	; 0x01
    709a:	b8 01       	movw	r22, r16
    709c:	a7 01       	movw	r20, r14
    709e:	0e 94 22 34 	call	0x6844	; 0x6844 <clust2sect>
    70a2:	6e 87       	std	Y+14, r22	; 0x0e
    70a4:	7f 87       	std	Y+15, r23	; 0x0f
    70a6:	88 8b       	std	Y+16, r24	; 0x10
    70a8:	99 8b       	std	Y+17, r25	; 0x11
			}
		}
	}

	dj->index = i;
    70aa:	dd 82       	std	Y+5, r13	; 0x05
    70ac:	cc 82       	std	Y+4, r12	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    70ae:	88 81       	ld	r24, Y
    70b0:	99 81       	ldd	r25, Y+1	; 0x01
    70b2:	c2 96       	adiw	r24, 0x32	; 50
    70b4:	65 e0       	ldi	r22, 0x05	; 5
    70b6:	88 0c       	add	r8, r8
    70b8:	99 1c       	adc	r9, r9
    70ba:	6a 95       	dec	r22
    70bc:	e1 f7       	brne	.-8      	; 0x70b6 <dir_next+0x1e6>
    70be:	88 0d       	add	r24, r8
    70c0:	99 1d       	adc	r25, r9
    70c2:	9b 8b       	std	Y+19, r25	; 0x13
    70c4:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;
    70c6:	20 e0       	ldi	r18, 0x00	; 0
    70c8:	30 e0       	ldi	r19, 0x00	; 0
    70ca:	0b c0       	rjmp	.+22     	; 0x70e2 <dir_next+0x212>
				if (clst <= 1) return FR_INT_ERR;
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    70cc:	24 e0       	ldi	r18, 0x04	; 4
    70ce:	30 e0       	ldi	r19, 0x00	; 0
    70d0:	08 c0       	rjmp	.+16     	; 0x70e2 <dir_next+0x212>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    70d2:	27 e0       	ldi	r18, 0x07	; 7
    70d4:	30 e0       	ldi	r19, 0x00	; 0
    70d6:	05 c0       	rjmp	.+10     	; 0x70e2 <dir_next+0x212>
					if (clst == 1) return FR_INT_ERR;
    70d8:	22 e0       	ldi	r18, 0x02	; 2
    70da:	30 e0       	ldi	r19, 0x00	; 0
    70dc:	02 c0       	rjmp	.+4      	; 0x70e2 <dir_next+0x212>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    70de:	21 e0       	ldi	r18, 0x01	; 1
    70e0:	30 e0       	ldi	r19, 0x00	; 0

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;

	return FR_OK;
}
    70e2:	c9 01       	movw	r24, r18
    70e4:	cd b7       	in	r28, 0x3d	; 61
    70e6:	de b7       	in	r29, 0x3e	; 62
    70e8:	ec e0       	ldi	r30, 0x0C	; 12
    70ea:	0c 94 f4 5c 	jmp	0xb9e8	; 0xb9e8 <__epilogue_restores__+0xc>

000070ee <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    70ee:	2f 92       	push	r2
    70f0:	3f 92       	push	r3
    70f2:	4f 92       	push	r4
    70f4:	5f 92       	push	r5
    70f6:	7f 92       	push	r7
    70f8:	8f 92       	push	r8
    70fa:	9f 92       	push	r9
    70fc:	af 92       	push	r10
    70fe:	bf 92       	push	r11
    7100:	cf 92       	push	r12
    7102:	df 92       	push	r13
    7104:	ef 92       	push	r14
    7106:	ff 92       	push	r15
    7108:	0f 93       	push	r16
    710a:	1f 93       	push	r17
    710c:	df 93       	push	r29
    710e:	cf 93       	push	r28
    7110:	00 d0       	rcall	.+0      	; 0x7112 <dir_find+0x24>
    7112:	0f 92       	push	r0
    7114:	cd b7       	in	r28, 0x3d	; 61
    7116:	de b7       	in	r29, 0x3e	; 62
    7118:	9b 83       	std	Y+3, r25	; 0x03
    711a:	8a 83       	std	Y+2, r24	; 0x02
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    711c:	60 e0       	ldi	r22, 0x00	; 0
    711e:	70 e0       	ldi	r23, 0x00	; 0
    7120:	0e 94 13 35 	call	0x6a26	; 0x6a26 <dir_sdi>
    7124:	7c 01       	movw	r14, r24
	if (res != FR_OK) return res;
    7126:	00 97       	sbiw	r24, 0x00	; 0
    7128:	09 f0       	breq	.+2      	; 0x712c <dir_find+0x3e>
    712a:	ce c0       	rjmp	.+412    	; 0x72c8 <dir_find+0x1da>
    712c:	77 24       	eor	r7, r7
    712e:	7a 94       	dec	r7
    7130:	2f ef       	ldi	r18, 0xFF	; 255
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0xBF) - 1) * 13;	/* Get offset in the LFN buffer */
    7132:	ed e0       	ldi	r30, 0x0D	; 13
    7134:	4e 2e       	mov	r4, r30
    7136:	51 2c       	mov	r5, r1
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    7138:	22 24       	eor	r2, r2
    713a:	2a 94       	dec	r2
    713c:	32 2c       	mov	r3, r2

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    713e:	ea 81       	ldd	r30, Y+2	; 0x02
    7140:	fb 81       	ldd	r31, Y+3	; 0x03
    7142:	46 85       	ldd	r20, Z+14	; 0x0e
    7144:	57 85       	ldd	r21, Z+15	; 0x0f
    7146:	60 89       	ldd	r22, Z+16	; 0x10
    7148:	71 89       	ldd	r23, Z+17	; 0x11
    714a:	80 81       	ld	r24, Z
    714c:	91 81       	ldd	r25, Z+1	; 0x01
    714e:	29 83       	std	Y+1, r18	; 0x01
    7150:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    7154:	7c 01       	movw	r14, r24
		if (res != FR_OK) break;
    7156:	29 81       	ldd	r18, Y+1	; 0x01
    7158:	00 97       	sbiw	r24, 0x00	; 0
    715a:	09 f0       	breq	.+2      	; 0x715e <dir_find+0x70>
    715c:	b5 c0       	rjmp	.+362    	; 0x72c8 <dir_find+0x1da>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    715e:	ea 81       	ldd	r30, Y+2	; 0x02
    7160:	fb 81       	ldd	r31, Y+3	; 0x03
    7162:	02 89       	ldd	r16, Z+18	; 0x12
    7164:	13 89       	ldd	r17, Z+19	; 0x13
		c = dir[DIR_Name];
    7166:	f8 01       	movw	r30, r16
    7168:	30 81       	ld	r19, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    716a:	33 23       	and	r19, r19
    716c:	09 f4       	brne	.+2      	; 0x7170 <dir_find+0x82>
    716e:	a9 c0       	rjmp	.+338    	; 0x72c2 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    7170:	83 85       	ldd	r24, Z+11	; 0x0b
		if (c == 0xE5 || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    7172:	35 3e       	cpi	r19, 0xE5	; 229
    7174:	09 f4       	brne	.+2      	; 0x7178 <dir_find+0x8a>
    7176:	97 c0       	rjmp	.+302    	; 0x72a6 <dir_find+0x1b8>
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    7178:	8f 73       	andi	r24, 0x3F	; 63
		if (c == 0xE5 || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    717a:	83 ff       	sbrs	r24, 3
    717c:	04 c0       	rjmp	.+8      	; 0x7186 <dir_find+0x98>
    717e:	8f 30       	cpi	r24, 0x0F	; 15
    7180:	09 f0       	breq	.+2      	; 0x7184 <dir_find+0x96>
    7182:	91 c0       	rjmp	.+290    	; 0x72a6 <dir_find+0x1b8>
    7184:	03 c0       	rjmp	.+6      	; 0x718c <dir_find+0x9e>
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    7186:	8f 30       	cpi	r24, 0x0F	; 15
    7188:	09 f0       	breq	.+2      	; 0x718c <dir_find+0x9e>
    718a:	71 c0       	rjmp	.+226    	; 0x726e <dir_find+0x180>
				if (dj->lfn) {
    718c:	ea 81       	ldd	r30, Y+2	; 0x02
    718e:	fb 81       	ldd	r31, Y+3	; 0x03
    7190:	86 88       	ldd	r8, Z+22	; 0x16
    7192:	97 88       	ldd	r9, Z+23	; 0x17
    7194:	81 14       	cp	r8, r1
    7196:	91 04       	cpc	r9, r1
    7198:	09 f4       	brne	.+2      	; 0x719c <dir_find+0xae>
    719a:	86 c0       	rjmp	.+268    	; 0x72a8 <dir_find+0x1ba>
					if (c & 0x40) {		/* Is it start of LFN sequence? */
    719c:	36 ff       	sbrs	r19, 6
    719e:	0b c0       	rjmp	.+22     	; 0x71b6 <dir_find+0xc8>
						sum = dir[LDIR_Chksum];
    71a0:	f8 01       	movw	r30, r16
    71a2:	75 84       	ldd	r7, Z+13	; 0x0d
						c &= 0xBF; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
    71a4:	ea 81       	ldd	r30, Y+2	; 0x02
    71a6:	fb 81       	ldd	r31, Y+3	; 0x03
    71a8:	84 81       	ldd	r24, Z+4	; 0x04
    71aa:	95 81       	ldd	r25, Z+5	; 0x05
    71ac:	91 8f       	std	Z+25, r25	; 0x19
    71ae:	80 8f       	std	Z+24, r24	; 0x18
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
				if (dj->lfn) {
					if (c & 0x40) {		/* Is it start of LFN sequence? */
						sum = dir[LDIR_Chksum];
						c &= 0xBF; ord = c;	/* LFN start order */
    71b0:	23 2f       	mov	r18, r19
    71b2:	2f 7b       	andi	r18, 0xBF	; 191
    71b4:	03 c0       	rjmp	.+6      	; 0x71bc <dir_find+0xce>
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    71b6:	32 17       	cp	r19, r18
    71b8:	09 f0       	breq	.+2      	; 0x71bc <dir_find+0xce>
    71ba:	75 c0       	rjmp	.+234    	; 0x72a6 <dir_find+0x1b8>
    71bc:	f8 01       	movw	r30, r16
    71be:	85 85       	ldd	r24, Z+13	; 0x0d
    71c0:	78 16       	cp	r7, r24
    71c2:	09 f0       	breq	.+2      	; 0x71c6 <dir_find+0xd8>
    71c4:	70 c0       	rjmp	.+224    	; 0x72a6 <dir_find+0x1b8>
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0xBF) - 1) * 13;	/* Get offset in the LFN buffer */
    71c6:	80 81       	ld	r24, Z
    71c8:	90 e0       	ldi	r25, 0x00	; 0
    71ca:	8f 7b       	andi	r24, 0xBF	; 191
    71cc:	90 70       	andi	r25, 0x00	; 0
    71ce:	01 97       	sbiw	r24, 0x01	; 1
    71d0:	84 9d       	mul	r24, r4
    71d2:	70 01       	movw	r14, r0
    71d4:	85 9d       	mul	r24, r5
    71d6:	f0 0c       	add	r15, r0
    71d8:	94 9d       	mul	r25, r4
    71da:	f0 0c       	add	r15, r0
    71dc:	11 24       	eor	r1, r1
    71de:	74 e7       	ldi	r23, 0x74	; 116
    71e0:	a7 2e       	mov	r10, r23
    71e2:	71 e0       	ldi	r23, 0x01	; 1
    71e4:	b7 2e       	mov	r11, r23
	s = 0; wc = 1;
    71e6:	61 e0       	ldi	r22, 0x01	; 1
    71e8:	c6 2e       	mov	r12, r22
    71ea:	d1 2c       	mov	r13, r1
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    71ec:	f5 01       	movw	r30, r10
    71ee:	81 91       	ld	r24, Z+
    71f0:	5f 01       	movw	r10, r30
    71f2:	f8 01       	movw	r30, r16
    71f4:	e8 0f       	add	r30, r24
    71f6:	f1 1d       	adc	r31, r1
    71f8:	80 81       	ld	r24, Z
    71fa:	91 81       	ldd	r25, Z+1	; 0x01
		if (wc) {	/* Last char has not been processed */
    71fc:	c1 14       	cp	r12, r1
    71fe:	d1 04       	cpc	r13, r1
    7200:	d1 f0       	breq	.+52     	; 0x7236 <dir_find+0x148>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    7202:	29 83       	std	Y+1, r18	; 0x01
    7204:	0e 94 3c 56 	call	0xac78	; 0xac78 <ff_wtoupper>
    7208:	6c 01       	movw	r12, r24
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    720a:	f0 e8       	ldi	r31, 0x80	; 128
    720c:	ef 16       	cp	r14, r31
    720e:	f1 04       	cpc	r15, r1
    7210:	08 f0       	brcs	.+2      	; 0x7214 <dir_find+0x126>
    7212:	49 c0       	rjmp	.+146    	; 0x72a6 <dir_find+0x1b8>
    7214:	f7 01       	movw	r30, r14
    7216:	ee 0f       	add	r30, r30
    7218:	ff 1f       	adc	r31, r31
    721a:	e8 0d       	add	r30, r8
    721c:	f9 1d       	adc	r31, r9
    721e:	80 81       	ld	r24, Z
    7220:	91 81       	ldd	r25, Z+1	; 0x01
    7222:	0e 94 3c 56 	call	0xac78	; 0xac78 <ff_wtoupper>
    7226:	29 81       	ldd	r18, Y+1	; 0x01
    7228:	c8 16       	cp	r12, r24
    722a:	d9 06       	cpc	r13, r25
    722c:	e1 f5       	brne	.+120    	; 0x72a6 <dir_find+0x1b8>
    722e:	08 94       	sec
    7230:	e1 1c       	adc	r14, r1
    7232:	f1 1c       	adc	r15, r1
    7234:	04 c0       	rjmp	.+8      	; 0x723e <dir_find+0x150>
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
    7236:	3f ef       	ldi	r19, 0xFF	; 255
    7238:	8f 3f       	cpi	r24, 0xFF	; 255
    723a:	93 07       	cpc	r25, r19
    723c:	a1 f5       	brne	.+104    	; 0x72a6 <dir_find+0x1b8>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    723e:	81 e8       	ldi	r24, 0x81	; 129
    7240:	a8 16       	cp	r10, r24
    7242:	81 e0       	ldi	r24, 0x01	; 1
    7244:	b8 06       	cpc	r11, r24
    7246:	91 f6       	brne	.-92     	; 0x71ec <dir_find+0xfe>

	if ((dir[LDIR_Ord] & 0x40) && wc && lfnbuf[i])	/* Last segment matched but different length */
    7248:	f8 01       	movw	r30, r16
    724a:	80 81       	ld	r24, Z
    724c:	86 ff       	sbrs	r24, 6
    724e:	52 c0       	rjmp	.+164    	; 0x72f4 <dir_find+0x206>
    7250:	c1 14       	cp	r12, r1
    7252:	d1 04       	cpc	r13, r1
    7254:	09 f4       	brne	.+2      	; 0x7258 <dir_find+0x16a>
    7256:	4e c0       	rjmp	.+156    	; 0x72f4 <dir_find+0x206>
    7258:	f7 01       	movw	r30, r14
    725a:	ee 0f       	add	r30, r30
    725c:	ff 1f       	adc	r31, r31
    725e:	e8 0d       	add	r30, r8
    7260:	f9 1d       	adc	r31, r9
    7262:	80 81       	ld	r24, Z
    7264:	91 81       	ldd	r25, Z+1	; 0x01
    7266:	00 97       	sbiw	r24, 0x00	; 0
    7268:	09 f4       	brne	.+2      	; 0x726c <dir_find+0x17e>
    726a:	44 c0       	rjmp	.+136    	; 0x72f4 <dir_find+0x206>
    726c:	1c c0       	rjmp	.+56     	; 0x72a6 <dir_find+0x1b8>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    726e:	22 23       	and	r18, r18
    7270:	29 f4       	brne	.+10     	; 0x727c <dir_find+0x18e>
    7272:	c8 01       	movw	r24, r16
    7274:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <sum_sfn>
    7278:	78 16       	cp	r7, r24
    727a:	31 f1       	breq	.+76     	; 0x72c8 <dir_find+0x1da>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    727c:	ea 81       	ldd	r30, Y+2	; 0x02
    727e:	fb 81       	ldd	r31, Y+3	; 0x03
    7280:	31 8e       	std	Z+25, r3	; 0x19
    7282:	20 8e       	std	Z+24, r2	; 0x18
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    7284:	a4 89       	ldd	r26, Z+20	; 0x14
    7286:	b5 89       	ldd	r27, Z+21	; 0x15
    7288:	1b 96       	adiw	r26, 0x0b	; 11
    728a:	8c 91       	ld	r24, X
    728c:	1b 97       	sbiw	r26, 0x0b	; 11
    728e:	80 fd       	sbrc	r24, 0
    7290:	0a c0       	rjmp	.+20     	; 0x72a6 <dir_find+0x1b8>
    7292:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/
/* Directory handling - Find an object in the directory                  */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_find (
    7294:	c8 01       	movw	r24, r16
    7296:	0b 96       	adiw	r24, 0x0b	; 11
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    7298:	e8 17       	cp	r30, r24
    729a:	f9 07       	cpc	r31, r25
    729c:	a9 f0       	breq	.+42     	; 0x72c8 <dir_find+0x1da>
    729e:	31 91       	ld	r19, Z+
    72a0:	2d 91       	ld	r18, X+
    72a2:	32 17       	cp	r19, r18
    72a4:	c9 f3       	breq	.-14     	; 0x7298 <dir_find+0x1aa>
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    72a6:	2f ef       	ldi	r18, 0xFF	; 255
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    72a8:	8a 81       	ldd	r24, Y+2	; 0x02
    72aa:	9b 81       	ldd	r25, Y+3	; 0x03
    72ac:	60 e0       	ldi	r22, 0x00	; 0
    72ae:	70 e0       	ldi	r23, 0x00	; 0
    72b0:	29 83       	std	Y+1, r18	; 0x01
    72b2:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <dir_next>
    72b6:	7c 01       	movw	r14, r24
	} while (res == FR_OK);
    72b8:	29 81       	ldd	r18, Y+1	; 0x01
    72ba:	00 97       	sbiw	r24, 0x00	; 0
    72bc:	09 f4       	brne	.+2      	; 0x72c0 <dir_find+0x1d2>
    72be:	3f cf       	rjmp	.-386    	; 0x713e <dir_find+0x50>
    72c0:	03 c0       	rjmp	.+6      	; 0x72c8 <dir_find+0x1da>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    72c2:	34 e0       	ldi	r19, 0x04	; 4
    72c4:	e3 2e       	mov	r14, r19
    72c6:	f1 2c       	mov	r15, r1
#endif
		res = dir_next(dj, 0);		/* Next entry */
	} while (res == FR_OK);

	return res;
}
    72c8:	c7 01       	movw	r24, r14
    72ca:	0f 90       	pop	r0
    72cc:	0f 90       	pop	r0
    72ce:	0f 90       	pop	r0
    72d0:	cf 91       	pop	r28
    72d2:	df 91       	pop	r29
    72d4:	1f 91       	pop	r17
    72d6:	0f 91       	pop	r16
    72d8:	ff 90       	pop	r15
    72da:	ef 90       	pop	r14
    72dc:	df 90       	pop	r13
    72de:	cf 90       	pop	r12
    72e0:	bf 90       	pop	r11
    72e2:	af 90       	pop	r10
    72e4:	9f 90       	pop	r9
    72e6:	8f 90       	pop	r8
    72e8:	7f 90       	pop	r7
    72ea:	5f 90       	pop	r5
    72ec:	4f 90       	pop	r4
    72ee:	3f 90       	pop	r3
    72f0:	2f 90       	pop	r2
    72f2:	08 95       	ret
						sum = dir[LDIR_Chksum];
						c &= 0xBF; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    72f4:	21 50       	subi	r18, 0x01	; 1
    72f6:	d8 cf       	rjmp	.-80     	; 0x72a8 <dir_find+0x1ba>

000072f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    72f8:	a4 e0       	ldi	r26, 0x04	; 4
    72fa:	b0 e0       	ldi	r27, 0x00	; 0
    72fc:	e2 e8       	ldi	r30, 0x82	; 130
    72fe:	f9 e3       	ldi	r31, 0x39	; 57
    7300:	0c 94 d3 5c 	jmp	0xb9a6	; 0xb9a6 <__prologue_saves__+0x2>
    7304:	8c 01       	movw	r16, r24
    7306:	4b 01       	movw	r8, r22
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    7308:	db 01       	movw	r26, r22
    730a:	8c 91       	ld	r24, X
    730c:	8f 32       	cpi	r24, 0x2F	; 47
    730e:	11 f0       	breq	.+4      	; 0x7314 <follow_path+0x1c>
    7310:	8c 35       	cpi	r24, 0x5C	; 92
    7312:	49 f4       	brne	.+18     	; 0x7326 <follow_path+0x2e>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    7314:	08 94       	sec
    7316:	81 1c       	adc	r8, r1
    7318:	91 1c       	adc	r9, r1
    731a:	f8 01       	movw	r30, r16
    731c:	16 82       	std	Z+6, r1	; 0x06
    731e:	17 82       	std	Z+7, r1	; 0x07
    7320:	10 86       	std	Z+8, r1	; 0x08
    7322:	11 86       	std	Z+9, r1	; 0x09
    7324:	0c c0       	rjmp	.+24     	; 0x733e <follow_path+0x46>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    7326:	d8 01       	movw	r26, r16
    7328:	ed 91       	ld	r30, X+
    732a:	fc 91       	ld	r31, X
    732c:	86 89       	ldd	r24, Z+22	; 0x16
    732e:	97 89       	ldd	r25, Z+23	; 0x17
    7330:	a0 8d       	ldd	r26, Z+24	; 0x18
    7332:	b1 8d       	ldd	r27, Z+25	; 0x19
    7334:	f8 01       	movw	r30, r16
    7336:	86 83       	std	Z+6, r24	; 0x06
    7338:	97 83       	std	Z+7, r25	; 0x07
    733a:	a0 87       	std	Z+8, r26	; 0x08
    733c:	b1 87       	std	Z+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    733e:	d4 01       	movw	r26, r8
    7340:	8c 91       	ld	r24, X
    7342:	80 32       	cpi	r24, 0x20	; 32
    7344:	68 f4       	brcc	.+26     	; 0x7360 <follow_path+0x68>
		res = dir_sdi(dj, 0);
    7346:	c8 01       	movw	r24, r16
    7348:	60 e0       	ldi	r22, 0x00	; 0
    734a:	70 e0       	ldi	r23, 0x00	; 0
    734c:	0e 94 13 35 	call	0x6a26	; 0x6a26 <dir_sdi>
    7350:	9c 01       	movw	r18, r24
		dj->dir = 0;
    7352:	f8 01       	movw	r30, r16
    7354:	13 8a       	std	Z+19, r1	; 0x13
    7356:	12 8a       	std	Z+18, r1	; 0x12
    7358:	11 c2       	rjmp	.+1058   	; 0x777c <follow_path+0x484>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Return pointer to the next segment */
    735a:	84 0c       	add	r8, r4
    735c:	95 1c       	adc	r9, r5
    735e:	02 c0       	rjmp	.+4      	; 0x7364 <follow_path+0x6c>
			}
		}
		dj->fn[i++] = (BYTE)w;
	}

	if (dj->fn[0] == 0xE5) dj->fn[0] = 0x05;	/* If the first char collides with deleted mark, replace it with 0x05 */
    7360:	b5 e0       	ldi	r27, 0x05	; 5
    7362:	3b 2e       	mov	r3, r27
	const TCHAR *p;

	/* Create LFN in Unicode */
	si = di = 0;
	p = *path;
	lfn = dj->lfn;
    7364:	d8 01       	movw	r26, r16
    7366:	56 96       	adiw	r26, 0x16	; 22
    7368:	ad 90       	ld	r10, X+
    736a:	bc 90       	ld	r11, X
    736c:	57 97       	sbiw	r26, 0x17	; 23
    736e:	35 01       	movw	r6, r10
    7370:	75 01       	movw	r14, r10
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	si = di = 0;
    7372:	1c 82       	std	Y+4, r1	; 0x04
    7374:	1b 82       	std	Y+3, r1	; 0x03
    7376:	44 24       	eor	r4, r4
    7378:	55 24       	eor	r5, r5
	p = *path;
	lfn = dj->lfn;
	for (;;) {
		w = p[si++];					/* Get a character */
    737a:	f4 01       	movw	r30, r8
    737c:	e4 0d       	add	r30, r4
    737e:	f5 1d       	adc	r31, r5
    7380:	80 81       	ld	r24, Z
    7382:	99 27       	eor	r25, r25
    7384:	87 fd       	sbrc	r24, 7
    7386:	90 95       	com	r25
    7388:	08 94       	sec
    738a:	41 1c       	adc	r4, r1
    738c:	51 1c       	adc	r5, r1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    738e:	80 32       	cpi	r24, 0x20	; 32
    7390:	91 05       	cpc	r25, r1
    7392:	08 f4       	brcc	.+2      	; 0x7396 <follow_path+0x9e>
    7394:	4a c0       	rjmp	.+148    	; 0x742a <follow_path+0x132>
    7396:	8f 32       	cpi	r24, 0x2F	; 47
    7398:	91 05       	cpc	r25, r1
    739a:	09 f4       	brne	.+2      	; 0x739e <follow_path+0xa6>
    739c:	48 c0       	rjmp	.+144    	; 0x742e <follow_path+0x136>
    739e:	8c 35       	cpi	r24, 0x5C	; 92
    73a0:	91 05       	cpc	r25, r1
    73a2:	09 f4       	brne	.+2      	; 0x73a6 <follow_path+0xae>
    73a4:	44 c0       	rjmp	.+136    	; 0x742e <follow_path+0x136>
		if (di >= _MAX_LFN)				/* Reject too long name */
    73a6:	eb 81       	ldd	r30, Y+3	; 0x03
    73a8:	fc 81       	ldd	r31, Y+4	; 0x04
    73aa:	e0 38       	cpi	r30, 0x80	; 128
    73ac:	f1 05       	cpc	r31, r1
    73ae:	09 f4       	brne	.+2      	; 0x73b2 <follow_path+0xba>
    73b0:	e0 c1       	rjmp	.+960    	; 0x7772 <follow_path+0x47a>
			return FR_INVALID_NAME;
#if !_LFN_UNICODE
		w &= 0xFF;
    73b2:	90 70       	andi	r25, 0x00	; 0
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    73b4:	28 2f       	mov	r18, r24
    73b6:	38 2f       	mov	r19, r24
    73b8:	31 58       	subi	r19, 0x81	; 129
    73ba:	3f 31       	cpi	r19, 0x1F	; 31
    73bc:	18 f0       	brcs	.+6      	; 0x73c4 <follow_path+0xcc>
    73be:	20 5e       	subi	r18, 0xE0	; 224
    73c0:	2d 31       	cpi	r18, 0x1D	; 29
    73c2:	98 f4       	brcc	.+38     	; 0x73ea <follow_path+0xf2>
			b = (BYTE)p[si++];			/* Get 2nd byte */
    73c4:	f4 01       	movw	r30, r8
    73c6:	e4 0d       	add	r30, r4
    73c8:	f5 1d       	adc	r31, r5
    73ca:	20 81       	ld	r18, Z
			if (!IsDBCS2(b))
    73cc:	32 2f       	mov	r19, r18
    73ce:	30 54       	subi	r19, 0x40	; 64
    73d0:	3f 33       	cpi	r19, 0x3F	; 63
    73d2:	20 f0       	brcs	.+8      	; 0x73dc <follow_path+0xe4>
    73d4:	30 54       	subi	r19, 0x40	; 64
    73d6:	3d 37       	cpi	r19, 0x7D	; 125
    73d8:	08 f0       	brcs	.+2      	; 0x73dc <follow_path+0xe4>
    73da:	cb c1       	rjmp	.+918    	; 0x7772 <follow_path+0x47a>
		if (di >= _MAX_LFN)				/* Reject too long name */
			return FR_INVALID_NAME;
#if !_LFN_UNICODE
		w &= 0xFF;
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
    73dc:	08 94       	sec
    73de:	41 1c       	adc	r4, r1
    73e0:	51 1c       	adc	r5, r1
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
    73e2:	98 2f       	mov	r25, r24
    73e4:	88 27       	eor	r24, r24
    73e6:	82 0f       	add	r24, r18
    73e8:	91 1d       	adc	r25, r1
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    73ea:	61 e0       	ldi	r22, 0x01	; 1
    73ec:	70 e0       	ldi	r23, 0x00	; 0
    73ee:	0e 94 e4 55 	call	0xabc8	; 0xabc8 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    73f2:	00 97       	sbiw	r24, 0x00	; 0
    73f4:	09 f4       	brne	.+2      	; 0x73f8 <follow_path+0x100>
    73f6:	bd c1       	rjmp	.+890    	; 0x7772 <follow_path+0x47a>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    73f8:	80 38       	cpi	r24, 0x80	; 128
    73fa:	91 05       	cpc	r25, r1
    73fc:	60 f4       	brcc	.+24     	; 0x7416 <follow_path+0x11e>
    73fe:	e4 e0       	ldi	r30, 0x04	; 4
    7400:	f1 e0       	ldi	r31, 0x01	; 1
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    7402:	21 91       	ld	r18, Z+
    7404:	22 23       	and	r18, r18
    7406:	39 f0       	breq	.+14     	; 0x7416 <follow_path+0x11e>
    7408:	33 27       	eor	r19, r19
    740a:	27 fd       	sbrc	r18, 7
    740c:	30 95       	com	r19
    740e:	28 17       	cp	r18, r24
    7410:	39 07       	cpc	r19, r25
    7412:	b9 f7       	brne	.-18     	; 0x7402 <follow_path+0x10a>
    7414:	ae c1       	rjmp	.+860    	; 0x7772 <follow_path+0x47a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
    7416:	d7 01       	movw	r26, r14
    7418:	8d 93       	st	X+, r24
    741a:	9d 93       	st	X+, r25
    741c:	7d 01       	movw	r14, r26
    741e:	eb 81       	ldd	r30, Y+3	; 0x03
    7420:	fc 81       	ldd	r31, Y+4	; 0x04
    7422:	31 96       	adiw	r30, 0x01	; 1
    7424:	fc 83       	std	Y+4, r31	; 0x04
    7426:	eb 83       	std	Y+3, r30	; 0x03
    7428:	a8 cf       	rjmp	.-176    	; 0x737a <follow_path+0x82>
	}
	*path = &p[si];						/* Return pointer to the next segment */
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    742a:	24 e0       	ldi	r18, 0x04	; 4
    742c:	01 c0       	rjmp	.+2      	; 0x7430 <follow_path+0x138>
    742e:	20 e0       	ldi	r18, 0x00	; 0
    7430:	8b 81       	ldd	r24, Y+3	; 0x03
    7432:	9c 81       	ldd	r25, Y+4	; 0x04
    7434:	88 0f       	add	r24, r24
    7436:	99 1f       	adc	r25, r25
#if _FS_RPATH
	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
    7438:	4b 81       	ldd	r20, Y+3	; 0x03
    743a:	5c 81       	ldd	r21, Y+4	; 0x04
    743c:	41 30       	cpi	r20, 0x01	; 1
    743e:	51 05       	cpc	r21, r1
    7440:	29 f4       	brne	.+10     	; 0x744c <follow_path+0x154>
    7442:	d5 01       	movw	r26, r10
    7444:	4d 91       	ld	r20, X+
    7446:	5c 91       	ld	r21, X
    7448:	11 97       	sbiw	r26, 0x01	; 1
    744a:	14 c0       	rjmp	.+40     	; 0x7474 <follow_path+0x17c>
    744c:	eb 81       	ldd	r30, Y+3	; 0x03
    744e:	fc 81       	ldd	r31, Y+4	; 0x04
    7450:	e2 30       	cpi	r30, 0x02	; 2
    7452:	f1 05       	cpc	r31, r1
    7454:	41 f4       	brne	.+16     	; 0x7466 <follow_path+0x16e>
		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
    7456:	d5 01       	movw	r26, r10
    7458:	12 96       	adiw	r26, 0x02	; 2
    745a:	4d 91       	ld	r20, X+
    745c:	5c 91       	ld	r21, X
    745e:	13 97       	sbiw	r26, 0x03	; 3
    7460:	4e 32       	cpi	r20, 0x2E	; 46
    7462:	51 05       	cpc	r21, r1
    7464:	21 f0       	breq	.+8      	; 0x746e <follow_path+0x176>
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    7466:	f5 01       	movw	r30, r10
    7468:	e8 0f       	add	r30, r24
    746a:	f9 1f       	adc	r31, r25
    746c:	36 c0       	rjmp	.+108    	; 0x74da <follow_path+0x1e2>
	}
	*path = &p[si];						/* Return pointer to the next segment */
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
#if _FS_RPATH
	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
    746e:	f5 01       	movw	r30, r10
    7470:	40 81       	ld	r20, Z
    7472:	51 81       	ldd	r21, Z+1	; 0x01
    7474:	4e 32       	cpi	r20, 0x2E	; 46
    7476:	51 05       	cpc	r21, r1
    7478:	b1 f7       	brne	.-20     	; 0x7466 <follow_path+0x16e>
		lfn[di] = 0;
    747a:	a8 0e       	add	r10, r24
    747c:	b9 1e       	adc	r11, r25
    747e:	d5 01       	movw	r26, r10
    7480:	1d 92       	st	X+, r1
    7482:	1c 92       	st	X, r1
		for (i = 0; i < 11; i++)
    7484:	80 e0       	ldi	r24, 0x00	; 0
    7486:	90 e0       	ldi	r25, 0x00	; 0
			dj->fn[i] = (i < di) ? '.' : ' ';
    7488:	d8 01       	movw	r26, r16
    748a:	54 96       	adiw	r26, 0x14	; 20
    748c:	ed 91       	ld	r30, X+
    748e:	fc 91       	ld	r31, X
    7490:	55 97       	sbiw	r26, 0x15	; 21
    7492:	e8 0f       	add	r30, r24
    7494:	f9 1f       	adc	r31, r25
    7496:	4b 81       	ldd	r20, Y+3	; 0x03
    7498:	5c 81       	ldd	r21, Y+4	; 0x04
    749a:	84 17       	cp	r24, r20
    749c:	95 07       	cpc	r25, r21
    749e:	10 f4       	brcc	.+4      	; 0x74a4 <follow_path+0x1ac>
    74a0:	3e e2       	ldi	r19, 0x2E	; 46
    74a2:	01 c0       	rjmp	.+2      	; 0x74a6 <follow_path+0x1ae>
    74a4:	30 e2       	ldi	r19, 0x20	; 32
    74a6:	30 83       	st	Z, r19
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
#if _FS_RPATH
	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
		lfn[di] = 0;
		for (i = 0; i < 11; i++)
    74a8:	01 96       	adiw	r24, 0x01	; 1
    74aa:	8b 30       	cpi	r24, 0x0B	; 11
    74ac:	91 05       	cpc	r25, r1
    74ae:	61 f7       	brne	.-40     	; 0x7488 <follow_path+0x190>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
    74b0:	d8 01       	movw	r26, r16
    74b2:	54 96       	adiw	r26, 0x14	; 20
    74b4:	ed 91       	ld	r30, X+
    74b6:	fc 91       	ld	r31, X
    74b8:	55 97       	sbiw	r26, 0x15	; 21
    74ba:	20 62       	ori	r18, 0x20	; 32
    74bc:	15 c1       	rjmp	.+554    	; 0x76e8 <follow_path+0x3f0>
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
    74be:	92 91       	ld	r25, -Z
    74c0:	82 91       	ld	r24, -Z
		if (w != ' ' && w != '.') break;
    74c2:	80 32       	cpi	r24, 0x20	; 32
    74c4:	91 05       	cpc	r25, r1
    74c6:	19 f0       	breq	.+6      	; 0x74ce <follow_path+0x1d6>
    74c8:	8e 32       	cpi	r24, 0x2E	; 46
    74ca:	91 05       	cpc	r25, r1
    74cc:	59 f4       	brne	.+22     	; 0x74e4 <follow_path+0x1ec>
		di--;
    74ce:	4b 81       	ldd	r20, Y+3	; 0x03
    74d0:	5c 81       	ldd	r21, Y+4	; 0x04
    74d2:	41 50       	subi	r20, 0x01	; 1
    74d4:	50 40       	sbci	r21, 0x00	; 0
    74d6:	5c 83       	std	Y+4, r21	; 0x04
    74d8:	4b 83       	std	Y+3, r20	; 0x03
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
    74da:	8b 81       	ldd	r24, Y+3	; 0x03
    74dc:	9c 81       	ldd	r25, Y+4	; 0x04
    74de:	00 97       	sbiw	r24, 0x00	; 0
    74e0:	71 f7       	brne	.-36     	; 0x74be <follow_path+0x1c6>
    74e2:	47 c1       	rjmp	.+654    	; 0x7772 <follow_path+0x47a>
		if (w != ' ' && w != '.') break;
		di--;
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */

	lfn[di] = 0;						/* LFN is created */
    74e4:	cb 80       	ldd	r12, Y+3	; 0x03
    74e6:	dc 80       	ldd	r13, Y+4	; 0x04
    74e8:	cc 0c       	add	r12, r12
    74ea:	dd 1c       	adc	r13, r13
    74ec:	ca 0c       	add	r12, r10
    74ee:	db 1c       	adc	r13, r11
    74f0:	d6 01       	movw	r26, r12
    74f2:	1d 92       	st	X+, r1
    74f4:	1c 92       	st	X, r1

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
    74f6:	f8 01       	movw	r30, r16
    74f8:	84 89       	ldd	r24, Z+20	; 0x14
    74fa:	95 89       	ldd	r25, Z+21	; 0x15
    74fc:	60 e2       	ldi	r22, 0x20	; 32
    74fe:	70 e0       	ldi	r23, 0x00	; 0
    7500:	4b e0       	ldi	r20, 0x0B	; 11
    7502:	50 e0       	ldi	r21, 0x00	; 0
    7504:	2a 83       	std	Y+2, r18	; 0x02
    7506:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    750a:	ee 24       	eor	r14, r14
    750c:	ff 24       	eor	r15, r15
    750e:	2a 81       	ldd	r18, Y+2	; 0x02
    7510:	03 c0       	rjmp	.+6      	; 0x7518 <follow_path+0x220>
    7512:	08 94       	sec
    7514:	e1 1c       	adc	r14, r1
    7516:	f1 1c       	adc	r15, r1
    7518:	d3 01       	movw	r26, r6
    751a:	8d 91       	ld	r24, X+
    751c:	9d 91       	ld	r25, X+
    751e:	3d 01       	movw	r6, r26
    7520:	80 32       	cpi	r24, 0x20	; 32
    7522:	91 05       	cpc	r25, r1
    7524:	b1 f3       	breq	.-20     	; 0x7512 <follow_path+0x21a>
    7526:	8e 32       	cpi	r24, 0x2E	; 46
    7528:	91 05       	cpc	r25, r1
    752a:	99 f3       	breq	.-26     	; 0x7512 <follow_path+0x21a>
	if (si) cf |= NS_LOSS | NS_LFN;
    752c:	e1 14       	cp	r14, r1
    752e:	f1 04       	cpc	r15, r1
    7530:	09 f0       	breq	.+2      	; 0x7534 <follow_path+0x23c>
    7532:	23 60       	ori	r18, 0x03	; 3
    7534:	f6 01       	movw	r30, r12
    7536:	10 c0       	rjmp	.+32     	; 0x7558 <follow_path+0x260>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    7538:	4b 81       	ldd	r20, Y+3	; 0x03
    753a:	5c 81       	ldd	r21, Y+4	; 0x04
    753c:	41 50       	subi	r20, 0x01	; 1
    753e:	50 40       	sbci	r21, 0x00	; 0
    7540:	5c 83       	std	Y+4, r21	; 0x04
    7542:	4b 83       	std	Y+3, r20	; 0x03
    7544:	41 15       	cp	r20, r1
    7546:	51 05       	cpc	r21, r1
    7548:	39 f4       	brne	.+14     	; 0x7558 <follow_path+0x260>
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
    754a:	78 e0       	ldi	r23, 0x08	; 8
    754c:	67 2e       	mov	r6, r23
    754e:	71 2c       	mov	r7, r1
    7550:	cc 24       	eor	r12, r12
    7552:	dd 24       	eor	r13, r13
    7554:	30 e0       	ldi	r19, 0x00	; 0
    7556:	06 c0       	rjmp	.+12     	; 0x7564 <follow_path+0x26c>

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    7558:	92 91       	ld	r25, -Z
    755a:	82 91       	ld	r24, -Z
    755c:	8e 32       	cpi	r24, 0x2E	; 46
    755e:	91 05       	cpc	r25, r1
    7560:	59 f7       	brne	.-42     	; 0x7538 <follow_path+0x240>
    7562:	f3 cf       	rjmp	.-26     	; 0x754a <follow_path+0x252>

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
    7564:	f7 01       	movw	r30, r14
    7566:	ee 0f       	add	r30, r30
    7568:	ff 1f       	adc	r31, r31
    756a:	ea 0d       	add	r30, r10
    756c:	fb 1d       	adc	r31, r11
    756e:	80 81       	ld	r24, Z
    7570:	91 81       	ldd	r25, Z+1	; 0x01
		if (!w) break;					/* Break on end of the LFN */
    7572:	00 97       	sbiw	r24, 0x00	; 0
    7574:	09 f4       	brne	.+2      	; 0x7578 <follow_path+0x280>
    7576:	89 c0       	rjmp	.+274    	; 0x768a <follow_path+0x392>
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
    7578:	08 94       	sec
    757a:	e1 1c       	adc	r14, r1
    757c:	f1 1c       	adc	r15, r1
		if (!w) break;					/* Break on end of the LFN */
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    757e:	80 32       	cpi	r24, 0x20	; 32
    7580:	91 05       	cpc	r25, r1
    7582:	41 f0       	breq	.+16     	; 0x7594 <follow_path+0x29c>
    7584:	8e 32       	cpi	r24, 0x2E	; 46
    7586:	91 05       	cpc	r25, r1
    7588:	39 f4       	brne	.+14     	; 0x7598 <follow_path+0x2a0>
    758a:	ab 81       	ldd	r26, Y+3	; 0x03
    758c:	bc 81       	ldd	r27, Y+4	; 0x04
    758e:	ea 16       	cp	r14, r26
    7590:	fb 06       	cpc	r15, r27
    7592:	11 f0       	breq	.+4      	; 0x7598 <follow_path+0x2a0>
			cf |= NS_LOSS | NS_LFN; continue;
    7594:	23 60       	ori	r18, 0x03	; 3
    7596:	e6 cf       	rjmp	.-52     	; 0x7564 <follow_path+0x26c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
    7598:	c6 14       	cp	r12, r6
    759a:	d7 04       	cpc	r13, r7
    759c:	28 f4       	brcc	.+10     	; 0x75a8 <follow_path+0x2b0>
    759e:	eb 81       	ldd	r30, Y+3	; 0x03
    75a0:	fc 81       	ldd	r31, Y+4	; 0x04
    75a2:	ee 16       	cp	r14, r30
    75a4:	ff 06       	cpc	r15, r31
    75a6:	d9 f4       	brne	.+54     	; 0x75de <follow_path+0x2e6>
			if (ni == 11) {				/* Long extension */
    75a8:	fb e0       	ldi	r31, 0x0B	; 11
    75aa:	6f 16       	cp	r6, r31
    75ac:	71 04       	cpc	r7, r1
    75ae:	11 f4       	brne	.+4      	; 0x75b4 <follow_path+0x2bc>
				cf |= NS_LOSS | NS_LFN; break;
    75b0:	23 60       	ori	r18, 0x03	; 3
    75b2:	6b c0       	rjmp	.+214    	; 0x768a <follow_path+0x392>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    75b4:	4b 81       	ldd	r20, Y+3	; 0x03
    75b6:	5c 81       	ldd	r21, Y+4	; 0x04
    75b8:	e4 16       	cp	r14, r20
    75ba:	f5 06       	cpc	r15, r21
    75bc:	29 f0       	breq	.+10     	; 0x75c8 <follow_path+0x2d0>
    75be:	23 60       	ori	r18, 0x03	; 3
			if (si > di) break;			/* No extension */
    75c0:	4e 15       	cp	r20, r14
    75c2:	5f 05       	cpc	r21, r15
    75c4:	08 f4       	brcc	.+2      	; 0x75c8 <follow_path+0x2d0>
    75c6:	61 c0       	rjmp	.+194    	; 0x768a <follow_path+0x392>
			si = di; i = 8; ni = 11;	/* Enter extension section */
			b <<= 2; continue;
    75c8:	33 0f       	add	r19, r19
    75ca:	33 0f       	add	r19, r19
    75cc:	eb 80       	ldd	r14, Y+3	; 0x03
    75ce:	fc 80       	ldd	r15, Y+4	; 0x04
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
    75d0:	5b e0       	ldi	r21, 0x0B	; 11
    75d2:	65 2e       	mov	r6, r21
    75d4:	71 2c       	mov	r7, r1
    75d6:	48 e0       	ldi	r20, 0x08	; 8
    75d8:	c4 2e       	mov	r12, r20
    75da:	d1 2c       	mov	r13, r1
    75dc:	c3 cf       	rjmp	.-122    	; 0x7564 <follow_path+0x26c>
			b <<= 2; continue;
		}

		if (w >= 0x80) {				/* Non ASCII char */
    75de:	80 38       	cpi	r24, 0x80	; 128
    75e0:	91 05       	cpc	r25, r1
    75e2:	30 f1       	brcs	.+76     	; 0x7630 <follow_path+0x338>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
    75e4:	2a 83       	std	Y+2, r18	; 0x02
    75e6:	39 83       	std	Y+1, r19	; 0x01
    75e8:	0e 94 3c 56 	call	0xac78	; 0xac78 <ff_wtoupper>
    75ec:	60 e0       	ldi	r22, 0x00	; 0
    75ee:	70 e0       	ldi	r23, 0x00	; 0
    75f0:	0e 94 e4 55 	call	0xabc8	; 0xabc8 <ff_convert>
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
    75f4:	2a 81       	ldd	r18, Y+2	; 0x02
    75f6:	22 60       	ori	r18, 0x02	; 2
		}

		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
    75f8:	39 81       	ldd	r19, Y+1	; 0x01
    75fa:	8f 3f       	cpi	r24, 0xFF	; 255
    75fc:	91 05       	cpc	r25, r1
    75fe:	b1 f0       	breq	.+44     	; 0x762c <follow_path+0x334>
    7600:	a8 f0       	brcs	.+42     	; 0x762c <follow_path+0x334>
			if (i >= ni - 1) {
    7602:	a3 01       	movw	r20, r6
    7604:	41 50       	subi	r20, 0x01	; 1
    7606:	50 40       	sbci	r21, 0x00	; 0
    7608:	c4 16       	cp	r12, r20
    760a:	d5 06       	cpc	r13, r21
    760c:	18 f0       	brcs	.+6      	; 0x7614 <follow_path+0x31c>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
    760e:	23 60       	ori	r18, 0x03	; 3
    7610:	63 01       	movw	r12, r6
    7612:	a8 cf       	rjmp	.-176    	; 0x7564 <follow_path+0x26c>
			}
			dj->fn[i++] = (BYTE)(w >> 8);
    7614:	d8 01       	movw	r26, r16
    7616:	54 96       	adiw	r26, 0x14	; 20
    7618:	ed 91       	ld	r30, X+
    761a:	fc 91       	ld	r31, X
    761c:	55 97       	sbiw	r26, 0x15	; 21
    761e:	ec 0d       	add	r30, r12
    7620:	fd 1d       	adc	r31, r13
    7622:	90 83       	st	Z, r25
    7624:	08 94       	sec
    7626:	c1 1c       	adc	r12, r1
    7628:	d1 1c       	adc	r13, r1
    762a:	23 c0       	rjmp	.+70     	; 0x7672 <follow_path+0x37a>
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    762c:	00 97       	sbiw	r24, 0x00	; 0
    762e:	99 f0       	breq	.+38     	; 0x7656 <follow_path+0x35e>
    7630:	ed e0       	ldi	r30, 0x0D	; 13
    7632:	f1 e0       	ldi	r31, 0x01	; 1
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    7634:	41 91       	ld	r20, Z+
    7636:	44 23       	and	r20, r20
    7638:	39 f0       	breq	.+14     	; 0x7648 <follow_path+0x350>
    763a:	55 27       	eor	r21, r21
    763c:	47 fd       	sbrc	r20, 7
    763e:	50 95       	com	r21
    7640:	48 17       	cp	r20, r24
    7642:	59 07       	cpc	r21, r25
    7644:	b9 f7       	brne	.-18     	; 0x7634 <follow_path+0x33c>
    7646:	07 c0       	rjmp	.+14     	; 0x7656 <follow_path+0x35e>
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
    7648:	ac 01       	movw	r20, r24
    764a:	41 54       	subi	r20, 0x41	; 65
    764c:	50 40       	sbci	r21, 0x00	; 0
    764e:	4a 31       	cpi	r20, 0x1A	; 26
    7650:	51 05       	cpc	r21, r1
    7652:	28 f0       	brcs	.+10     	; 0x765e <follow_path+0x366>
    7654:	06 c0       	rjmp	.+12     	; 0x7662 <follow_path+0x36a>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    7656:	23 60       	ori	r18, 0x03	; 3
    7658:	8f e5       	ldi	r24, 0x5F	; 95
    765a:	90 e0       	ldi	r25, 0x00	; 0
    765c:	0a c0       	rjmp	.+20     	; 0x7672 <follow_path+0x37a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
					b |= 2;
    765e:	32 60       	ori	r19, 0x02	; 2
    7660:	08 c0       	rjmp	.+16     	; 0x7672 <follow_path+0x37a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
    7662:	ac 01       	movw	r20, r24
    7664:	41 56       	subi	r20, 0x61	; 97
    7666:	50 40       	sbci	r21, 0x00	; 0
    7668:	4a 31       	cpi	r20, 0x1A	; 26
    766a:	51 05       	cpc	r21, r1
    766c:	10 f4       	brcc	.+4      	; 0x7672 <follow_path+0x37a>
						b |= 1; w -= 0x20;
    766e:	31 60       	ori	r19, 0x01	; 1
    7670:	80 97       	sbiw	r24, 0x20	; 32
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
    7672:	d8 01       	movw	r26, r16
    7674:	54 96       	adiw	r26, 0x14	; 20
    7676:	ed 91       	ld	r30, X+
    7678:	fc 91       	ld	r31, X
    767a:	55 97       	sbiw	r26, 0x15	; 21
    767c:	ec 0d       	add	r30, r12
    767e:	fd 1d       	adc	r31, r13
    7680:	80 83       	st	Z, r24
    7682:	08 94       	sec
    7684:	c1 1c       	adc	r12, r1
    7686:	d1 1c       	adc	r13, r1
    7688:	6d cf       	rjmp	.-294    	; 0x7564 <follow_path+0x26c>
	}

	if (dj->fn[0] == 0xE5) dj->fn[0] = 0x05;	/* If the first char collides with deleted mark, replace it with 0x05 */
    768a:	d8 01       	movw	r26, r16
    768c:	54 96       	adiw	r26, 0x14	; 20
    768e:	ed 91       	ld	r30, X+
    7690:	fc 91       	ld	r31, X
    7692:	55 97       	sbiw	r26, 0x15	; 21
    7694:	80 81       	ld	r24, Z
    7696:	85 3e       	cpi	r24, 0xE5	; 229
    7698:	09 f4       	brne	.+2      	; 0x769c <follow_path+0x3a4>
    769a:	30 82       	st	Z, r3

	if (ni == 8) b <<= 2;
    769c:	b8 e0       	ldi	r27, 0x08	; 8
    769e:	6b 16       	cp	r6, r27
    76a0:	71 04       	cpc	r7, r1
    76a2:	11 f4       	brne	.+4      	; 0x76a8 <follow_path+0x3b0>
    76a4:	33 0f       	add	r19, r19
    76a6:	33 0f       	add	r19, r19
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    76a8:	83 2f       	mov	r24, r19
    76aa:	90 e0       	ldi	r25, 0x00	; 0
    76ac:	ac 01       	movw	r20, r24
    76ae:	4c 70       	andi	r20, 0x0C	; 12
    76b0:	50 70       	andi	r21, 0x00	; 0
    76b2:	4c 30       	cpi	r20, 0x0C	; 12
    76b4:	51 05       	cpc	r21, r1
    76b6:	31 f0       	breq	.+12     	; 0x76c4 <follow_path+0x3cc>
    76b8:	bc 01       	movw	r22, r24
    76ba:	63 70       	andi	r22, 0x03	; 3
    76bc:	70 70       	andi	r23, 0x00	; 0
    76be:	63 30       	cpi	r22, 0x03	; 3
    76c0:	71 05       	cpc	r23, r1
    76c2:	09 f4       	brne	.+2      	; 0x76c6 <follow_path+0x3ce>
		cf |= NS_LFN;
    76c4:	22 60       	ori	r18, 0x02	; 2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    76c6:	21 fd       	sbrc	r18, 1
    76c8:	0a c0       	rjmp	.+20     	; 0x76de <follow_path+0x3e6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    76ca:	83 70       	andi	r24, 0x03	; 3
    76cc:	90 70       	andi	r25, 0x00	; 0
    76ce:	81 30       	cpi	r24, 0x01	; 1
    76d0:	91 05       	cpc	r25, r1
    76d2:	09 f4       	brne	.+2      	; 0x76d6 <follow_path+0x3de>
    76d4:	20 61       	ori	r18, 0x10	; 16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    76d6:	44 30       	cpi	r20, 0x04	; 4
    76d8:	51 05       	cpc	r21, r1
    76da:	09 f4       	brne	.+2      	; 0x76de <follow_path+0x3e6>
    76dc:	28 60       	ori	r18, 0x08	; 8
	}

	dj->fn[NS] = cf;	/* SFN is created */
    76de:	d8 01       	movw	r26, r16
    76e0:	54 96       	adiw	r26, 0x14	; 20
    76e2:	ed 91       	ld	r30, X+
    76e4:	fc 91       	ld	r31, X
    76e6:	55 97       	sbiw	r26, 0x15	; 21
    76e8:	23 87       	std	Z+11, r18	; 0x0b

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
    76ea:	c8 01       	movw	r24, r16
    76ec:	0e 94 77 38 	call	0x70ee	; 0x70ee <dir_find>
    76f0:	9c 01       	movw	r18, r24
			ns = *(dj->fn+NS);
    76f2:	d8 01       	movw	r26, r16
    76f4:	54 96       	adiw	r26, 0x14	; 20
    76f6:	ed 91       	ld	r30, X+
    76f8:	fc 91       	ld	r31, X
    76fa:	55 97       	sbiw	r26, 0x15	; 21
    76fc:	43 85       	ldd	r20, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
    76fe:	00 97       	sbiw	r24, 0x00	; 0
    7700:	c9 f0       	breq	.+50     	; 0x7734 <follow_path+0x43c>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    7702:	24 30       	cpi	r18, 0x04	; 4
    7704:	31 05       	cpc	r19, r1
    7706:	d1 f5       	brne	.+116    	; 0x777c <follow_path+0x484>
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
    7708:	50 e0       	ldi	r21, 0x00	; 0
    770a:	ca 01       	movw	r24, r20
    770c:	84 70       	andi	r24, 0x04	; 4
    770e:	90 70       	andi	r25, 0x00	; 0
    7710:	45 ff       	sbrs	r20, 5
    7712:	0d c0       	rjmp	.+26     	; 0x772e <follow_path+0x436>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
    7714:	f8 01       	movw	r30, r16
    7716:	16 82       	std	Z+6, r1	; 0x06
    7718:	17 82       	std	Z+7, r1	; 0x07
    771a:	10 86       	std	Z+8, r1	; 0x08
    771c:	11 86       	std	Z+9, r1	; 0x09
    771e:	13 8a       	std	Z+19, r1	; 0x13
    7720:	12 8a       	std	Z+18, r1	; 0x12
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
    7722:	00 97       	sbiw	r24, 0x00	; 0
    7724:	09 f4       	brne	.+2      	; 0x7728 <follow_path+0x430>
    7726:	19 ce       	rjmp	.-974    	; 0x735a <follow_path+0x62>
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
    7728:	20 e0       	ldi	r18, 0x00	; 0
    772a:	30 e0       	ldi	r19, 0x00	; 0
    772c:	27 c0       	rjmp	.+78     	; 0x777c <follow_path+0x484>
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    772e:	00 97       	sbiw	r24, 0x00	; 0
    7730:	19 f1       	breq	.+70     	; 0x7778 <follow_path+0x480>
    7732:	24 c0       	rjmp	.+72     	; 0x777c <follow_path+0x484>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    7734:	42 fd       	sbrc	r20, 2
    7736:	22 c0       	rjmp	.+68     	; 0x777c <follow_path+0x484>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    7738:	d8 01       	movw	r26, r16
    773a:	52 96       	adiw	r26, 0x12	; 18
    773c:	ed 91       	ld	r30, X+
    773e:	fc 91       	ld	r31, X
    7740:	53 97       	sbiw	r26, 0x13	; 19
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    7742:	83 85       	ldd	r24, Z+11	; 0x0b
    7744:	84 ff       	sbrs	r24, 4
    7746:	18 c0       	rjmp	.+48     	; 0x7778 <follow_path+0x480>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
    7748:	84 89       	ldd	r24, Z+20	; 0x14
    774a:	95 89       	ldd	r25, Z+21	; 0x15
    774c:	a0 e0       	ldi	r26, 0x00	; 0
    774e:	b0 e0       	ldi	r27, 0x00	; 0
    7750:	dc 01       	movw	r26, r24
    7752:	99 27       	eor	r25, r25
    7754:	88 27       	eor	r24, r24
    7756:	22 8d       	ldd	r18, Z+26	; 0x1a
    7758:	33 8d       	ldd	r19, Z+27	; 0x1b
    775a:	40 e0       	ldi	r20, 0x00	; 0
    775c:	50 e0       	ldi	r21, 0x00	; 0
    775e:	82 2b       	or	r24, r18
    7760:	93 2b       	or	r25, r19
    7762:	a4 2b       	or	r26, r20
    7764:	b5 2b       	or	r27, r21
    7766:	f8 01       	movw	r30, r16
    7768:	86 83       	std	Z+6, r24	; 0x06
    776a:	97 83       	std	Z+7, r25	; 0x07
    776c:	a0 87       	std	Z+8, r26	; 0x08
    776e:	b1 87       	std	Z+9, r27	; 0x09
    7770:	f4 cd       	rjmp	.-1048   	; 0x735a <follow_path+0x62>
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    7772:	26 e0       	ldi	r18, 0x06	; 6
    7774:	30 e0       	ldi	r19, 0x00	; 0
    7776:	02 c0       	rjmp	.+4      	; 0x777c <follow_path+0x484>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    7778:	25 e0       	ldi	r18, 0x05	; 5
    777a:	30 e0       	ldi	r19, 0x00	; 0
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
    777c:	c9 01       	movw	r24, r18
    777e:	24 96       	adiw	r28, 0x04	; 4
    7780:	e1 e1       	ldi	r30, 0x11	; 17
    7782:	0c 94 ef 5c 	jmp	0xb9de	; 0xb9de <__epilogue_restores__+0x2>

00007786 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    7786:	ef 92       	push	r14
    7788:	ff 92       	push	r15
    778a:	0f 93       	push	r16
    778c:	1f 93       	push	r17
    778e:	cf 93       	push	r28
    7790:	df 93       	push	r29
    7792:	ec 01       	movw	r28, r24
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
    7794:	0c 81       	ldd	r16, Y+4	; 0x04
    7796:	1d 81       	ldd	r17, Y+5	; 0x05
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
    7798:	68 8d       	ldd	r22, Y+24	; 0x18
    779a:	79 8d       	ldd	r23, Y+25	; 0x19
    779c:	8f ef       	ldi	r24, 0xFF	; 255
    779e:	6f 3f       	cpi	r22, 0xFF	; 255
    77a0:	78 07       	cpc	r23, r24
    77a2:	09 f4       	brne	.+2      	; 0x77a6 <dir_remove+0x20>
    77a4:	b8 01       	movw	r22, r16
    77a6:	ce 01       	movw	r24, r28
    77a8:	0e 94 13 35 	call	0x6a26	; 0x6a26 <dir_sdi>
    77ac:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    77ae:	00 97       	sbiw	r24, 0x00	; 0
    77b0:	39 f5       	brne	.+78     	; 0x7800 <dir_remove+0x7a>
		do {
			res = move_window(dj->fs, dj->sect);
			if (res != FR_OK) break;
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    77b2:	85 ee       	ldi	r24, 0xE5	; 229
    77b4:	e8 2e       	mov	r14, r24
			dj->fs->wflag = 1;
    77b6:	ff 24       	eor	r15, r15
    77b8:	f3 94       	inc	r15

	i = dj->index;	/* SFN index */
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
	if (res == FR_OK) {
		do {
			res = move_window(dj->fs, dj->sect);
    77ba:	4e 85       	ldd	r20, Y+14	; 0x0e
    77bc:	5f 85       	ldd	r21, Y+15	; 0x0f
    77be:	68 89       	ldd	r22, Y+16	; 0x10
    77c0:	79 89       	ldd	r23, Y+17	; 0x11
    77c2:	88 81       	ld	r24, Y
    77c4:	99 81       	ldd	r25, Y+1	; 0x01
    77c6:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    77ca:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    77cc:	00 97       	sbiw	r24, 0x00	; 0
    77ce:	99 f4       	brne	.+38     	; 0x77f6 <dir_remove+0x70>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    77d0:	ea 89       	ldd	r30, Y+18	; 0x12
    77d2:	fb 89       	ldd	r31, Y+19	; 0x13
    77d4:	e0 82       	st	Z, r14
			dj->fs->wflag = 1;
    77d6:	e8 81       	ld	r30, Y
    77d8:	f9 81       	ldd	r31, Y+1	; 0x01
    77da:	f4 82       	std	Z+4, r15	; 0x04
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    77dc:	8c 81       	ldd	r24, Y+4	; 0x04
    77de:	9d 81       	ldd	r25, Y+5	; 0x05
    77e0:	80 17       	cp	r24, r16
    77e2:	91 07       	cpc	r25, r17
    77e4:	68 f4       	brcc	.+26     	; 0x7800 <dir_remove+0x7a>
			res = dir_next(dj, 0);		/* Next entry */
    77e6:	ce 01       	movw	r24, r28
    77e8:	60 e0       	ldi	r22, 0x00	; 0
    77ea:	70 e0       	ldi	r23, 0x00	; 0
    77ec:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <dir_next>
    77f0:	9c 01       	movw	r18, r24
		} while (res == FR_OK);
    77f2:	00 97       	sbiw	r24, 0x00	; 0
    77f4:	11 f3       	breq	.-60     	; 0x77ba <dir_remove+0x34>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
    77f6:	24 30       	cpi	r18, 0x04	; 4
    77f8:	31 05       	cpc	r19, r1
    77fa:	11 f4       	brne	.+4      	; 0x7800 <dir_remove+0x7a>
    77fc:	22 e0       	ldi	r18, 0x02	; 2
    77fe:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
#endif

	return res;
}
    7800:	c9 01       	movw	r24, r18
    7802:	cd b7       	in	r28, 0x3d	; 61
    7804:	de b7       	in	r29, 0x3e	; 62
    7806:	e6 e0       	ldi	r30, 0x06	; 6
    7808:	0c 94 fa 5c 	jmp	0xb9f4	; 0xb9f4 <__epilogue_restores__+0x18>

0000780c <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    780c:	8f 92       	push	r8
    780e:	9f 92       	push	r9
    7810:	af 92       	push	r10
    7812:	bf 92       	push	r11
    7814:	cf 92       	push	r12
    7816:	df 92       	push	r13
    7818:	ff 92       	push	r15
    781a:	0f 93       	push	r16
    781c:	1f 93       	push	r17
    781e:	df 93       	push	r29
    7820:	cf 93       	push	r28
    7822:	0f 92       	push	r0
    7824:	cd b7       	in	r28, 0x3d	; 61
    7826:	de b7       	in	r29, 0x3e	; 62
    7828:	5c 01       	movw	r10, r24
	FRESULT res;
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
    782a:	ff 24       	eor	r15, r15
    782c:	fa 94       	dec	r15
    782e:	2f ef       	ldi	r18, 0xFF	; 255
#endif

	res = FR_NO_FILE;
    7830:	04 e0       	ldi	r16, 0x04	; 4
    7832:	10 e0       	ldi	r17, 0x00	; 0
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    7834:	5d e0       	ldi	r21, 0x0D	; 13
    7836:	c5 2e       	mov	r12, r21
    7838:	d1 2c       	mov	r13, r1
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    783a:	9d c0       	rjmp	.+314    	; 0x7976 <dir_read+0x16a>
		res = move_window(dj->fs, dj->sect);
    783c:	d5 01       	movw	r26, r10
    783e:	8d 91       	ld	r24, X+
    7840:	9c 91       	ld	r25, X
    7842:	29 83       	std	Y+1, r18	; 0x01
    7844:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    7848:	8c 01       	movw	r16, r24
		if (res != FR_OK) break;
    784a:	29 81       	ldd	r18, Y+1	; 0x01
    784c:	00 97       	sbiw	r24, 0x00	; 0
    784e:	09 f0       	breq	.+2      	; 0x7852 <dir_read+0x46>
    7850:	a0 c0       	rjmp	.+320    	; 0x7992 <dir_read+0x186>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    7852:	d5 01       	movw	r26, r10
    7854:	52 96       	adiw	r26, 0x12	; 18
    7856:	ed 91       	ld	r30, X+
    7858:	fc 91       	ld	r31, X
    785a:	53 97       	sbiw	r26, 0x13	; 19
		c = dir[DIR_Name];
    785c:	30 81       	ld	r19, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    785e:	33 23       	and	r19, r19
    7860:	09 f4       	brne	.+2      	; 0x7864 <dir_read+0x58>
    7862:	ae c0       	rjmp	.+348    	; 0x79c0 <dir_read+0x1b4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    7864:	83 85       	ldd	r24, Z+11	; 0x0b
		if (c == 0xE5 || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    7866:	35 3e       	cpi	r19, 0xE5	; 229
    7868:	09 f4       	brne	.+2      	; 0x786c <dir_read+0x60>
    786a:	7a c0       	rjmp	.+244    	; 0x7960 <dir_read+0x154>
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    786c:	8f 73       	andi	r24, 0x3F	; 63
		if (c == 0xE5 || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    786e:	83 ff       	sbrs	r24, 3
    7870:	04 c0       	rjmp	.+8      	; 0x787a <dir_read+0x6e>
    7872:	8f 30       	cpi	r24, 0x0F	; 15
    7874:	09 f0       	breq	.+2      	; 0x7878 <dir_read+0x6c>
    7876:	74 c0       	rjmp	.+232    	; 0x7960 <dir_read+0x154>
    7878:	03 c0       	rjmp	.+6      	; 0x7880 <dir_read+0x74>
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    787a:	8f 30       	cpi	r24, 0x0F	; 15
    787c:	09 f0       	breq	.+2      	; 0x7880 <dir_read+0x74>
    787e:	61 c0       	rjmp	.+194    	; 0x7942 <dir_read+0x136>
				if (c & 0x40) {			/* Is it start of LFN sequence? */
    7880:	36 ff       	sbrs	r19, 6
    7882:	0d c0       	rjmp	.+26     	; 0x789e <dir_read+0x92>
					sum = dir[LDIR_Chksum];
    7884:	f5 84       	ldd	r15, Z+13	; 0x0d
					c &= 0xBF; ord = c;
					dj->lfn_idx = dj->index;
    7886:	d5 01       	movw	r26, r10
    7888:	14 96       	adiw	r26, 0x04	; 4
    788a:	8d 91       	ld	r24, X+
    788c:	9c 91       	ld	r25, X
    788e:	15 97       	sbiw	r26, 0x05	; 5
    7890:	59 96       	adiw	r26, 0x19	; 25
    7892:	9c 93       	st	X, r25
    7894:	8e 93       	st	-X, r24
    7896:	58 97       	sbiw	r26, 0x18	; 24
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
				if (c & 0x40) {			/* Is it start of LFN sequence? */
					sum = dir[LDIR_Chksum];
					c &= 0xBF; ord = c;
    7898:	23 2f       	mov	r18, r19
    789a:	2f 7b       	andi	r18, 0xBF	; 191
    789c:	03 c0       	rjmp	.+6      	; 0x78a4 <dir_read+0x98>
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    789e:	32 17       	cp	r19, r18
    78a0:	09 f0       	breq	.+2      	; 0x78a4 <dir_read+0x98>
    78a2:	5e c0       	rjmp	.+188    	; 0x7960 <dir_read+0x154>
    78a4:	85 85       	ldd	r24, Z+13	; 0x0d
    78a6:	f8 16       	cp	r15, r24
    78a8:	09 f0       	breq	.+2      	; 0x78ac <dir_read+0xa0>
    78aa:	5a c0       	rjmp	.+180    	; 0x7960 <dir_read+0x154>
    78ac:	d5 01       	movw	r26, r10
    78ae:	56 96       	adiw	r26, 0x16	; 22
    78b0:	0d 91       	ld	r16, X+
    78b2:	1c 91       	ld	r17, X
    78b4:	57 97       	sbiw	r26, 0x17	; 23
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    78b6:	40 81       	ld	r20, Z
    78b8:	50 e0       	ldi	r21, 0x00	; 0
    78ba:	4f 73       	andi	r20, 0x3F	; 63
    78bc:	50 70       	andi	r21, 0x00	; 0
    78be:	41 50       	subi	r20, 0x01	; 1
    78c0:	50 40       	sbci	r21, 0x00	; 0
    78c2:	4c 9d       	mul	r20, r12
    78c4:	c0 01       	movw	r24, r0
    78c6:	4d 9d       	mul	r20, r13
    78c8:	90 0d       	add	r25, r0
    78ca:	5c 9d       	mul	r21, r12
    78cc:	90 0d       	add	r25, r0
    78ce:	11 24       	eor	r1, r1
    78d0:	44 e7       	ldi	r20, 0x74	; 116
    78d2:	84 2e       	mov	r8, r20
    78d4:	41 e0       	ldi	r20, 0x01	; 1
    78d6:	94 2e       	mov	r9, r20

	s = 0; wc = 1;
    78d8:	61 e0       	ldi	r22, 0x01	; 1
    78da:	70 e0       	ldi	r23, 0x00	; 0
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    78dc:	d4 01       	movw	r26, r8
    78de:	3d 91       	ld	r19, X+
    78e0:	4d 01       	movw	r8, r26
    78e2:	af 01       	movw	r20, r30
    78e4:	43 0f       	add	r20, r19
    78e6:	51 1d       	adc	r21, r1
    78e8:	da 01       	movw	r26, r20
    78ea:	4d 91       	ld	r20, X+
    78ec:	5c 91       	ld	r21, X
    78ee:	11 97       	sbiw	r26, 0x01	; 1
		if (wc) {	/* Last char has not been processed */
    78f0:	61 15       	cp	r22, r1
    78f2:	71 05       	cpc	r23, r1
    78f4:	79 f0       	breq	.+30     	; 0x7914 <dir_read+0x108>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    78f6:	80 38       	cpi	r24, 0x80	; 128
    78f8:	91 05       	cpc	r25, r1
    78fa:	90 f5       	brcc	.+100    	; 0x7960 <dir_read+0x154>
			lfnbuf[i++] = wc = uc;			/* Store it */
    78fc:	bc 01       	movw	r22, r24
    78fe:	66 0f       	add	r22, r22
    7900:	77 1f       	adc	r23, r23
    7902:	60 0f       	add	r22, r16
    7904:	71 1f       	adc	r23, r17
    7906:	db 01       	movw	r26, r22
    7908:	11 96       	adiw	r26, 0x01	; 1
    790a:	5c 93       	st	X, r21
    790c:	4e 93       	st	-X, r20
    790e:	01 96       	adiw	r24, 0x01	; 1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    7910:	ba 01       	movw	r22, r20
    7912:	04 c0       	rjmp	.+8      	; 0x791c <dir_read+0x110>
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
    7914:	bf ef       	ldi	r27, 0xFF	; 255
    7916:	4f 3f       	cpi	r20, 0xFF	; 255
    7918:	5b 07       	cpc	r21, r27
    791a:	11 f5       	brne	.+68     	; 0x7960 <dir_read+0x154>
		}
	} while (++s < 13);						/* Read all character in the entry */
    791c:	31 e8       	ldi	r19, 0x81	; 129
    791e:	83 16       	cp	r8, r19
    7920:	31 e0       	ldi	r19, 0x01	; 1
    7922:	93 06       	cpc	r9, r19
    7924:	d9 f6       	brne	.-74     	; 0x78dc <dir_read+0xd0>

	if (dir[LDIR_Ord] & 0x40) {				/* Put terminator if it is the last LFN part */
    7926:	30 81       	ld	r19, Z
    7928:	36 ff       	sbrs	r19, 6
    792a:	48 c0       	rjmp	.+144    	; 0x79bc <dir_read+0x1b0>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
    792c:	80 38       	cpi	r24, 0x80	; 128
    792e:	91 05       	cpc	r25, r1
    7930:	b8 f4       	brcc	.+46     	; 0x7960 <dir_read+0x154>
		lfnbuf[i] = 0;
    7932:	fc 01       	movw	r30, r24
    7934:	ee 0f       	add	r30, r30
    7936:	ff 1f       	adc	r31, r31
    7938:	e0 0f       	add	r30, r16
    793a:	f1 1f       	adc	r31, r17
    793c:	11 82       	std	Z+1, r1	; 0x01
    793e:	10 82       	st	Z, r1
    7940:	3d c0       	rjmp	.+122    	; 0x79bc <dir_read+0x1b0>
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
    7942:	22 23       	and	r18, r18
    7944:	29 f4       	brne	.+10     	; 0x7950 <dir_read+0x144>
    7946:	cf 01       	movw	r24, r30
    7948:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <sum_sfn>
    794c:	f8 16       	cp	r15, r24
    794e:	41 f1       	breq	.+80     	; 0x79a0 <dir_read+0x194>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
    7950:	8f ef       	ldi	r24, 0xFF	; 255
    7952:	9f ef       	ldi	r25, 0xFF	; 255
    7954:	d5 01       	movw	r26, r10
    7956:	59 96       	adiw	r26, 0x19	; 25
    7958:	9c 93       	st	X, r25
    795a:	8e 93       	st	-X, r24
    795c:	58 97       	sbiw	r26, 0x18	; 24
    795e:	20 c0       	rjmp	.+64     	; 0x79a0 <dir_read+0x194>
					sum = dir[LDIR_Chksum];
					c &= 0xBF; ord = c;
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    7960:	2f ef       	ldi	r18, 0xFF	; 255
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    7962:	c5 01       	movw	r24, r10
    7964:	60 e0       	ldi	r22, 0x00	; 0
    7966:	70 e0       	ldi	r23, 0x00	; 0
    7968:	29 83       	std	Y+1, r18	; 0x01
    796a:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <dir_next>
    796e:	8c 01       	movw	r16, r24
		if (res != FR_OK) break;
    7970:	29 81       	ldd	r18, Y+1	; 0x01
    7972:	00 97       	sbiw	r24, 0x00	; 0
    7974:	71 f4       	brne	.+28     	; 0x7992 <dir_read+0x186>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    7976:	f5 01       	movw	r30, r10
    7978:	46 85       	ldd	r20, Z+14	; 0x0e
    797a:	57 85       	ldd	r21, Z+15	; 0x0f
    797c:	60 89       	ldd	r22, Z+16	; 0x10
    797e:	71 89       	ldd	r23, Z+17	; 0x11
    7980:	41 15       	cp	r20, r1
    7982:	51 05       	cpc	r21, r1
    7984:	61 05       	cpc	r22, r1
    7986:	71 05       	cpc	r23, r1
    7988:	09 f0       	breq	.+2      	; 0x798c <dir_read+0x180>
    798a:	58 cf       	rjmp	.-336    	; 0x783c <dir_read+0x30>
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    798c:	01 15       	cp	r16, r1
    798e:	11 05       	cpc	r17, r1
    7990:	39 f0       	breq	.+14     	; 0x79a0 <dir_read+0x194>
    7992:	d5 01       	movw	r26, r10
    7994:	1e 96       	adiw	r26, 0x0e	; 14
    7996:	1d 92       	st	X+, r1
    7998:	1d 92       	st	X+, r1
    799a:	1d 92       	st	X+, r1
    799c:	1c 92       	st	X, r1
    799e:	51 97       	sbiw	r26, 0x11	; 17

	return res;
}
    79a0:	c8 01       	movw	r24, r16
    79a2:	0f 90       	pop	r0
    79a4:	cf 91       	pop	r28
    79a6:	df 91       	pop	r29
    79a8:	1f 91       	pop	r17
    79aa:	0f 91       	pop	r16
    79ac:	ff 90       	pop	r15
    79ae:	df 90       	pop	r13
    79b0:	cf 90       	pop	r12
    79b2:	bf 90       	pop	r11
    79b4:	af 90       	pop	r10
    79b6:	9f 90       	pop	r9
    79b8:	8f 90       	pop	r8
    79ba:	08 95       	ret
					sum = dir[LDIR_Chksum];
					c &= 0xBF; ord = c;
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    79bc:	21 50       	subi	r18, 0x01	; 1
    79be:	d1 cf       	rjmp	.-94     	; 0x7962 <dir_read+0x156>
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    79c0:	04 e0       	ldi	r16, 0x04	; 4
    79c2:	10 e0       	ldi	r17, 0x00	; 0
    79c4:	e6 cf       	rjmp	.-52     	; 0x7992 <dir_read+0x186>

000079c6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    79c6:	a0 e0       	ldi	r26, 0x00	; 0
    79c8:	b0 e0       	ldi	r27, 0x00	; 0
    79ca:	e9 ee       	ldi	r30, 0xE9	; 233
    79cc:	fc e3       	ldi	r31, 0x3C	; 60
    79ce:	0c 94 d9 5c 	jmp	0xb9b2	; 0xb9b2 <__prologue_saves__+0xe>
    79d2:	ec 01       	movw	r28, r24
    79d4:	7a 01       	movw	r14, r20
    79d6:	8b 01       	movw	r16, r22
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    79d8:	42 30       	cpi	r20, 0x02	; 2
    79da:	51 05       	cpc	r21, r1
    79dc:	61 05       	cpc	r22, r1
    79de:	71 05       	cpc	r23, r1
    79e0:	08 f4       	brcc	.+2      	; 0x79e4 <remove_chain+0x1e>
    79e2:	58 c0       	rjmp	.+176    	; 0x7a94 <remove_chain+0xce>
    79e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    79e6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    79e8:	ac 8d       	ldd	r26, Y+28	; 0x1c
    79ea:	bd 8d       	ldd	r27, Y+29	; 0x1d
    79ec:	48 17       	cp	r20, r24
    79ee:	59 07       	cpc	r21, r25
    79f0:	6a 07       	cpc	r22, r26
    79f2:	7b 07       	cpc	r23, r27
    79f4:	08 f4       	brcc	.+2      	; 0x79f8 <remove_chain+0x32>
    79f6:	3f c0       	rjmp	.+126    	; 0x7a76 <remove_chain+0xb0>
    79f8:	4d c0       	rjmp	.+154    	; 0x7a94 <remove_chain+0xce>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    79fa:	ce 01       	movw	r24, r28
    79fc:	b8 01       	movw	r22, r16
    79fe:	a7 01       	movw	r20, r14
    7a00:	0e 94 52 34 	call	0x68a4	; 0x68a4 <get_fat>
    7a04:	5b 01       	movw	r10, r22
    7a06:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    7a08:	61 15       	cp	r22, r1
    7a0a:	71 05       	cpc	r23, r1
    7a0c:	81 05       	cpc	r24, r1
    7a0e:	91 05       	cpc	r25, r1
    7a10:	f1 f1       	breq	.+124    	; 0x7a8e <remove_chain+0xc8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7a12:	81 e0       	ldi	r24, 0x01	; 1
    7a14:	a8 16       	cp	r10, r24
    7a16:	b1 04       	cpc	r11, r1
    7a18:	c1 04       	cpc	r12, r1
    7a1a:	d1 04       	cpc	r13, r1
    7a1c:	d9 f1       	breq	.+118    	; 0x7a94 <remove_chain+0xce>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7a1e:	2f ef       	ldi	r18, 0xFF	; 255
    7a20:	a2 16       	cp	r10, r18
    7a22:	2f ef       	ldi	r18, 0xFF	; 255
    7a24:	b2 06       	cpc	r11, r18
    7a26:	2f ef       	ldi	r18, 0xFF	; 255
    7a28:	c2 06       	cpc	r12, r18
    7a2a:	2f ef       	ldi	r18, 0xFF	; 255
    7a2c:	d2 06       	cpc	r13, r18
    7a2e:	a9 f1       	breq	.+106    	; 0x7a9a <remove_chain+0xd4>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    7a30:	ce 01       	movw	r24, r28
    7a32:	b8 01       	movw	r22, r16
    7a34:	a7 01       	movw	r20, r14
    7a36:	00 e0       	ldi	r16, 0x00	; 0
    7a38:	10 e0       	ldi	r17, 0x00	; 0
    7a3a:	20 e0       	ldi	r18, 0x00	; 0
    7a3c:	30 e0       	ldi	r19, 0x00	; 0
    7a3e:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <put_fat>
    7a42:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    7a44:	00 97       	sbiw	r24, 0x00	; 0
    7a46:	59 f5       	brne	.+86     	; 0x7a9e <remove_chain+0xd8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    7a48:	8e 85       	ldd	r24, Y+14	; 0x0e
    7a4a:	9f 85       	ldd	r25, Y+15	; 0x0f
    7a4c:	a8 89       	ldd	r26, Y+16	; 0x10
    7a4e:	b9 89       	ldd	r27, Y+17	; 0x11
    7a50:	8f 3f       	cpi	r24, 0xFF	; 255
    7a52:	2f ef       	ldi	r18, 0xFF	; 255
    7a54:	92 07       	cpc	r25, r18
    7a56:	2f ef       	ldi	r18, 0xFF	; 255
    7a58:	a2 07       	cpc	r26, r18
    7a5a:	2f ef       	ldi	r18, 0xFF	; 255
    7a5c:	b2 07       	cpc	r27, r18
    7a5e:	41 f0       	breq	.+16     	; 0x7a70 <remove_chain+0xaa>
				fs->free_clust++;
    7a60:	01 96       	adiw	r24, 0x01	; 1
    7a62:	a1 1d       	adc	r26, r1
    7a64:	b1 1d       	adc	r27, r1
    7a66:	8e 87       	std	Y+14, r24	; 0x0e
    7a68:	9f 87       	std	Y+15, r25	; 0x0f
    7a6a:	a8 8b       	std	Y+16, r26	; 0x10
    7a6c:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    7a6e:	9d 82       	std	Y+5, r9	; 0x05
    7a70:	86 01       	movw	r16, r12
    7a72:	75 01       	movw	r14, r10
    7a74:	02 c0       	rjmp	.+4      	; 0x7a7a <remove_chain+0xb4>
    7a76:	99 24       	eor	r9, r9
    7a78:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7a7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7a7c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7a7e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    7a80:	bd 8d       	ldd	r27, Y+29	; 0x1d
    7a82:	e8 16       	cp	r14, r24
    7a84:	f9 06       	cpc	r15, r25
    7a86:	0a 07       	cpc	r16, r26
    7a88:	1b 07       	cpc	r17, r27
    7a8a:	08 f4       	brcc	.+2      	; 0x7a8e <remove_chain+0xc8>
    7a8c:	b6 cf       	rjmp	.-148    	; 0x79fa <remove_chain+0x34>
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
    7a8e:	20 e0       	ldi	r18, 0x00	; 0
    7a90:	30 e0       	ldi	r19, 0x00	; 0
    7a92:	05 c0       	rjmp	.+10     	; 0x7a9e <remove_chain+0xd8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7a94:	22 e0       	ldi	r18, 0x02	; 2
    7a96:	30 e0       	ldi	r19, 0x00	; 0
    7a98:	02 c0       	rjmp	.+4      	; 0x7a9e <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7a9a:	21 e0       	ldi	r18, 0x01	; 1
    7a9c:	30 e0       	ldi	r19, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    7a9e:	c9 01       	movw	r24, r18
    7aa0:	cd b7       	in	r28, 0x3d	; 61
    7aa2:	de b7       	in	r29, 0x3e	; 62
    7aa4:	eb e0       	ldi	r30, 0x0B	; 11
    7aa6:	0c 94 f5 5c 	jmp	0xb9ea	; 0xb9ea <__epilogue_restores__+0xe>

00007aaa <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
    7aaa:	a8 e0       	ldi	r26, 0x08	; 8
    7aac:	b0 e0       	ldi	r27, 0x00	; 0
    7aae:	eb e5       	ldi	r30, 0x5B	; 91
    7ab0:	fd e3       	ldi	r31, 0x3D	; 61
    7ab2:	0c 94 da 5c 	jmp	0xb9b4	; 0xb9b4 <__prologue_saves__+0x10>
    7ab6:	7c 01       	movw	r14, r24
    7ab8:	6a 01       	movw	r12, r20
    7aba:	89 01       	movw	r16, r18
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
    7abc:	4b e0       	ldi	r20, 0x0B	; 11
    7abe:	50 e0       	ldi	r21, 0x00	; 0
    7ac0:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    7ac4:	06 30       	cpi	r16, 0x06	; 6
    7ac6:	11 05       	cpc	r17, r1
    7ac8:	c8 f0       	brcs	.+50     	; 0x7afc <gen_numname+0x52>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    7aca:	90 2f       	mov	r25, r16
    7acc:	97 95       	ror	r25
    7ace:	99 27       	eor	r25, r25
    7ad0:	97 95       	ror	r25
    7ad2:	81 2f       	mov	r24, r17
    7ad4:	86 95       	lsr	r24
    7ad6:	b9 2e       	mov	r11, r25
    7ad8:	b8 2a       	or	r11, r24
    7ada:	81 2f       	mov	r24, r17
    7adc:	87 95       	ror	r24
    7ade:	88 27       	eor	r24, r24
    7ae0:	87 95       	ror	r24
    7ae2:	06 95       	lsr	r16
    7ae4:	a8 2e       	mov	r10, r24
    7ae6:	a0 2a       	or	r10, r16
    7ae8:	f6 01       	movw	r30, r12
    7aea:	01 91       	ld	r16, Z+
    7aec:	11 91       	ld	r17, Z+
    7aee:	6f 01       	movw	r12, r30
    7af0:	0a 0d       	add	r16, r10
    7af2:	1b 1d       	adc	r17, r11
    7af4:	80 81       	ld	r24, Z
    7af6:	91 81       	ldd	r25, Z+1	; 0x01
    7af8:	00 97       	sbiw	r24, 0x00	; 0
    7afa:	39 f7       	brne	.-50     	; 0x7aca <gen_numname+0x20>
    7afc:	fe 01       	movw	r30, r28
    7afe:	39 96       	adiw	r30, 0x09	; 9
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
    7b00:	27 e0       	ldi	r18, 0x07	; 7
    7b02:	30 e0       	ldi	r19, 0x00	; 0
	}

	/* itoa */
	i = 7;
	do {
		c = (seq % 16) + '0';
    7b04:	90 2f       	mov	r25, r16
    7b06:	9f 70       	andi	r25, 0x0F	; 15
    7b08:	89 2f       	mov	r24, r25
    7b0a:	80 5d       	subi	r24, 0xD0	; 208
		if (c > '9') c += 7;
    7b0c:	8a 33       	cpi	r24, 0x3A	; 58
    7b0e:	08 f0       	brcs	.+2      	; 0x7b12 <gen_numname+0x68>
    7b10:	89 5f       	subi	r24, 0xF9	; 249
		ns[i--] = c;
    7b12:	82 93       	st	-Z, r24
    7b14:	21 50       	subi	r18, 0x01	; 1
    7b16:	30 40       	sbci	r19, 0x00	; 0
		seq /= 16;
    7b18:	64 e0       	ldi	r22, 0x04	; 4
    7b1a:	16 95       	lsr	r17
    7b1c:	07 95       	ror	r16
    7b1e:	6a 95       	dec	r22
    7b20:	e1 f7       	brne	.-8      	; 0x7b1a <gen_numname+0x70>
	} while (seq);
    7b22:	01 15       	cp	r16, r1
    7b24:	11 05       	cpc	r17, r1
    7b26:	71 f7       	brne	.-36     	; 0x7b04 <gen_numname+0x5a>
	ns[i] = '~';
    7b28:	fe 01       	movw	r30, r28
    7b2a:	e2 0f       	add	r30, r18
    7b2c:	f3 1f       	adc	r31, r19
    7b2e:	8e e7       	ldi	r24, 0x7E	; 126
    7b30:	81 83       	std	Z+1, r24	; 0x01

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
    7b32:	80 e0       	ldi	r24, 0x00	; 0
    7b34:	90 e0       	ldi	r25, 0x00	; 0
		if (IsDBCS1(dst[j])) {
			if (j == i - 1) break;
    7b36:	a9 01       	movw	r20, r18
    7b38:	41 50       	subi	r20, 0x01	; 1
    7b3a:	50 40       	sbci	r21, 0x00	; 0
		seq /= 16;
	} while (seq);
	ns[i] = '~';

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
    7b3c:	13 c0       	rjmp	.+38     	; 0x7b64 <gen_numname+0xba>
		if (IsDBCS1(dst[j])) {
    7b3e:	76 2f       	mov	r23, r22
    7b40:	71 58       	subi	r23, 0x81	; 129
    7b42:	7f 31       	cpi	r23, 0x1F	; 31
    7b44:	18 f0       	brcs	.+6      	; 0x7b4c <gen_numname+0xa2>
    7b46:	60 5e       	subi	r22, 0xE0	; 224
    7b48:	6d 31       	cpi	r22, 0x1D	; 29
    7b4a:	58 f4       	brcc	.+22     	; 0x7b62 <gen_numname+0xb8>
			if (j == i - 1) break;
    7b4c:	84 17       	cp	r24, r20
    7b4e:	95 07       	cpc	r25, r21
    7b50:	39 f4       	brne	.+14     	; 0x7b60 <gen_numname+0xb6>

/*-----------------------------------------------------------------------*/
/* Create numbered name                                                  */
/*-----------------------------------------------------------------------*/
#if _USE_LFN
void gen_numname (
    7b52:	f7 01       	movw	r30, r14
    7b54:	e8 0f       	add	r30, r24
    7b56:	f9 1f       	adc	r31, r25
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    7b58:	ae 01       	movw	r20, r28
    7b5a:	4f 5f       	subi	r20, 0xFF	; 255
    7b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    7b5e:	0c c0       	rjmp	.+24     	; 0x7b78 <gen_numname+0xce>

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
		if (IsDBCS1(dst[j])) {
			if (j == i - 1) break;
			j++;
    7b60:	01 96       	adiw	r24, 0x01	; 1
		seq /= 16;
	} while (seq);
	ns[i] = '~';

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
    7b62:	01 96       	adiw	r24, 0x01	; 1
    7b64:	82 17       	cp	r24, r18
    7b66:	93 07       	cpc	r25, r19
    7b68:	a0 f7       	brcc	.-24     	; 0x7b52 <gen_numname+0xa8>
    7b6a:	f7 01       	movw	r30, r14
    7b6c:	e8 0f       	add	r30, r24
    7b6e:	f9 1f       	adc	r31, r25
    7b70:	60 81       	ld	r22, Z
    7b72:	60 32       	cpi	r22, 0x20	; 32
    7b74:	21 f7       	brne	.-56     	; 0x7b3e <gen_numname+0x94>
    7b76:	ed cf       	rjmp	.-38     	; 0x7b52 <gen_numname+0xa8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    7b78:	28 30       	cpi	r18, 0x08	; 8
    7b7a:	31 05       	cpc	r19, r1
    7b7c:	38 f4       	brcc	.+14     	; 0x7b8c <gen_numname+0xe2>
    7b7e:	da 01       	movw	r26, r20
    7b80:	a2 0f       	add	r26, r18
    7b82:	b3 1f       	adc	r27, r19
    7b84:	6c 91       	ld	r22, X
    7b86:	2f 5f       	subi	r18, 0xFF	; 255
    7b88:	3f 4f       	sbci	r19, 0xFF	; 255
    7b8a:	01 c0       	rjmp	.+2      	; 0x7b8e <gen_numname+0xe4>
    7b8c:	60 e2       	ldi	r22, 0x20	; 32
    7b8e:	61 93       	st	Z+, r22
    7b90:	01 96       	adiw	r24, 0x01	; 1
	} while (j < 8);
    7b92:	88 30       	cpi	r24, 0x08	; 8
    7b94:	91 05       	cpc	r25, r1
    7b96:	80 f3       	brcs	.-32     	; 0x7b78 <gen_numname+0xce>
}
    7b98:	28 96       	adiw	r28, 0x08	; 8
    7b9a:	ea e0       	ldi	r30, 0x0A	; 10
    7b9c:	0c 94 f6 5c 	jmp	0xb9ec	; 0xb9ec <__epilogue_restores__+0x10>

00007ba0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    7ba0:	ac e0       	ldi	r26, 0x0C	; 12
    7ba2:	b0 e0       	ldi	r27, 0x00	; 0
    7ba4:	e6 ed       	ldi	r30, 0xD6	; 214
    7ba6:	fd e3       	ldi	r31, 0x3D	; 61
    7ba8:	0c 94 d4 5c 	jmp	0xb9a8	; 0xb9a8 <__prologue_saves__+0x4>
    7bac:	8c 01       	movw	r16, r24
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
    7bae:	dc 01       	movw	r26, r24
    7bb0:	54 96       	adiw	r26, 0x14	; 20
    7bb2:	ad 90       	ld	r10, X+
    7bb4:	bc 90       	ld	r11, X
    7bb6:	55 97       	sbiw	r26, 0x15	; 21
    7bb8:	56 96       	adiw	r26, 0x16	; 22
    7bba:	9c 90       	ld	r9, X
    7bbc:	56 97       	sbiw	r26, 0x16	; 22
    7bbe:	57 96       	adiw	r26, 0x17	; 23
    7bc0:	8c 90       	ld	r8, X
	mem_cpy(sn, fn, 12);
    7bc2:	7e 01       	movw	r14, r28
    7bc4:	08 94       	sec
    7bc6:	e1 1c       	adc	r14, r1
    7bc8:	f1 1c       	adc	r15, r1
    7bca:	c7 01       	movw	r24, r14
    7bcc:	b5 01       	movw	r22, r10
    7bce:	4c e0       	ldi	r20, 0x0C	; 12
    7bd0:	50 e0       	ldi	r21, 0x00	; 0
    7bd2:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <mem_cpy>

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
    7bd6:	8c 85       	ldd	r24, Y+12	; 0x0c
    7bd8:	85 fd       	sbrc	r24, 5
    7bda:	39 c1       	rjmp	.+626    	; 0x7e4e <dir_register+0x2ae>
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    7bdc:	80 ff       	sbrs	r24, 0
    7bde:	31 c0       	rjmp	.+98     	; 0x7c42 <dir_register+0xa2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    7be0:	f5 01       	movw	r30, r10
    7be2:	13 86       	std	Z+11, r1	; 0x0b
    7be4:	d8 01       	movw	r26, r16
    7be6:	57 96       	adiw	r26, 0x17	; 23
    7be8:	1c 92       	st	X, r1
    7bea:	1e 92       	st	-X, r1
    7bec:	56 97       	sbiw	r26, 0x16	; 22
		for (n = 1; n < 100; n++) {
    7bee:	81 e0       	ldi	r24, 0x01	; 1
    7bf0:	c8 2e       	mov	r12, r24
    7bf2:	d1 2c       	mov	r13, r1
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
    7bf4:	7e 2c       	mov	r7, r14
    7bf6:	6f 2c       	mov	r6, r15
    7bf8:	c5 01       	movw	r24, r10
    7bfa:	67 2d       	mov	r22, r7
    7bfc:	76 2d       	mov	r23, r6
    7bfe:	49 2d       	mov	r20, r9
    7c00:	58 2d       	mov	r21, r8
    7c02:	96 01       	movw	r18, r12
    7c04:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <gen_numname>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    7c08:	c8 01       	movw	r24, r16
    7c0a:	0e 94 77 38 	call	0x70ee	; 0x70ee <dir_find>
    7c0e:	7c 01       	movw	r14, r24
			if (res != FR_OK) break;
    7c10:	00 97       	sbiw	r24, 0x00	; 0
    7c12:	59 f4       	brne	.+22     	; 0x7c2a <dir_register+0x8a>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
    7c14:	08 94       	sec
    7c16:	c1 1c       	adc	r12, r1
    7c18:	d1 1c       	adc	r13, r1
    7c1a:	b4 e6       	ldi	r27, 0x64	; 100
    7c1c:	cb 16       	cp	r12, r27
    7c1e:	d1 04       	cpc	r13, r1
    7c20:	59 f7       	brne	.-42     	; 0x7bf8 <dir_register+0x58>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    7c22:	b7 e0       	ldi	r27, 0x07	; 7
    7c24:	eb 2e       	mov	r14, r27
    7c26:	f1 2c       	mov	r15, r1
    7c28:	15 c1       	rjmp	.+554    	; 0x7e54 <dir_register+0x2b4>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    7c2a:	84 30       	cpi	r24, 0x04	; 4
    7c2c:	91 05       	cpc	r25, r1
    7c2e:	09 f0       	breq	.+2      	; 0x7c32 <dir_register+0x92>
    7c30:	11 c1       	rjmp	.+546    	; 0x7e54 <dir_register+0x2b4>
		fn[NS] = sn[NS]; dj->lfn = lfn;
    7c32:	8c 85       	ldd	r24, Y+12	; 0x0c
    7c34:	d5 01       	movw	r26, r10
    7c36:	1b 96       	adiw	r26, 0x0b	; 11
    7c38:	8c 93       	st	X, r24
    7c3a:	1b 97       	sbiw	r26, 0x0b	; 11
    7c3c:	f8 01       	movw	r30, r16
    7c3e:	96 8a       	std	Z+22, r9	; 0x16
    7c40:	87 8a       	std	Z+23, r8	; 0x17
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    7c42:	8c 85       	ldd	r24, Y+12	; 0x0c
    7c44:	81 ff       	sbrs	r24, 1
    7c46:	14 c0       	rjmp	.+40     	; 0x7c70 <dir_register+0xd0>
    7c48:	94 01       	movw	r18, r8
    7c4a:	83 2f       	mov	r24, r19
    7c4c:	98 2d       	mov	r25, r8
    7c4e:	fc 01       	movw	r30, r24
    7c50:	80 e0       	ldi	r24, 0x00	; 0
    7c52:	90 e0       	ldi	r25, 0x00	; 0
    7c54:	01 c0       	rjmp	.+2      	; 0x7c58 <dir_register+0xb8>
		for (ne = 0; lfn[ne]; ne++) ;
    7c56:	01 96       	adiw	r24, 0x01	; 1
    7c58:	21 91       	ld	r18, Z+
    7c5a:	31 91       	ld	r19, Z+
    7c5c:	21 15       	cp	r18, r1
    7c5e:	31 05       	cpc	r19, r1
    7c60:	d1 f7       	brne	.-12     	; 0x7c56 <dir_register+0xb6>
		ne = (ne + 25) / 13;
    7c62:	49 96       	adiw	r24, 0x19	; 25
    7c64:	6d e0       	ldi	r22, 0x0D	; 13
    7c66:	70 e0       	ldi	r23, 0x00	; 0
    7c68:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <__udivmodhi4>
    7c6c:	5b 01       	movw	r10, r22
    7c6e:	03 c0       	rjmp	.+6      	; 0x7c76 <dir_register+0xd6>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
    7c70:	a1 e0       	ldi	r26, 0x01	; 1
    7c72:	aa 2e       	mov	r10, r26
    7c74:	b1 2c       	mov	r11, r1
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
    7c76:	c8 01       	movw	r24, r16
    7c78:	60 e0       	ldi	r22, 0x00	; 0
    7c7a:	70 e0       	ldi	r23, 0x00	; 0
    7c7c:	0e 94 13 35 	call	0x6a26	; 0x6a26 <dir_sdi>
    7c80:	7c 01       	movw	r14, r24
	if (res != FR_OK) return res;
    7c82:	00 97       	sbiw	r24, 0x00	; 0
    7c84:	09 f0       	breq	.+2      	; 0x7c88 <dir_register+0xe8>
    7c86:	e6 c0       	rjmp	.+460    	; 0x7e54 <dir_register+0x2b4>
    7c88:	88 24       	eor	r8, r8
    7c8a:	99 24       	eor	r9, r9
    7c8c:	cc 24       	eor	r12, r12
    7c8e:	dd 24       	eor	r13, r13
	n = is = 0;
	do {
		res = move_window(dj->fs, dj->sect);
    7c90:	d8 01       	movw	r26, r16
    7c92:	1e 96       	adiw	r26, 0x0e	; 14
    7c94:	4d 91       	ld	r20, X+
    7c96:	5d 91       	ld	r21, X+
    7c98:	6d 91       	ld	r22, X+
    7c9a:	7c 91       	ld	r23, X
    7c9c:	51 97       	sbiw	r26, 0x11	; 17
    7c9e:	8d 91       	ld	r24, X+
    7ca0:	9c 91       	ld	r25, X
    7ca2:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    7ca6:	7c 01       	movw	r14, r24
		if (res != FR_OK) break;
    7ca8:	00 97       	sbiw	r24, 0x00	; 0
    7caa:	09 f0       	breq	.+2      	; 0x7cae <dir_register+0x10e>
    7cac:	d3 c0       	rjmp	.+422    	; 0x7e54 <dir_register+0x2b4>
		c = *dj->dir;				/* Check the entry status */
    7cae:	d8 01       	movw	r26, r16
    7cb0:	52 96       	adiw	r26, 0x12	; 18
    7cb2:	ed 91       	ld	r30, X+
    7cb4:	fc 91       	ld	r31, X
    7cb6:	53 97       	sbiw	r26, 0x13	; 19
    7cb8:	80 81       	ld	r24, Z
		if (c == 0xE5 || c == 0) {	/* Is it a blank entry? */
    7cba:	85 3e       	cpi	r24, 0xE5	; 229
    7cbc:	11 f0       	breq	.+4      	; 0x7cc2 <dir_register+0x122>
    7cbe:	88 23       	and	r24, r24
    7cc0:	69 f4       	brne	.+26     	; 0x7cdc <dir_register+0x13c>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    7cc2:	c1 14       	cp	r12, r1
    7cc4:	d1 04       	cpc	r13, r1
    7cc6:	19 f4       	brne	.+6      	; 0x7cce <dir_register+0x12e>
    7cc8:	f8 01       	movw	r30, r16
    7cca:	84 80       	ldd	r8, Z+4	; 0x04
    7ccc:	95 80       	ldd	r9, Z+5	; 0x05
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    7cce:	08 94       	sec
    7cd0:	c1 1c       	adc	r12, r1
    7cd2:	d1 1c       	adc	r13, r1
    7cd4:	ca 14       	cp	r12, r10
    7cd6:	db 04       	cpc	r13, r11
    7cd8:	19 f4       	brne	.+6      	; 0x7ce0 <dir_register+0x140>
    7cda:	c1 c0       	rjmp	.+386    	; 0x7e5e <dir_register+0x2be>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
    7cdc:	cc 24       	eor	r12, r12
    7cde:	dd 24       	eor	r13, r13
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    7ce0:	c8 01       	movw	r24, r16
    7ce2:	61 e0       	ldi	r22, 0x01	; 1
    7ce4:	70 e0       	ldi	r23, 0x00	; 0
    7ce6:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <dir_next>
    7cea:	7c 01       	movw	r14, r24
	} while (res == FR_OK);
    7cec:	00 97       	sbiw	r24, 0x00	; 0
    7cee:	81 f2       	breq	.-96     	; 0x7c90 <dir_register+0xf0>
    7cf0:	b1 c0       	rjmp	.+354    	; 0x7e54 <dir_register+0x2b4>

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
		res = dir_sdi(dj, is);
    7cf2:	c8 01       	movw	r24, r16
    7cf4:	b4 01       	movw	r22, r8
    7cf6:	0e 94 13 35 	call	0x6a26	; 0x6a26 <dir_sdi>
    7cfa:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    7cfc:	00 97       	sbiw	r24, 0x00	; 0
    7cfe:	09 f0       	breq	.+2      	; 0x7d02 <dir_register+0x162>
    7d00:	a9 c0       	rjmp	.+338    	; 0x7e54 <dir_register+0x2b4>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    7d02:	d8 01       	movw	r26, r16
    7d04:	54 96       	adiw	r26, 0x14	; 20
    7d06:	8d 91       	ld	r24, X+
    7d08:	9c 91       	ld	r25, X
    7d0a:	55 97       	sbiw	r26, 0x15	; 21
    7d0c:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <sum_sfn>
    7d10:	78 2e       	mov	r7, r24
			ne--;
    7d12:	08 94       	sec
    7d14:	c1 08       	sbc	r12, r1
    7d16:	d1 08       	sbc	r13, r1
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    7d18:	ff e0       	ldi	r31, 0x0F	; 15
    7d1a:	9f 2e       	mov	r9, r31
	dir[LDIR_Type] = 0;
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    7d1c:	ed e0       	ldi	r30, 0x0D	; 13
    7d1e:	ae 2e       	mov	r10, r30
    7d20:	b1 2c       	mov	r11, r1
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
				if (res != FR_OK) break;
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
				dj->fs->wflag = 1;
    7d22:	88 24       	eor	r8, r8
    7d24:	83 94       	inc	r8
		res = dir_sdi(dj, is);
		if (res == FR_OK) {
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
    7d26:	f8 01       	movw	r30, r16
    7d28:	46 85       	ldd	r20, Z+14	; 0x0e
    7d2a:	57 85       	ldd	r21, Z+15	; 0x0f
    7d2c:	60 89       	ldd	r22, Z+16	; 0x10
    7d2e:	71 89       	ldd	r23, Z+17	; 0x11
    7d30:	80 81       	ld	r24, Z
    7d32:	91 81       	ldd	r25, Z+1	; 0x01
    7d34:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    7d38:	7c 01       	movw	r14, r24
				if (res != FR_OK) break;
    7d3a:	00 97       	sbiw	r24, 0x00	; 0
    7d3c:	09 f0       	breq	.+2      	; 0x7d40 <dir_register+0x1a0>
    7d3e:	8a c0       	rjmp	.+276    	; 0x7e54 <dir_register+0x2b4>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    7d40:	d8 01       	movw	r26, r16
    7d42:	56 96       	adiw	r26, 0x16	; 22
    7d44:	4d 91       	ld	r20, X+
    7d46:	5c 91       	ld	r21, X
    7d48:	57 97       	sbiw	r26, 0x17	; 23
    7d4a:	52 96       	adiw	r26, 0x12	; 18
    7d4c:	ed 91       	ld	r30, X+
    7d4e:	fc 91       	ld	r31, X
    7d50:	53 97       	sbiw	r26, 0x13	; 19
    7d52:	ec 2c       	mov	r14, r12
{
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
    7d54:	75 86       	std	Z+13, r7	; 0x0d
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    7d56:	93 86       	std	Z+11, r9	; 0x0b
	dir[LDIR_Type] = 0;
    7d58:	14 86       	std	Z+12, r1	; 0x0c
	ST_WORD(dir+LDIR_FstClusLO, 0);
    7d5a:	13 8e       	std	Z+27, r1	; 0x1b
    7d5c:	12 8e       	std	Z+26, r1	; 0x1a

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    7d5e:	8c 2d       	mov	r24, r12
    7d60:	90 e0       	ldi	r25, 0x00	; 0
    7d62:	01 97       	sbiw	r24, 0x01	; 1
    7d64:	8a 9d       	mul	r24, r10
    7d66:	90 01       	movw	r18, r0
    7d68:	8b 9d       	mul	r24, r11
    7d6a:	30 0d       	add	r19, r0
    7d6c:	9a 9d       	mul	r25, r10
    7d6e:	30 0d       	add	r19, r0
    7d70:	11 24       	eor	r1, r1
    7d72:	74 e7       	ldi	r23, 0x74	; 116
    7d74:	47 2e       	mov	r4, r23
    7d76:	71 e0       	ldi	r23, 0x01	; 1
    7d78:	57 2e       	mov	r5, r23
	s = wc = 0;
    7d7a:	80 e0       	ldi	r24, 0x00	; 0
    7d7c:	90 e0       	ldi	r25, 0x00	; 0
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    7d7e:	bf ef       	ldi	r27, 0xFF	; 255
    7d80:	8f 3f       	cpi	r24, 0xFF	; 255
    7d82:	9b 07       	cpc	r25, r27
    7d84:	51 f0       	breq	.+20     	; 0x7d9a <dir_register+0x1fa>
    7d86:	c9 01       	movw	r24, r18
    7d88:	88 0f       	add	r24, r24
    7d8a:	99 1f       	adc	r25, r25
    7d8c:	84 0f       	add	r24, r20
    7d8e:	95 1f       	adc	r25, r21
    7d90:	dc 01       	movw	r26, r24
    7d92:	8d 91       	ld	r24, X+
    7d94:	9c 91       	ld	r25, X
    7d96:	2f 5f       	subi	r18, 0xFF	; 255
    7d98:	3f 4f       	sbci	r19, 0xFF	; 255
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    7d9a:	d2 01       	movw	r26, r4
    7d9c:	6d 91       	ld	r22, X+
    7d9e:	2d 01       	movw	r4, r26
    7da0:	df 01       	movw	r26, r30
    7da2:	a6 0f       	add	r26, r22
    7da4:	b1 1d       	adc	r27, r1
    7da6:	11 96       	adiw	r26, 0x01	; 1
    7da8:	9c 93       	st	X, r25
    7daa:	8e 93       	st	-X, r24
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    7dac:	00 97       	sbiw	r24, 0x00	; 0
    7dae:	11 f4       	brne	.+4      	; 0x7db4 <dir_register+0x214>
    7db0:	8f ef       	ldi	r24, 0xFF	; 255
    7db2:	9f ef       	ldi	r25, 0xFF	; 255
	} while (++s < 13);
    7db4:	b1 e8       	ldi	r27, 0x81	; 129
    7db6:	4b 16       	cp	r4, r27
    7db8:	b1 e0       	ldi	r27, 0x01	; 1
    7dba:	5b 06       	cpc	r5, r27
    7dbc:	01 f7       	brne	.-64     	; 0x7d7e <dir_register+0x1de>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= 0x40;	/* Bottom LFN part is the start of LFN sequence */
    7dbe:	6f ef       	ldi	r22, 0xFF	; 255
    7dc0:	8f 3f       	cpi	r24, 0xFF	; 255
    7dc2:	96 07       	cpc	r25, r22
    7dc4:	51 f0       	breq	.+20     	; 0x7dda <dir_register+0x23a>
    7dc6:	d9 01       	movw	r26, r18
    7dc8:	aa 0f       	add	r26, r26
    7dca:	bb 1f       	adc	r27, r27
    7dcc:	a4 0f       	add	r26, r20
    7dce:	b5 1f       	adc	r27, r21
    7dd0:	8d 91       	ld	r24, X+
    7dd2:	9c 91       	ld	r25, X
    7dd4:	11 97       	sbiw	r26, 0x01	; 1
    7dd6:	00 97       	sbiw	r24, 0x00	; 0
    7dd8:	11 f4       	brne	.+4      	; 0x7dde <dir_register+0x23e>
    7dda:	80 e4       	ldi	r24, 0x40	; 64
    7ddc:	e8 2a       	or	r14, r24
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    7dde:	e0 82       	st	Z, r14
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
				if (res != FR_OK) break;
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
				dj->fs->wflag = 1;
    7de0:	d8 01       	movw	r26, r16
    7de2:	ed 91       	ld	r30, X+
    7de4:	fc 91       	ld	r31, X
    7de6:	84 82       	std	Z+4, r8	; 0x04
				res = dir_next(dj, 0);	/* Next entry */
    7de8:	c8 01       	movw	r24, r16
    7dea:	60 e0       	ldi	r22, 0x00	; 0
    7dec:	70 e0       	ldi	r23, 0x00	; 0
    7dee:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <dir_next>
    7df2:	7c 01       	movw	r14, r24
			} while (res == FR_OK && --ne);
    7df4:	00 97       	sbiw	r24, 0x00	; 0
    7df6:	71 f5       	brne	.+92     	; 0x7e54 <dir_register+0x2b4>
    7df8:	08 94       	sec
    7dfa:	c1 08       	sbc	r12, r1
    7dfc:	d1 08       	sbc	r13, r1
    7dfe:	c1 14       	cp	r12, r1
    7e00:	d1 04       	cpc	r13, r1
    7e02:	09 f0       	breq	.+2      	; 0x7e06 <dir_register+0x266>
    7e04:	90 cf       	rjmp	.-224    	; 0x7d26 <dir_register+0x186>
    7e06:	30 c0       	rjmp	.+96     	; 0x7e68 <dir_register+0x2c8>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    7e08:	f8 01       	movw	r30, r16
    7e0a:	c2 88       	ldd	r12, Z+18	; 0x12
    7e0c:	d3 88       	ldd	r13, Z+19	; 0x13
			mem_set(dir, 0, 32);		/* Clean the entry */
    7e0e:	c6 01       	movw	r24, r12
    7e10:	60 e0       	ldi	r22, 0x00	; 0
    7e12:	70 e0       	ldi	r23, 0x00	; 0
    7e14:	40 e2       	ldi	r20, 0x20	; 32
    7e16:	50 e0       	ldi	r21, 0x00	; 0
    7e18:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    7e1c:	d8 01       	movw	r26, r16
    7e1e:	54 96       	adiw	r26, 0x14	; 20
    7e20:	6d 91       	ld	r22, X+
    7e22:	7c 91       	ld	r23, X
    7e24:	55 97       	sbiw	r26, 0x15	; 21
    7e26:	c6 01       	movw	r24, r12
    7e28:	4b e0       	ldi	r20, 0x0B	; 11
    7e2a:	50 e0       	ldi	r21, 0x00	; 0
    7e2c:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    7e30:	d8 01       	movw	r26, r16
    7e32:	54 96       	adiw	r26, 0x14	; 20
    7e34:	ed 91       	ld	r30, X+
    7e36:	fc 91       	ld	r31, X
    7e38:	55 97       	sbiw	r26, 0x15	; 21
    7e3a:	83 85       	ldd	r24, Z+11	; 0x0b
    7e3c:	88 71       	andi	r24, 0x18	; 24
    7e3e:	f6 01       	movw	r30, r12
    7e40:	84 87       	std	Z+12, r24	; 0x0c
#endif
			dj->fs->wflag = 1;
    7e42:	ed 91       	ld	r30, X+
    7e44:	fc 91       	ld	r31, X
    7e46:	11 97       	sbiw	r26, 0x01	; 1
    7e48:	81 e0       	ldi	r24, 0x01	; 1
    7e4a:	84 83       	std	Z+4, r24	; 0x04
    7e4c:	03 c0       	rjmp	.+6      	; 0x7e54 <dir_register+0x2b4>

	fn = dj->fn; lfn = dj->lfn;
	mem_cpy(sn, fn, 12);

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;
    7e4e:	76 e0       	ldi	r23, 0x06	; 6
    7e50:	e7 2e       	mov	r14, r23
    7e52:	f1 2c       	mov	r15, r1
			dj->fs->wflag = 1;
		}
	}

	return res;
}
    7e54:	c7 01       	movw	r24, r14
    7e56:	2c 96       	adiw	r28, 0x0c	; 12
    7e58:	e0 e1       	ldi	r30, 0x10	; 16
    7e5a:	0c 94 f0 5c 	jmp	0xb9e0	; 0xb9e0 <__epilogue_restores__+0x4>
			n = 0;					/* Not a blank entry. Restart to search */
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
	} while (res == FR_OK);

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    7e5e:	f2 e0       	ldi	r31, 0x02	; 2
    7e60:	cf 16       	cp	r12, r31
    7e62:	d1 04       	cpc	r13, r1
    7e64:	08 f0       	brcs	.+2      	; 0x7e68 <dir_register+0x2c8>
    7e66:	45 cf       	rjmp	.-374    	; 0x7cf2 <dir_register+0x152>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    7e68:	d8 01       	movw	r26, r16
    7e6a:	1e 96       	adiw	r26, 0x0e	; 14
    7e6c:	4d 91       	ld	r20, X+
    7e6e:	5d 91       	ld	r21, X+
    7e70:	6d 91       	ld	r22, X+
    7e72:	7c 91       	ld	r23, X
    7e74:	51 97       	sbiw	r26, 0x11	; 17
    7e76:	8d 91       	ld	r24, X+
    7e78:	9c 91       	ld	r25, X
    7e7a:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    7e7e:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    7e80:	00 97       	sbiw	r24, 0x00	; 0
    7e82:	41 f7       	brne	.-48     	; 0x7e54 <dir_register+0x2b4>
    7e84:	c1 cf       	rjmp	.-126    	; 0x7e08 <dir_register+0x268>

00007e86 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
    7e86:	82 30       	cpi	r24, 0x02	; 2
    7e88:	d8 f4       	brcc	.+54     	; 0x7ec0 <f_mount+0x3a>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    7e8a:	e8 2f       	mov	r30, r24
    7e8c:	f0 e0       	ldi	r31, 0x00	; 0
    7e8e:	df 01       	movw	r26, r30
    7e90:	aa 0f       	add	r26, r26
    7e92:	bb 1f       	adc	r27, r27
    7e94:	a6 57       	subi	r26, 0x76	; 118
    7e96:	be 4f       	sbci	r27, 0xFE	; 254
    7e98:	0d 90       	ld	r0, X+
    7e9a:	bc 91       	ld	r27, X
    7e9c:	a0 2d       	mov	r26, r0

	if (rfs) {
    7e9e:	10 97       	sbiw	r26, 0x00	; 0
    7ea0:	09 f0       	breq	.+2      	; 0x7ea4 <f_mount+0x1e>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    7ea2:	1c 92       	st	X, r1
	}

	if (fs) {
    7ea4:	61 15       	cp	r22, r1
    7ea6:	71 05       	cpc	r23, r1
    7ea8:	11 f0       	breq	.+4      	; 0x7eae <f_mount+0x28>
		fs->fs_type = 0;			/* Clear new fs object */
    7eaa:	db 01       	movw	r26, r22
    7eac:	1c 92       	st	X, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    7eae:	ee 0f       	add	r30, r30
    7eb0:	ff 1f       	adc	r31, r31
    7eb2:	e6 57       	subi	r30, 0x76	; 118
    7eb4:	fe 4f       	sbci	r31, 0xFE	; 254
    7eb6:	71 83       	std	Z+1, r23	; 0x01
    7eb8:	60 83       	st	Z, r22

	return FR_OK;
    7eba:	20 e0       	ldi	r18, 0x00	; 0
    7ebc:	30 e0       	ldi	r19, 0x00	; 0
    7ebe:	02 c0       	rjmp	.+4      	; 0x7ec4 <f_mount+0x3e>
{
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    7ec0:	2b e0       	ldi	r18, 0x0B	; 11
    7ec2:	30 e0       	ldi	r19, 0x00	; 0
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */

	return FR_OK;
}
    7ec4:	c9 01       	movw	r24, r18
    7ec6:	08 95       	ret

00007ec8 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    7ec8:	4f 92       	push	r4
    7eca:	5f 92       	push	r5
    7ecc:	6f 92       	push	r6
    7ece:	7f 92       	push	r7
    7ed0:	8f 92       	push	r8
    7ed2:	9f 92       	push	r9
    7ed4:	af 92       	push	r10
    7ed6:	bf 92       	push	r11
    7ed8:	df 92       	push	r13
    7eda:	ef 92       	push	r14
    7edc:	ff 92       	push	r15
    7ede:	0f 93       	push	r16
    7ee0:	1f 93       	push	r17
    7ee2:	df 93       	push	r29
    7ee4:	cf 93       	push	r28
    7ee6:	cd b7       	in	r28, 0x3d	; 61
    7ee8:	de b7       	in	r29, 0x3e	; 62
    7eea:	a8 97       	sbiw	r28, 0x28	; 40
    7eec:	0f b6       	in	r0, 0x3f	; 63
    7eee:	f8 94       	cli
    7ef0:	de bf       	out	0x3e, r29	; 62
    7ef2:	0f be       	out	0x3f, r0	; 63
    7ef4:	cd bf       	out	0x3d, r28	; 61
    7ef6:	7c 01       	movw	r14, r24
    7ef8:	78 a7       	std	Y+40, r23	; 0x28
    7efa:	6f a3       	std	Y+39, r22	; 0x27
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    7efc:	dc 01       	movw	r26, r24
    7efe:	1d 92       	st	X+, r1
    7f00:	1c 92       	st	X, r1

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    7f02:	5f e1       	ldi	r21, 0x1F	; 31
    7f04:	d5 2e       	mov	r13, r21
    7f06:	d4 22       	and	r13, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    7f08:	8e 01       	movw	r16, r28
    7f0a:	03 5f       	subi	r16, 0xF3	; 243
    7f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    7f0e:	4e 71       	andi	r20, 0x1E	; 30
    7f10:	ce 01       	movw	r24, r28
    7f12:	87 96       	adiw	r24, 0x27	; 39
    7f14:	b8 01       	movw	r22, r16
    7f16:	0e 94 04 30 	call	0x6008	; 0x6008 <chk_mounted>
    7f1a:	9c 01       	movw	r18, r24
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    7f1c:	ce 01       	movw	r24, r28
    7f1e:	01 96       	adiw	r24, 0x01	; 1
    7f20:	9a a3       	std	Y+34, r25	; 0x22
    7f22:	89 a3       	std	Y+33, r24	; 0x21
    7f24:	8e e8       	ldi	r24, 0x8E	; 142
    7f26:	91 e0       	ldi	r25, 0x01	; 1
    7f28:	9c a3       	std	Y+36, r25	; 0x24
    7f2a:	8b a3       	std	Y+35, r24	; 0x23
	if (res == FR_OK)
    7f2c:	21 15       	cp	r18, r1
    7f2e:	31 05       	cpc	r19, r1
    7f30:	31 f4       	brne	.+12     	; 0x7f3e <f_open+0x76>
		res = follow_path(&dj, path);	/* Follow the file path */
    7f32:	6f a1       	ldd	r22, Y+39	; 0x27
    7f34:	78 a5       	ldd	r23, Y+40	; 0x28
    7f36:	c8 01       	movw	r24, r16
    7f38:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <follow_path>
    7f3c:	9c 01       	movw	r18, r24
	dir = dj.dir;
    7f3e:	0f 8d       	ldd	r16, Y+31	; 0x1f
    7f40:	18 a1       	ldd	r17, Y+32	; 0x20

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    7f42:	21 15       	cp	r18, r1
    7f44:	31 05       	cpc	r19, r1
    7f46:	29 f4       	brne	.+10     	; 0x7f52 <f_open+0x8a>
		if (!dir)	/* Current dir itself */
    7f48:	01 15       	cp	r16, r1
    7f4a:	11 05       	cpc	r17, r1
    7f4c:	11 f4       	brne	.+4      	; 0x7f52 <f_open+0x8a>
			res = FR_INVALID_NAME;
    7f4e:	26 e0       	ldi	r18, 0x06	; 6
    7f50:	30 e0       	ldi	r19, 0x00	; 0
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    7f52:	8d 2d       	mov	r24, r13
    7f54:	90 e0       	ldi	r25, 0x00	; 0
    7f56:	ac 01       	movw	r20, r24
    7f58:	4c 71       	andi	r20, 0x1C	; 28
    7f5a:	50 70       	andi	r21, 0x00	; 0
    7f5c:	41 15       	cp	r20, r1
    7f5e:	51 05       	cpc	r21, r1
    7f60:	09 f4       	brne	.+2      	; 0x7f64 <f_open+0x9c>
    7f62:	6e c0       	rjmp	.+220    	; 0x8040 <f_open+0x178>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    7f64:	21 15       	cp	r18, r1
    7f66:	31 05       	cpc	r19, r1
    7f68:	89 f0       	breq	.+34     	; 0x7f8c <f_open+0xc4>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    7f6a:	24 30       	cpi	r18, 0x04	; 4
    7f6c:	31 05       	cpc	r19, r1
    7f6e:	29 f4       	brne	.+10     	; 0x7f7a <f_open+0xb2>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    7f70:	ce 01       	movw	r24, r28
    7f72:	0d 96       	adiw	r24, 0x0d	; 13
    7f74:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <dir_register>
    7f78:	9c 01       	movw	r18, r24
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
    7f7a:	0f 8d       	ldd	r16, Y+31	; 0x1f
    7f7c:	18 a1       	ldd	r17, Y+32	; 0x20
			} else {
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    7f7e:	21 15       	cp	r18, r1
    7f80:	31 05       	cpc	r19, r1
    7f82:	09 f0       	breq	.+2      	; 0x7f86 <f_open+0xbe>
    7f84:	b8 c0       	rjmp	.+368    	; 0x80f6 <f_open+0x22e>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    7f86:	b8 e0       	ldi	r27, 0x08	; 8
    7f88:	db 2a       	or	r13, r27
    7f8a:	07 c0       	rjmp	.+14     	; 0x7f9a <f_open+0xd2>
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (mode & FA_CREATE_NEW) {		/* Cannot create new */
    7f8c:	d2 fc       	sbrc	r13, 2
    7f8e:	ca c0       	rjmp	.+404    	; 0x8124 <f_open+0x25c>
				res = FR_EXIST;
			} else {
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
    7f90:	f8 01       	movw	r30, r16
    7f92:	83 85       	ldd	r24, Z+11	; 0x0b
    7f94:	81 71       	andi	r24, 0x11	; 17
    7f96:	09 f0       	breq	.+2      	; 0x7f9a <f_open+0xd2>
    7f98:	cb c0       	rjmp	.+406    	; 0x8130 <f_open+0x268>
					res = FR_DENIED;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    7f9a:	d3 fe       	sbrs	r13, 3
    7f9c:	5f c0       	rjmp	.+190    	; 0x805c <f_open+0x194>
			dw = get_fattime();					/* Created time */
    7f9e:	0e 94 61 23 	call	0x46c2	; 0x46c2 <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, dw);
    7fa2:	d8 01       	movw	r26, r16
    7fa4:	1e 96       	adiw	r26, 0x0e	; 14
    7fa6:	6d 93       	st	X+, r22
    7fa8:	7d 93       	st	X+, r23
    7faa:	8d 93       	st	X+, r24
    7fac:	9c 93       	st	X, r25
    7fae:	51 97       	sbiw	r26, 0x11	; 17
			dir[DIR_Attr] = 0;					/* Reset attribute */
    7fb0:	1b 96       	adiw	r26, 0x0b	; 11
    7fb2:	1c 92       	st	X, r1
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    7fb4:	f8 01       	movw	r30, r16
    7fb6:	14 8e       	std	Z+28, r1	; 0x1c
    7fb8:	15 8e       	std	Z+29, r1	; 0x1d
    7fba:	16 8e       	std	Z+30, r1	; 0x1e
    7fbc:	17 8e       	std	Z+31, r1	; 0x1f
			cl = LD_CLUST(dir);					/* Get start cluster */
    7fbe:	84 88       	ldd	r8, Z+20	; 0x14
    7fc0:	95 88       	ldd	r9, Z+21	; 0x15
    7fc2:	aa 24       	eor	r10, r10
    7fc4:	bb 24       	eor	r11, r11
    7fc6:	54 01       	movw	r10, r8
    7fc8:	99 24       	eor	r9, r9
    7fca:	88 24       	eor	r8, r8
    7fcc:	82 8d       	ldd	r24, Z+26	; 0x1a
    7fce:	93 8d       	ldd	r25, Z+27	; 0x1b
    7fd0:	a0 e0       	ldi	r26, 0x00	; 0
    7fd2:	b0 e0       	ldi	r27, 0x00	; 0
    7fd4:	88 2a       	or	r8, r24
    7fd6:	99 2a       	or	r9, r25
    7fd8:	aa 2a       	or	r10, r26
    7fda:	bb 2a       	or	r11, r27
			ST_CLUST(dir, 0);					/* cluster = 0 */
    7fdc:	13 8e       	std	Z+27, r1	; 0x1b
    7fde:	12 8e       	std	Z+26, r1	; 0x1a
    7fe0:	15 8a       	std	Z+21, r1	; 0x15
    7fe2:	14 8a       	std	Z+20, r1	; 0x14
			dj.fs->wflag = 1;
    7fe4:	8d 85       	ldd	r24, Y+13	; 0x0d
    7fe6:	9e 85       	ldd	r25, Y+14	; 0x0e
    7fe8:	21 e0       	ldi	r18, 0x01	; 1
    7fea:	dc 01       	movw	r26, r24
    7fec:	14 96       	adiw	r26, 0x04	; 4
    7fee:	2c 93       	st	X, r18
    7ff0:	14 97       	sbiw	r26, 0x04	; 4
			if (cl) {							/* Remove the cluster chain if exist */
    7ff2:	81 14       	cp	r8, r1
    7ff4:	91 04       	cpc	r9, r1
    7ff6:	a1 04       	cpc	r10, r1
    7ff8:	b1 04       	cpc	r11, r1
    7ffa:	81 f1       	breq	.+96     	; 0x805c <f_open+0x194>
				dw = dj.fs->winsect;
    7ffc:	9e 96       	adiw	r26, 0x2e	; 46
    7ffe:	4d 90       	ld	r4, X+
    8000:	5d 90       	ld	r5, X+
    8002:	6d 90       	ld	r6, X+
    8004:	7c 90       	ld	r7, X
    8006:	d1 97       	sbiw	r26, 0x31	; 49
				res = remove_chain(dj.fs, cl);
    8008:	b5 01       	movw	r22, r10
    800a:	a4 01       	movw	r20, r8
    800c:	0e 94 e3 3c 	call	0x79c6	; 0x79c6 <remove_chain>
    8010:	9c 01       	movw	r18, r24
				if (res == FR_OK) {
    8012:	00 97       	sbiw	r24, 0x00	; 0
    8014:	09 f0       	breq	.+2      	; 0x8018 <f_open+0x150>
    8016:	6f c0       	rjmp	.+222    	; 0x80f6 <f_open+0x22e>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    8018:	8d 85       	ldd	r24, Y+13	; 0x0d
    801a:	9e 85       	ldd	r25, Y+14	; 0x0e
    801c:	08 94       	sec
    801e:	81 08       	sbc	r8, r1
    8020:	91 08       	sbc	r9, r1
    8022:	a1 08       	sbc	r10, r1
    8024:	b1 08       	sbc	r11, r1
    8026:	fc 01       	movw	r30, r24
    8028:	82 86       	std	Z+10, r8	; 0x0a
    802a:	93 86       	std	Z+11, r9	; 0x0b
    802c:	a4 86       	std	Z+12, r10	; 0x0c
    802e:	b5 86       	std	Z+13, r11	; 0x0d
					res = move_window(dj.fs, dw);
    8030:	b3 01       	movw	r22, r6
    8032:	a2 01       	movw	r20, r4
    8034:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    8038:	9c 01       	movw	r18, r24
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
    803a:	00 97       	sbiw	r24, 0x00	; 0
    803c:	79 f0       	breq	.+30     	; 0x805c <f_open+0x194>
    803e:	5b c0       	rjmp	.+182    	; 0x80f6 <f_open+0x22e>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    8040:	21 15       	cp	r18, r1
    8042:	31 05       	cpc	r19, r1
    8044:	09 f0       	breq	.+2      	; 0x8048 <f_open+0x180>
    8046:	57 c0       	rjmp	.+174    	; 0x80f6 <f_open+0x22e>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    8048:	d8 01       	movw	r26, r16
    804a:	1b 96       	adiw	r26, 0x0b	; 11
    804c:	2c 91       	ld	r18, X
    804e:	1b 97       	sbiw	r26, 0x0b	; 11
    8050:	24 fd       	sbrc	r18, 4
    8052:	6b c0       	rjmp	.+214    	; 0x812a <f_open+0x262>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    8054:	d1 fe       	sbrs	r13, 1
    8056:	02 c0       	rjmp	.+4      	; 0x805c <f_open+0x194>
    8058:	20 fd       	sbrc	r18, 0
    805a:	6a c0       	rjmp	.+212    	; 0x8130 <f_open+0x268>
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    805c:	d3 fe       	sbrs	r13, 3
    805e:	02 c0       	rjmp	.+4      	; 0x8064 <f_open+0x19c>
			mode |= FA__WRITTEN;
    8060:	b0 e2       	ldi	r27, 0x20	; 32
    8062:	db 2a       	or	r13, r27
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    8064:	6d 85       	ldd	r22, Y+13	; 0x0d
    8066:	7e 85       	ldd	r23, Y+14	; 0x0e
    8068:	fb 01       	movw	r30, r22
    806a:	26 a5       	ldd	r18, Z+46	; 0x2e
    806c:	37 a5       	ldd	r19, Z+47	; 0x2f
    806e:	40 a9       	ldd	r20, Z+48	; 0x30
    8070:	51 a9       	ldd	r21, Z+49	; 0x31
    8072:	d7 01       	movw	r26, r14
    8074:	5a 96       	adiw	r26, 0x1a	; 26
    8076:	2d 93       	st	X+, r18
    8078:	3d 93       	st	X+, r19
    807a:	4d 93       	st	X+, r20
    807c:	5c 93       	st	X, r21
    807e:	5d 97       	sbiw	r26, 0x1d	; 29
		fp->dir_ptr = dir;
    8080:	5f 96       	adiw	r26, 0x1f	; 31
    8082:	1c 93       	st	X, r17
    8084:	0e 93       	st	-X, r16
    8086:	5e 97       	sbiw	r26, 0x1e	; 30
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    8088:	14 96       	adiw	r26, 0x04	; 4
    808a:	dc 92       	st	X, r13
		fp->org_clust =	LD_CLUST(dir);		/* File start cluster */
    808c:	f8 01       	movw	r30, r16
    808e:	84 89       	ldd	r24, Z+20	; 0x14
    8090:	95 89       	ldd	r25, Z+21	; 0x15
    8092:	a0 e0       	ldi	r26, 0x00	; 0
    8094:	b0 e0       	ldi	r27, 0x00	; 0
    8096:	dc 01       	movw	r26, r24
    8098:	99 27       	eor	r25, r25
    809a:	88 27       	eor	r24, r24
    809c:	22 8d       	ldd	r18, Z+26	; 0x1a
    809e:	33 8d       	ldd	r19, Z+27	; 0x1b
    80a0:	40 e0       	ldi	r20, 0x00	; 0
    80a2:	50 e0       	ldi	r21, 0x00	; 0
    80a4:	82 2b       	or	r24, r18
    80a6:	93 2b       	or	r25, r19
    80a8:	a4 2b       	or	r26, r20
    80aa:	b5 2b       	or	r27, r21
    80ac:	f7 01       	movw	r30, r14
    80ae:	86 87       	std	Z+14, r24	; 0x0e
    80b0:	97 87       	std	Z+15, r25	; 0x0f
    80b2:	a0 8b       	std	Z+16, r26	; 0x10
    80b4:	b1 8b       	std	Z+17, r27	; 0x11
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    80b6:	f8 01       	movw	r30, r16
    80b8:	84 8d       	ldd	r24, Z+28	; 0x1c
    80ba:	95 8d       	ldd	r25, Z+29	; 0x1d
    80bc:	a6 8d       	ldd	r26, Z+30	; 0x1e
    80be:	b7 8d       	ldd	r27, Z+31	; 0x1f
    80c0:	f7 01       	movw	r30, r14
    80c2:	82 87       	std	Z+10, r24	; 0x0a
    80c4:	93 87       	std	Z+11, r25	; 0x0b
    80c6:	a4 87       	std	Z+12, r26	; 0x0c
    80c8:	b5 87       	std	Z+13, r27	; 0x0d
		fp->fptr = 0;						/* File pointer */
    80ca:	d7 01       	movw	r26, r14
    80cc:	16 96       	adiw	r26, 0x06	; 6
    80ce:	1d 92       	st	X+, r1
    80d0:	1d 92       	st	X+, r1
    80d2:	1d 92       	st	X+, r1
    80d4:	1c 92       	st	X, r1
    80d6:	19 97       	sbiw	r26, 0x09	; 9
		fp->dsect = 0;
    80d8:	16 8a       	std	Z+22, r1	; 0x16
    80da:	17 8a       	std	Z+23, r1	; 0x17
    80dc:	10 8e       	std	Z+24, r1	; 0x18
    80de:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* No cluster link map table */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    80e0:	71 83       	std	Z+1, r23	; 0x01
    80e2:	60 83       	st	Z, r22
    80e4:	db 01       	movw	r26, r22
    80e6:	16 96       	adiw	r26, 0x06	; 6
    80e8:	8d 91       	ld	r24, X+
    80ea:	9c 91       	ld	r25, X
    80ec:	17 97       	sbiw	r26, 0x07	; 7
    80ee:	93 83       	std	Z+3, r25	; 0x03
    80f0:	82 83       	std	Z+2, r24	; 0x02
    80f2:	20 e0       	ldi	r18, 0x00	; 0
    80f4:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    80f6:	c9 01       	movw	r24, r18
    80f8:	a8 96       	adiw	r28, 0x28	; 40
    80fa:	0f b6       	in	r0, 0x3f	; 63
    80fc:	f8 94       	cli
    80fe:	de bf       	out	0x3e, r29	; 62
    8100:	0f be       	out	0x3f, r0	; 63
    8102:	cd bf       	out	0x3d, r28	; 61
    8104:	cf 91       	pop	r28
    8106:	df 91       	pop	r29
    8108:	1f 91       	pop	r17
    810a:	0f 91       	pop	r16
    810c:	ff 90       	pop	r15
    810e:	ef 90       	pop	r14
    8110:	df 90       	pop	r13
    8112:	bf 90       	pop	r11
    8114:	af 90       	pop	r10
    8116:	9f 90       	pop	r9
    8118:	8f 90       	pop	r8
    811a:	7f 90       	pop	r7
    811c:	6f 90       	pop	r6
    811e:	5f 90       	pop	r5
    8120:	4f 90       	pop	r4
    8122:	08 95       	ret
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (mode & FA_CREATE_NEW) {		/* Cannot create new */
				res = FR_EXIST;
    8124:	28 e0       	ldi	r18, 0x08	; 8
    8126:	30 e0       	ldi	r19, 0x00	; 0
    8128:	e6 cf       	rjmp	.-52     	; 0x80f6 <f_open+0x22e>
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
				res = FR_NO_FILE;
    812a:	24 e0       	ldi	r18, 0x04	; 4
    812c:	30 e0       	ldi	r19, 0x00	; 0
    812e:	e3 cf       	rjmp	.-58     	; 0x80f6 <f_open+0x22e>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
    8130:	27 e0       	ldi	r18, 0x07	; 7
    8132:	30 e0       	ldi	r19, 0x00	; 0
    8134:	e0 cf       	rjmp	.-64     	; 0x80f6 <f_open+0x22e>

00008136 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    8136:	a4 e0       	ldi	r26, 0x04	; 4
    8138:	b0 e0       	ldi	r27, 0x00	; 0
    813a:	e1 ea       	ldi	r30, 0xA1	; 161
    813c:	f0 e4       	ldi	r31, 0x40	; 64
    813e:	0c 94 d2 5c 	jmp	0xb9a4	; 0xb9a4 <__prologue_saves__>
    8142:	9c 83       	std	Y+4, r25	; 0x04
    8144:	8b 83       	std	Y+3, r24	; 0x03
    8146:	06 2f       	mov	r16, r22
    8148:	c7 2e       	mov	r12, r23
    814a:	4a 01       	movw	r8, r20
    814c:	3a 83       	std	Y+2, r19	; 0x02
    814e:	29 83       	std	Y+1, r18	; 0x01
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    8150:	d9 01       	movw	r26, r18
    8152:	1d 92       	st	X+, r1
    8154:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    8156:	fc 01       	movw	r30, r24
    8158:	62 81       	ldd	r22, Z+2	; 0x02
    815a:	73 81       	ldd	r23, Z+3	; 0x03
    815c:	80 81       	ld	r24, Z
    815e:	91 81       	ldd	r25, Z+1	; 0x01
    8160:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <validate>
    8164:	7c 01       	movw	r14, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    8166:	00 97       	sbiw	r24, 0x00	; 0
    8168:	09 f0       	breq	.+2      	; 0x816c <f_read+0x36>
    816a:	48 c1       	rjmp	.+656    	; 0x83fc <f_read+0x2c6>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    816c:	ab 81       	ldd	r26, Y+3	; 0x03
    816e:	bc 81       	ldd	r27, Y+4	; 0x04
    8170:	14 96       	adiw	r26, 0x04	; 4
    8172:	8c 91       	ld	r24, X
    8174:	14 97       	sbiw	r26, 0x04	; 4
    8176:	87 fd       	sbrc	r24, 7
    8178:	3a c1       	rjmp	.+628    	; 0x83ee <f_read+0x2b8>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    817a:	80 ff       	sbrs	r24, 0
    817c:	3c c1       	rjmp	.+632    	; 0x83f6 <f_read+0x2c0>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    817e:	1a 96       	adiw	r26, 0x0a	; 10
    8180:	8d 91       	ld	r24, X+
    8182:	9d 91       	ld	r25, X+
    8184:	0d 90       	ld	r0, X+
    8186:	bc 91       	ld	r27, X
    8188:	a0 2d       	mov	r26, r0
    818a:	eb 81       	ldd	r30, Y+3	; 0x03
    818c:	fc 81       	ldd	r31, Y+4	; 0x04
    818e:	26 81       	ldd	r18, Z+6	; 0x06
    8190:	37 81       	ldd	r19, Z+7	; 0x07
    8192:	40 85       	ldd	r20, Z+8	; 0x08
    8194:	51 85       	ldd	r21, Z+9	; 0x09
    8196:	82 1b       	sub	r24, r18
    8198:	93 0b       	sbc	r25, r19
    819a:	a4 0b       	sbc	r26, r20
    819c:	b5 0b       	sbc	r27, r21
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    819e:	94 01       	movw	r18, r8
    81a0:	40 e0       	ldi	r20, 0x00	; 0
    81a2:	50 e0       	ldi	r21, 0x00	; 0
    81a4:	82 17       	cp	r24, r18
    81a6:	93 07       	cpc	r25, r19
    81a8:	a4 07       	cpc	r26, r20
    81aa:	b5 07       	cpc	r27, r21
    81ac:	08 f4       	brcc	.+2      	; 0x81b0 <f_read+0x7a>
    81ae:	4c 01       	movw	r8, r24
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    81b0:	20 2e       	mov	r2, r16
    81b2:	3c 2c       	mov	r3, r12
    81b4:	17 c1       	rjmp	.+558    	; 0x83e4 <f_read+0x2ae>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    81b6:	ab 81       	ldd	r26, Y+3	; 0x03
    81b8:	bc 81       	ldd	r27, Y+4	; 0x04
    81ba:	16 96       	adiw	r26, 0x06	; 6
    81bc:	2d 91       	ld	r18, X+
    81be:	3d 91       	ld	r19, X+
    81c0:	4d 91       	ld	r20, X+
    81c2:	5c 91       	ld	r21, X
    81c4:	19 97       	sbiw	r26, 0x09	; 9
    81c6:	da 01       	movw	r26, r20
    81c8:	c9 01       	movw	r24, r18
    81ca:	91 70       	andi	r25, 0x01	; 1
    81cc:	a0 70       	andi	r26, 0x00	; 0
    81ce:	b0 70       	andi	r27, 0x00	; 0
    81d0:	00 97       	sbiw	r24, 0x00	; 0
    81d2:	a1 05       	cpc	r26, r1
    81d4:	b1 05       	cpc	r27, r1
    81d6:	09 f0       	breq	.+2      	; 0x81da <f_read+0xa4>
    81d8:	ac c0       	rjmp	.+344    	; 0x8332 <f_read+0x1fc>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    81da:	eb 81       	ldd	r30, Y+3	; 0x03
    81dc:	fc 81       	ldd	r31, Y+4	; 0x04
    81de:	80 81       	ld	r24, Z
    81e0:	91 81       	ldd	r25, Z+1	; 0x01
    81e2:	59 01       	movw	r10, r18
    81e4:	6a 01       	movw	r12, r20
    81e6:	09 e0       	ldi	r16, 0x09	; 9
    81e8:	d6 94       	lsr	r13
    81ea:	c7 94       	ror	r12
    81ec:	b7 94       	ror	r11
    81ee:	a7 94       	ror	r10
    81f0:	0a 95       	dec	r16
    81f2:	d1 f7       	brne	.-12     	; 0x81e8 <f_read+0xb2>
    81f4:	dc 01       	movw	r26, r24
    81f6:	12 96       	adiw	r26, 0x02	; 2
    81f8:	0c 91       	ld	r16, X
    81fa:	12 97       	sbiw	r26, 0x02	; 2
    81fc:	01 50       	subi	r16, 0x01	; 1
    81fe:	0a 21       	and	r16, r10
			if (!csect) {							/* On the cluster boundary? */
    8200:	41 f5       	brne	.+80     	; 0x8252 <f_read+0x11c>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
    8202:	21 15       	cp	r18, r1
    8204:	31 05       	cpc	r19, r1
    8206:	41 05       	cpc	r20, r1
    8208:	51 05       	cpc	r21, r1
    820a:	29 f4       	brne	.+10     	; 0x8216 <f_read+0xe0>
    820c:	66 85       	ldd	r22, Z+14	; 0x0e
    820e:	77 85       	ldd	r23, Z+15	; 0x0f
    8210:	80 89       	ldd	r24, Z+16	; 0x10
    8212:	91 89       	ldd	r25, Z+17	; 0x11
    8214:	08 c0       	rjmp	.+16     	; 0x8226 <f_read+0xf0>
    8216:	eb 81       	ldd	r30, Y+3	; 0x03
    8218:	fc 81       	ldd	r31, Y+4	; 0x04
    821a:	42 89       	ldd	r20, Z+18	; 0x12
    821c:	53 89       	ldd	r21, Z+19	; 0x13
    821e:	64 89       	ldd	r22, Z+20	; 0x14
    8220:	75 89       	ldd	r23, Z+21	; 0x15
    8222:	0e 94 52 34 	call	0x68a4	; 0x68a4 <get_fat>
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    8226:	62 30       	cpi	r22, 0x02	; 2
    8228:	71 05       	cpc	r23, r1
    822a:	81 05       	cpc	r24, r1
    822c:	91 05       	cpc	r25, r1
    822e:	08 f1       	brcs	.+66     	; 0x8272 <f_read+0x13c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    8230:	6f 3f       	cpi	r22, 0xFF	; 255
    8232:	bf ef       	ldi	r27, 0xFF	; 255
    8234:	7b 07       	cpc	r23, r27
    8236:	bf ef       	ldi	r27, 0xFF	; 255
    8238:	8b 07       	cpc	r24, r27
    823a:	bf ef       	ldi	r27, 0xFF	; 255
    823c:	9b 07       	cpc	r25, r27
    823e:	09 f4       	brne	.+2      	; 0x8242 <f_read+0x10c>
    8240:	8c c0       	rjmp	.+280    	; 0x835a <f_read+0x224>
				fp->curr_clust = clst;				/* Update current cluster */
    8242:	ab 81       	ldd	r26, Y+3	; 0x03
    8244:	bc 81       	ldd	r27, Y+4	; 0x04
    8246:	52 96       	adiw	r26, 0x12	; 18
    8248:	6d 93       	st	X+, r22
    824a:	7d 93       	st	X+, r23
    824c:	8d 93       	st	X+, r24
    824e:	9c 93       	st	X, r25
    8250:	55 97       	sbiw	r26, 0x15	; 21
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    8252:	eb 81       	ldd	r30, Y+3	; 0x03
    8254:	fc 81       	ldd	r31, Y+4	; 0x04
    8256:	a0 80       	ld	r10, Z
    8258:	b1 80       	ldd	r11, Z+1	; 0x01
    825a:	42 89       	ldd	r20, Z+18	; 0x12
    825c:	53 89       	ldd	r21, Z+19	; 0x13
    825e:	64 89       	ldd	r22, Z+20	; 0x14
    8260:	75 89       	ldd	r23, Z+21	; 0x15
    8262:	c5 01       	movw	r24, r10
    8264:	0e 94 22 34 	call	0x6844	; 0x6844 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    8268:	61 15       	cp	r22, r1
    826a:	71 05       	cpc	r23, r1
    826c:	81 05       	cpc	r24, r1
    826e:	91 05       	cpc	r25, r1
    8270:	51 f4       	brne	.+20     	; 0x8286 <f_read+0x150>
    8272:	ab 81       	ldd	r26, Y+3	; 0x03
    8274:	bc 81       	ldd	r27, Y+4	; 0x04
    8276:	14 96       	adiw	r26, 0x04	; 4
    8278:	8c 91       	ld	r24, X
    827a:	14 97       	sbiw	r26, 0x04	; 4
    827c:	80 68       	ori	r24, 0x80	; 128
    827e:	14 96       	adiw	r26, 0x04	; 4
    8280:	8c 93       	st	X, r24
    8282:	14 97       	sbiw	r26, 0x04	; 4
    8284:	b4 c0       	rjmp	.+360    	; 0x83ee <f_read+0x2b8>
			sect += csect;
    8286:	2b 01       	movw	r4, r22
    8288:	3c 01       	movw	r6, r24
    828a:	40 0e       	add	r4, r16
    828c:	51 1c       	adc	r5, r1
    828e:	61 1c       	adc	r6, r1
    8290:	71 1c       	adc	r7, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    8292:	64 01       	movw	r12, r8
    8294:	cd 2c       	mov	r12, r13
    8296:	dd 24       	eor	r13, r13
    8298:	c6 94       	lsr	r12
			if (cc) {								/* Read maximum contiguous sectors directly */
    829a:	c1 14       	cp	r12, r1
    829c:	d1 04       	cpc	r13, r1
    829e:	09 f4       	brne	.+2      	; 0x82a2 <f_read+0x16c>
    82a0:	42 c0       	rjmp	.+132    	; 0x8326 <f_read+0x1f0>
				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
    82a2:	f5 01       	movw	r30, r10
    82a4:	82 81       	ldd	r24, Z+2	; 0x02
    82a6:	10 e0       	ldi	r17, 0x00	; 0
    82a8:	96 01       	movw	r18, r12
    82aa:	20 0f       	add	r18, r16
    82ac:	31 1f       	adc	r19, r17
    82ae:	90 e0       	ldi	r25, 0x00	; 0
    82b0:	82 17       	cp	r24, r18
    82b2:	93 07       	cpc	r25, r19
    82b4:	18 f4       	brcc	.+6      	; 0x82bc <f_read+0x186>
					cc = fp->fs->csize - csect;
    82b6:	6c 01       	movw	r12, r24
    82b8:	c0 1a       	sub	r12, r16
    82ba:	d1 0a       	sbc	r13, r17
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    82bc:	d5 01       	movw	r26, r10
    82be:	11 96       	adiw	r26, 0x01	; 1
    82c0:	8c 91       	ld	r24, X
    82c2:	b1 01       	movw	r22, r2
    82c4:	a3 01       	movw	r20, r6
    82c6:	92 01       	movw	r18, r4
    82c8:	0c 2d       	mov	r16, r12
    82ca:	0e 94 8a 53 	call	0xa714	; 0xa714 <disk_read>
    82ce:	00 97       	sbiw	r24, 0x00	; 0
    82d0:	09 f0       	breq	.+2      	; 0x82d4 <f_read+0x19e>
    82d2:	43 c0       	rjmp	.+134    	; 0x835a <f_read+0x224>
					ABORT(fp->fs, FR_DISK_ERR);
#if !_FS_READONLY && _FS_MINIMIZE <= 2				/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    82d4:	ab 81       	ldd	r26, Y+3	; 0x03
    82d6:	bc 81       	ldd	r27, Y+4	; 0x04
    82d8:	ed 91       	ld	r30, X+
    82da:	fc 91       	ld	r31, X
    82dc:	11 97       	sbiw	r26, 0x01	; 1
    82de:	84 81       	ldd	r24, Z+4	; 0x04
    82e0:	88 23       	and	r24, r24
    82e2:	e1 f0       	breq	.+56     	; 0x831c <f_read+0x1e6>
    82e4:	86 a5       	ldd	r24, Z+46	; 0x2e
    82e6:	97 a5       	ldd	r25, Z+47	; 0x2f
    82e8:	a0 a9       	ldd	r26, Z+48	; 0x30
    82ea:	b1 a9       	ldd	r27, Z+49	; 0x31
    82ec:	84 19       	sub	r24, r4
    82ee:	95 09       	sbc	r25, r5
    82f0:	a6 09       	sbc	r26, r6
    82f2:	b7 09       	sbc	r27, r7
    82f4:	96 01       	movw	r18, r12
    82f6:	40 e0       	ldi	r20, 0x00	; 0
    82f8:	50 e0       	ldi	r21, 0x00	; 0
    82fa:	82 17       	cp	r24, r18
    82fc:	93 07       	cpc	r25, r19
    82fe:	a4 07       	cpc	r26, r20
    8300:	b5 07       	cpc	r27, r21
    8302:	60 f4       	brcc	.+24     	; 0x831c <f_read+0x1e6>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    8304:	98 2f       	mov	r25, r24
    8306:	88 27       	eor	r24, r24
    8308:	99 0f       	add	r25, r25
    830a:	bf 01       	movw	r22, r30
    830c:	6e 5c       	subi	r22, 0xCE	; 206
    830e:	7f 4f       	sbci	r23, 0xFF	; 255
    8310:	82 0d       	add	r24, r2
    8312:	93 1d       	adc	r25, r3
    8314:	40 e0       	ldi	r20, 0x00	; 0
    8316:	52 e0       	ldi	r21, 0x02	; 2
    8318:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    831c:	86 01       	movw	r16, r12
    831e:	10 2f       	mov	r17, r16
    8320:	00 27       	eor	r16, r16
    8322:	11 0f       	add	r17, r17
				continue;
    8324:	40 c0       	rjmp	.+128    	; 0x83a6 <f_read+0x270>
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    8326:	eb 81       	ldd	r30, Y+3	; 0x03
    8328:	fc 81       	ldd	r31, Y+4	; 0x04
    832a:	46 8a       	std	Z+22, r4	; 0x16
    832c:	57 8a       	std	Z+23, r5	; 0x17
    832e:	60 8e       	std	Z+24, r6	; 0x18
    8330:	71 8e       	std	Z+25, r7	; 0x19
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    8332:	ab 81       	ldd	r26, Y+3	; 0x03
    8334:	bc 81       	ldd	r27, Y+4	; 0x04
    8336:	16 96       	adiw	r26, 0x06	; 6
    8338:	ad 90       	ld	r10, X+
    833a:	bd 90       	ld	r11, X+
    833c:	cd 90       	ld	r12, X+
    833e:	dc 90       	ld	r13, X
    8340:	19 97       	sbiw	r26, 0x09	; 9
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    8342:	56 96       	adiw	r26, 0x16	; 22
    8344:	4d 91       	ld	r20, X+
    8346:	5d 91       	ld	r21, X+
    8348:	6d 91       	ld	r22, X+
    834a:	7c 91       	ld	r23, X
    834c:	59 97       	sbiw	r26, 0x19	; 25
    834e:	8d 91       	ld	r24, X+
    8350:	9c 91       	ld	r25, X
    8352:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    8356:	00 97       	sbiw	r24, 0x00	; 0
    8358:	49 f0       	breq	.+18     	; 0x836c <f_read+0x236>
			ABORT(fp->fs, FR_DISK_ERR);
    835a:	eb 81       	ldd	r30, Y+3	; 0x03
    835c:	fc 81       	ldd	r31, Y+4	; 0x04
    835e:	84 81       	ldd	r24, Z+4	; 0x04
    8360:	80 68       	ori	r24, 0x80	; 128
    8362:	84 83       	std	Z+4, r24	; 0x04
    8364:	e1 e0       	ldi	r30, 0x01	; 1
    8366:	ee 2e       	mov	r14, r30
    8368:	f1 2c       	mov	r15, r1
    836a:	48 c0       	rjmp	.+144    	; 0x83fc <f_read+0x2c6>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    836c:	c5 01       	movw	r24, r10
    836e:	91 70       	andi	r25, 0x01	; 1
    8370:	20 e0       	ldi	r18, 0x00	; 0
    8372:	32 e0       	ldi	r19, 0x02	; 2
    8374:	28 1b       	sub	r18, r24
    8376:	39 0b       	sbc	r19, r25
    8378:	84 01       	movw	r16, r8
    837a:	28 15       	cp	r18, r8
    837c:	39 05       	cpc	r19, r9
    837e:	08 f4       	brcc	.+2      	; 0x8382 <f_read+0x24c>
    8380:	89 01       	movw	r16, r18
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    8382:	ab 81       	ldd	r26, Y+3	; 0x03
    8384:	bc 81       	ldd	r27, Y+4	; 0x04
    8386:	6d 91       	ld	r22, X+
    8388:	7c 91       	ld	r23, X
    838a:	11 97       	sbiw	r26, 0x01	; 1
    838c:	6e 5c       	subi	r22, 0xCE	; 206
    838e:	7f 4f       	sbci	r23, 0xFF	; 255
    8390:	16 96       	adiw	r26, 0x06	; 6
    8392:	8d 91       	ld	r24, X+
    8394:	9c 91       	ld	r25, X
    8396:	17 97       	sbiw	r26, 0x07	; 7
    8398:	91 70       	andi	r25, 0x01	; 1
    839a:	68 0f       	add	r22, r24
    839c:	79 1f       	adc	r23, r25
    839e:	c1 01       	movw	r24, r2
    83a0:	a8 01       	movw	r20, r16
    83a2:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    83a6:	20 0e       	add	r2, r16
    83a8:	31 1e       	adc	r3, r17
    83aa:	98 01       	movw	r18, r16
    83ac:	40 e0       	ldi	r20, 0x00	; 0
    83ae:	50 e0       	ldi	r21, 0x00	; 0
    83b0:	eb 81       	ldd	r30, Y+3	; 0x03
    83b2:	fc 81       	ldd	r31, Y+4	; 0x04
    83b4:	86 81       	ldd	r24, Z+6	; 0x06
    83b6:	97 81       	ldd	r25, Z+7	; 0x07
    83b8:	a0 85       	ldd	r26, Z+8	; 0x08
    83ba:	b1 85       	ldd	r27, Z+9	; 0x09
    83bc:	82 0f       	add	r24, r18
    83be:	93 1f       	adc	r25, r19
    83c0:	a4 1f       	adc	r26, r20
    83c2:	b5 1f       	adc	r27, r21
    83c4:	86 83       	std	Z+6, r24	; 0x06
    83c6:	97 83       	std	Z+7, r25	; 0x07
    83c8:	a0 87       	std	Z+8, r26	; 0x08
    83ca:	b1 87       	std	Z+9, r27	; 0x09
    83cc:	a9 81       	ldd	r26, Y+1	; 0x01
    83ce:	ba 81       	ldd	r27, Y+2	; 0x02
    83d0:	8d 91       	ld	r24, X+
    83d2:	9c 91       	ld	r25, X
    83d4:	11 97       	sbiw	r26, 0x01	; 1
    83d6:	80 0f       	add	r24, r16
    83d8:	91 1f       	adc	r25, r17
    83da:	11 96       	adiw	r26, 0x01	; 1
    83dc:	9c 93       	st	X, r25
    83de:	8e 93       	st	-X, r24
    83e0:	80 1a       	sub	r8, r16
    83e2:	91 0a       	sbc	r9, r17
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    83e4:	81 14       	cp	r8, r1
    83e6:	91 04       	cpc	r9, r1
    83e8:	09 f0       	breq	.+2      	; 0x83ec <f_read+0x2b6>
    83ea:	e5 ce       	rjmp	.-566    	; 0x81b6 <f_read+0x80>
    83ec:	07 c0       	rjmp	.+14     	; 0x83fc <f_read+0x2c6>
	*br = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)						/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    83ee:	72 e0       	ldi	r23, 0x02	; 2
    83f0:	e7 2e       	mov	r14, r23
    83f2:	f1 2c       	mov	r15, r1
    83f4:	03 c0       	rjmp	.+6      	; 0x83fc <f_read+0x2c6>
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    83f6:	67 e0       	ldi	r22, 0x07	; 7
    83f8:	e6 2e       	mov	r14, r22
    83fa:	f1 2c       	mov	r15, r1
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    83fc:	c7 01       	movw	r24, r14
    83fe:	24 96       	adiw	r28, 0x04	; 4
    8400:	e2 e1       	ldi	r30, 0x12	; 18
    8402:	0c 94 ee 5c 	jmp	0xb9dc	; 0xb9dc <__epilogue_restores__>

00008406 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    8406:	a4 e0       	ldi	r26, 0x04	; 4
    8408:	b0 e0       	ldi	r27, 0x00	; 0
    840a:	e9 e0       	ldi	r30, 0x09	; 9
    840c:	f2 e4       	ldi	r31, 0x42	; 66
    840e:	0c 94 d2 5c 	jmp	0xb9a4	; 0xb9a4 <__prologue_saves__>
    8412:	9c 83       	std	Y+4, r25	; 0x04
    8414:	8b 83       	std	Y+3, r24	; 0x03
    8416:	06 2f       	mov	r16, r22
    8418:	c7 2e       	mov	r12, r23
    841a:	2a 01       	movw	r4, r20
    841c:	3a 83       	std	Y+2, r19	; 0x02
    841e:	29 83       	std	Y+1, r18	; 0x01
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    8420:	d9 01       	movw	r26, r18
    8422:	1d 92       	st	X+, r1
    8424:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    8426:	fc 01       	movw	r30, r24
    8428:	62 81       	ldd	r22, Z+2	; 0x02
    842a:	73 81       	ldd	r23, Z+3	; 0x03
    842c:	80 81       	ld	r24, Z
    842e:	91 81       	ldd	r25, Z+1	; 0x01
    8430:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <validate>
    8434:	7c 01       	movw	r14, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    8436:	00 97       	sbiw	r24, 0x00	; 0
    8438:	09 f0       	breq	.+2      	; 0x843c <f_write+0x36>
    843a:	c8 c1       	rjmp	.+912    	; 0x87cc <f_write+0x3c6>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    843c:	ab 81       	ldd	r26, Y+3	; 0x03
    843e:	bc 81       	ldd	r27, Y+4	; 0x04
    8440:	14 96       	adiw	r26, 0x04	; 4
    8442:	8c 91       	ld	r24, X
    8444:	14 97       	sbiw	r26, 0x04	; 4
    8446:	87 fd       	sbrc	r24, 7
    8448:	ba c1       	rjmp	.+884    	; 0x87be <f_write+0x3b8>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    844a:	81 ff       	sbrs	r24, 1
    844c:	bc c1       	rjmp	.+888    	; 0x87c6 <f_write+0x3c0>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    844e:	1a 96       	adiw	r26, 0x0a	; 10
    8450:	2d 91       	ld	r18, X+
    8452:	3d 91       	ld	r19, X+
    8454:	4d 91       	ld	r20, X+
    8456:	5c 91       	ld	r21, X
    8458:	1d 97       	sbiw	r26, 0x0d	; 13
    845a:	c2 01       	movw	r24, r4
    845c:	a0 e0       	ldi	r26, 0x00	; 0
    845e:	b0 e0       	ldi	r27, 0x00	; 0
    8460:	82 0f       	add	r24, r18
    8462:	93 1f       	adc	r25, r19
    8464:	a4 1f       	adc	r26, r20
    8466:	b5 1f       	adc	r27, r21
    8468:	82 17       	cp	r24, r18
    846a:	93 07       	cpc	r25, r19
    846c:	a4 07       	cpc	r26, r20
    846e:	b5 07       	cpc	r27, r21
    8470:	10 f4       	brcc	.+4      	; 0x8476 <f_write+0x70>
    8472:	44 24       	eor	r4, r4
    8474:	55 24       	eor	r5, r5
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    8476:	20 2e       	mov	r2, r16
    8478:	3c 2c       	mov	r3, r12
    847a:	80 c1       	rjmp	.+768    	; 0x877c <f_write+0x376>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    847c:	eb 81       	ldd	r30, Y+3	; 0x03
    847e:	fc 81       	ldd	r31, Y+4	; 0x04
    8480:	26 81       	ldd	r18, Z+6	; 0x06
    8482:	37 81       	ldd	r19, Z+7	; 0x07
    8484:	40 85       	ldd	r20, Z+8	; 0x08
    8486:	51 85       	ldd	r21, Z+9	; 0x09
    8488:	da 01       	movw	r26, r20
    848a:	c9 01       	movw	r24, r18
    848c:	91 70       	andi	r25, 0x01	; 1
    848e:	a0 70       	andi	r26, 0x00	; 0
    8490:	b0 70       	andi	r27, 0x00	; 0
    8492:	00 97       	sbiw	r24, 0x00	; 0
    8494:	a1 05       	cpc	r26, r1
    8496:	b1 05       	cpc	r27, r1
    8498:	09 f0       	breq	.+2      	; 0x849c <f_write+0x96>
    849a:	11 c1       	rjmp	.+546    	; 0x86be <f_write+0x2b8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    849c:	80 81       	ld	r24, Z
    849e:	91 81       	ldd	r25, Z+1	; 0x01
    84a0:	59 01       	movw	r10, r18
    84a2:	6a 01       	movw	r12, r20
    84a4:	69 e0       	ldi	r22, 0x09	; 9
    84a6:	d6 94       	lsr	r13
    84a8:	c7 94       	ror	r12
    84aa:	b7 94       	ror	r11
    84ac:	a7 94       	ror	r10
    84ae:	6a 95       	dec	r22
    84b0:	d1 f7       	brne	.-12     	; 0x84a6 <f_write+0xa0>
    84b2:	dc 01       	movw	r26, r24
    84b4:	12 96       	adiw	r26, 0x02	; 2
    84b6:	0c 91       	ld	r16, X
    84b8:	12 97       	sbiw	r26, 0x02	; 2
    84ba:	01 50       	subi	r16, 0x01	; 1
    84bc:	0a 21       	and	r16, r10
			if (!csect) {							/* On the cluster boundary? */
    84be:	09 f0       	breq	.+2      	; 0x84c2 <f_write+0xbc>
    84c0:	44 c0       	rjmp	.+136    	; 0x854a <f_write+0x144>
				if (fp->fptr == 0) {				/* On the top of the file? */
    84c2:	21 15       	cp	r18, r1
    84c4:	31 05       	cpc	r19, r1
    84c6:	41 05       	cpc	r20, r1
    84c8:	51 05       	cpc	r21, r1
    84ca:	c1 f4       	brne	.+48     	; 0x84fc <f_write+0xf6>
					clst = fp->org_clust;			/* Follow from the origin */
    84cc:	26 85       	ldd	r18, Z+14	; 0x0e
    84ce:	37 85       	ldd	r19, Z+15	; 0x0f
    84d0:	40 89       	ldd	r20, Z+16	; 0x10
    84d2:	51 89       	ldd	r21, Z+17	; 0x11
					if (clst == 0)					/* When there is no cluster chain, */
    84d4:	21 15       	cp	r18, r1
    84d6:	31 05       	cpc	r19, r1
    84d8:	41 05       	cpc	r20, r1
    84da:	51 05       	cpc	r21, r1
    84dc:	09 f5       	brne	.+66     	; 0x8520 <f_write+0x11a>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    84de:	40 e0       	ldi	r20, 0x00	; 0
    84e0:	50 e0       	ldi	r21, 0x00	; 0
    84e2:	60 e0       	ldi	r22, 0x00	; 0
    84e4:	70 e0       	ldi	r23, 0x00	; 0
    84e6:	0e 94 9c 36 	call	0x6d38	; 0x6d38 <create_chain>
    84ea:	9b 01       	movw	r18, r22
    84ec:	ac 01       	movw	r20, r24
    84ee:	eb 81       	ldd	r30, Y+3	; 0x03
    84f0:	fc 81       	ldd	r31, Y+4	; 0x04
    84f2:	66 87       	std	Z+14, r22	; 0x0e
    84f4:	77 87       	std	Z+15, r23	; 0x0f
    84f6:	80 8b       	std	Z+16, r24	; 0x10
    84f8:	91 8b       	std	Z+17, r25	; 0x11
    84fa:	0c c0       	rjmp	.+24     	; 0x8514 <f_write+0x10e>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or stretch cluster chain */
    84fc:	ab 81       	ldd	r26, Y+3	; 0x03
    84fe:	bc 81       	ldd	r27, Y+4	; 0x04
    8500:	52 96       	adiw	r26, 0x12	; 18
    8502:	4d 91       	ld	r20, X+
    8504:	5d 91       	ld	r21, X+
    8506:	6d 91       	ld	r22, X+
    8508:	7c 91       	ld	r23, X
    850a:	55 97       	sbiw	r26, 0x15	; 21
    850c:	0e 94 9c 36 	call	0x6d38	; 0x6d38 <create_chain>
    8510:	9b 01       	movw	r18, r22
    8512:	ac 01       	movw	r20, r24
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    8514:	21 15       	cp	r18, r1
    8516:	31 05       	cpc	r19, r1
    8518:	41 05       	cpc	r20, r1
    851a:	51 05       	cpc	r21, r1
    851c:	09 f4       	brne	.+2      	; 0x8520 <f_write+0x11a>
    851e:	32 c1       	rjmp	.+612    	; 0x8784 <f_write+0x37e>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    8520:	21 30       	cpi	r18, 0x01	; 1
    8522:	31 05       	cpc	r19, r1
    8524:	41 05       	cpc	r20, r1
    8526:	51 05       	cpc	r21, r1
    8528:	09 f4       	brne	.+2      	; 0x852c <f_write+0x126>
    852a:	40 c0       	rjmp	.+128    	; 0x85ac <f_write+0x1a6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    852c:	2f 3f       	cpi	r18, 0xFF	; 255
    852e:	ff ef       	ldi	r31, 0xFF	; 255
    8530:	3f 07       	cpc	r19, r31
    8532:	ff ef       	ldi	r31, 0xFF	; 255
    8534:	4f 07       	cpc	r20, r31
    8536:	ff ef       	ldi	r31, 0xFF	; 255
    8538:	5f 07       	cpc	r21, r31
    853a:	09 f4       	brne	.+2      	; 0x853e <f_write+0x138>
    853c:	a8 c0       	rjmp	.+336    	; 0x868e <f_write+0x288>
				fp->curr_clust = clst;				/* Update current cluster */
    853e:	eb 81       	ldd	r30, Y+3	; 0x03
    8540:	fc 81       	ldd	r31, Y+4	; 0x04
    8542:	22 8b       	std	Z+18, r18	; 0x12
    8544:	33 8b       	std	Z+19, r19	; 0x13
    8546:	44 8b       	std	Z+20, r20	; 0x14
    8548:	55 8b       	std	Z+21, r21	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
    854a:	ab 81       	ldd	r26, Y+3	; 0x03
    854c:	bc 81       	ldd	r27, Y+4	; 0x04
    854e:	ed 91       	ld	r30, X+
    8550:	fc 91       	ld	r31, X
    8552:	11 97       	sbiw	r26, 0x01	; 1
    8554:	66 a5       	ldd	r22, Z+46	; 0x2e
    8556:	77 a5       	ldd	r23, Z+47	; 0x2f
    8558:	80 a9       	ldd	r24, Z+48	; 0x30
    855a:	91 a9       	ldd	r25, Z+49	; 0x31
    855c:	56 96       	adiw	r26, 0x16	; 22
    855e:	2d 91       	ld	r18, X+
    8560:	3d 91       	ld	r19, X+
    8562:	4d 91       	ld	r20, X+
    8564:	5c 91       	ld	r21, X
    8566:	59 97       	sbiw	r26, 0x19	; 25
    8568:	62 17       	cp	r22, r18
    856a:	73 07       	cpc	r23, r19
    856c:	84 07       	cpc	r24, r20
    856e:	95 07       	cpc	r25, r21
    8570:	51 f4       	brne	.+20     	; 0x8586 <f_write+0x180>
    8572:	cf 01       	movw	r24, r30
    8574:	40 e0       	ldi	r20, 0x00	; 0
    8576:	50 e0       	ldi	r21, 0x00	; 0
    8578:	60 e0       	ldi	r22, 0x00	; 0
    857a:	70 e0       	ldi	r23, 0x00	; 0
    857c:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    8580:	00 97       	sbiw	r24, 0x00	; 0
    8582:	09 f0       	breq	.+2      	; 0x8586 <f_write+0x180>
    8584:	b0 c0       	rjmp	.+352    	; 0x86e6 <f_write+0x2e0>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    8586:	ab 81       	ldd	r26, Y+3	; 0x03
    8588:	bc 81       	ldd	r27, Y+4	; 0x04
    858a:	ad 90       	ld	r10, X+
    858c:	bc 90       	ld	r11, X
    858e:	11 97       	sbiw	r26, 0x01	; 1
    8590:	52 96       	adiw	r26, 0x12	; 18
    8592:	4d 91       	ld	r20, X+
    8594:	5d 91       	ld	r21, X+
    8596:	6d 91       	ld	r22, X+
    8598:	7c 91       	ld	r23, X
    859a:	55 97       	sbiw	r26, 0x15	; 21
    859c:	c5 01       	movw	r24, r10
    859e:	0e 94 22 34 	call	0x6844	; 0x6844 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    85a2:	61 15       	cp	r22, r1
    85a4:	71 05       	cpc	r23, r1
    85a6:	81 05       	cpc	r24, r1
    85a8:	91 05       	cpc	r25, r1
    85aa:	31 f4       	brne	.+12     	; 0x85b8 <f_write+0x1b2>
    85ac:	eb 81       	ldd	r30, Y+3	; 0x03
    85ae:	fc 81       	ldd	r31, Y+4	; 0x04
    85b0:	84 81       	ldd	r24, Z+4	; 0x04
    85b2:	80 68       	ori	r24, 0x80	; 128
    85b4:	84 83       	std	Z+4, r24	; 0x04
    85b6:	03 c1       	rjmp	.+518    	; 0x87be <f_write+0x3b8>
			sect += csect;
    85b8:	3b 01       	movw	r6, r22
    85ba:	4c 01       	movw	r8, r24
    85bc:	60 0e       	add	r6, r16
    85be:	71 1c       	adc	r7, r1
    85c0:	81 1c       	adc	r8, r1
    85c2:	91 1c       	adc	r9, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    85c4:	62 01       	movw	r12, r4
    85c6:	cd 2c       	mov	r12, r13
    85c8:	dd 24       	eor	r13, r13
    85ca:	c6 94       	lsr	r12
			if (cc) {								/* Write maximum contiguous sectors directly */
    85cc:	c1 14       	cp	r12, r1
    85ce:	d1 04       	cpc	r13, r1
    85d0:	09 f4       	brne	.+2      	; 0x85d4 <f_write+0x1ce>
    85d2:	45 c0       	rjmp	.+138    	; 0x865e <f_write+0x258>
				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
    85d4:	d5 01       	movw	r26, r10
    85d6:	12 96       	adiw	r26, 0x02	; 2
    85d8:	8c 91       	ld	r24, X
    85da:	12 97       	sbiw	r26, 0x02	; 2
    85dc:	10 e0       	ldi	r17, 0x00	; 0
    85de:	96 01       	movw	r18, r12
    85e0:	20 0f       	add	r18, r16
    85e2:	31 1f       	adc	r19, r17
    85e4:	90 e0       	ldi	r25, 0x00	; 0
    85e6:	82 17       	cp	r24, r18
    85e8:	93 07       	cpc	r25, r19
    85ea:	18 f4       	brcc	.+6      	; 0x85f2 <f_write+0x1ec>
					cc = fp->fs->csize - csect;
    85ec:	6c 01       	movw	r12, r24
    85ee:	c0 1a       	sub	r12, r16
    85f0:	d1 0a       	sbc	r13, r17
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    85f2:	f5 01       	movw	r30, r10
    85f4:	81 81       	ldd	r24, Z+1	; 0x01
    85f6:	b1 01       	movw	r22, r2
    85f8:	a4 01       	movw	r20, r8
    85fa:	93 01       	movw	r18, r6
    85fc:	0c 2d       	mov	r16, r12
    85fe:	0e 94 e1 53 	call	0xa7c2	; 0xa7c2 <disk_write>
    8602:	00 97       	sbiw	r24, 0x00	; 0
    8604:	09 f0       	breq	.+2      	; 0x8608 <f_write+0x202>
    8606:	43 c0       	rjmp	.+134    	; 0x868e <f_write+0x288>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
    8608:	ab 81       	ldd	r26, Y+3	; 0x03
    860a:	bc 81       	ldd	r27, Y+4	; 0x04
    860c:	ed 91       	ld	r30, X+
    860e:	fc 91       	ld	r31, X
    8610:	11 97       	sbiw	r26, 0x01	; 1
    8612:	66 a5       	ldd	r22, Z+46	; 0x2e
    8614:	77 a5       	ldd	r23, Z+47	; 0x2f
    8616:	80 a9       	ldd	r24, Z+48	; 0x30
    8618:	91 a9       	ldd	r25, Z+49	; 0x31
    861a:	66 19       	sub	r22, r6
    861c:	77 09       	sbc	r23, r7
    861e:	88 09       	sbc	r24, r8
    8620:	99 09       	sbc	r25, r9
    8622:	96 01       	movw	r18, r12
    8624:	40 e0       	ldi	r20, 0x00	; 0
    8626:	50 e0       	ldi	r21, 0x00	; 0
    8628:	62 17       	cp	r22, r18
    862a:	73 07       	cpc	r23, r19
    862c:	84 07       	cpc	r24, r20
    862e:	95 07       	cpc	r25, r21
    8630:	88 f4       	brcc	.+34     	; 0x8654 <f_write+0x24e>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    8632:	76 2f       	mov	r23, r22
    8634:	66 27       	eor	r22, r22
    8636:	77 0f       	add	r23, r23
    8638:	62 0d       	add	r22, r2
    863a:	73 1d       	adc	r23, r3
    863c:	cf 01       	movw	r24, r30
    863e:	c2 96       	adiw	r24, 0x32	; 50
    8640:	40 e0       	ldi	r20, 0x00	; 0
    8642:	52 e0       	ldi	r21, 0x02	; 2
    8644:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <mem_cpy>
					fp->fs->wflag = 0;
    8648:	ab 81       	ldd	r26, Y+3	; 0x03
    864a:	bc 81       	ldd	r27, Y+4	; 0x04
    864c:	ed 91       	ld	r30, X+
    864e:	fc 91       	ld	r31, X
    8650:	11 97       	sbiw	r26, 0x01	; 1
    8652:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    8654:	86 01       	movw	r16, r12
    8656:	10 2f       	mov	r17, r16
    8658:	00 27       	eor	r16, r16
    865a:	11 0f       	add	r17, r17
				continue;
    865c:	70 c0       	rjmp	.+224    	; 0x873e <f_write+0x338>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
    865e:	eb 81       	ldd	r30, Y+3	; 0x03
    8660:	fc 81       	ldd	r31, Y+4	; 0x04
    8662:	26 81       	ldd	r18, Z+6	; 0x06
    8664:	37 81       	ldd	r19, Z+7	; 0x07
    8666:	40 85       	ldd	r20, Z+8	; 0x08
    8668:	51 85       	ldd	r21, Z+9	; 0x09
    866a:	82 85       	ldd	r24, Z+10	; 0x0a
    866c:	93 85       	ldd	r25, Z+11	; 0x0b
    866e:	a4 85       	ldd	r26, Z+12	; 0x0c
    8670:	b5 85       	ldd	r27, Z+13	; 0x0d
    8672:	28 17       	cp	r18, r24
    8674:	39 07       	cpc	r19, r25
    8676:	4a 07       	cpc	r20, r26
    8678:	5b 07       	cpc	r21, r27
    867a:	d8 f0       	brcs	.+54     	; 0x86b2 <f_write+0x2ac>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    867c:	c5 01       	movw	r24, r10
    867e:	40 e0       	ldi	r20, 0x00	; 0
    8680:	50 e0       	ldi	r21, 0x00	; 0
    8682:	60 e0       	ldi	r22, 0x00	; 0
    8684:	70 e0       	ldi	r23, 0x00	; 0
    8686:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    868a:	00 97       	sbiw	r24, 0x00	; 0
    868c:	51 f0       	breq	.+20     	; 0x86a2 <f_write+0x29c>
    868e:	ab 81       	ldd	r26, Y+3	; 0x03
    8690:	bc 81       	ldd	r27, Y+4	; 0x04
    8692:	14 96       	adiw	r26, 0x04	; 4
    8694:	8c 91       	ld	r24, X
    8696:	14 97       	sbiw	r26, 0x04	; 4
    8698:	80 68       	ori	r24, 0x80	; 128
    869a:	14 96       	adiw	r26, 0x04	; 4
    869c:	8c 93       	st	X, r24
    869e:	14 97       	sbiw	r26, 0x04	; 4
    86a0:	27 c0       	rjmp	.+78     	; 0x86f0 <f_write+0x2ea>
				fp->fs->winsect = sect;
    86a2:	ab 81       	ldd	r26, Y+3	; 0x03
    86a4:	bc 81       	ldd	r27, Y+4	; 0x04
    86a6:	ed 91       	ld	r30, X+
    86a8:	fc 91       	ld	r31, X
    86aa:	66 a6       	std	Z+46, r6	; 0x2e
    86ac:	77 a6       	std	Z+47, r7	; 0x2f
    86ae:	80 aa       	std	Z+48, r8	; 0x30
    86b0:	91 aa       	std	Z+49, r9	; 0x31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    86b2:	eb 81       	ldd	r30, Y+3	; 0x03
    86b4:	fc 81       	ldd	r31, Y+4	; 0x04
    86b6:	66 8a       	std	Z+22, r6	; 0x16
    86b8:	77 8a       	std	Z+23, r7	; 0x17
    86ba:	80 8e       	std	Z+24, r8	; 0x18
    86bc:	91 8e       	std	Z+25, r9	; 0x19
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    86be:	ab 81       	ldd	r26, Y+3	; 0x03
    86c0:	bc 81       	ldd	r27, Y+4	; 0x04
    86c2:	16 96       	adiw	r26, 0x06	; 6
    86c4:	ad 90       	ld	r10, X+
    86c6:	bd 90       	ld	r11, X+
    86c8:	cd 90       	ld	r12, X+
    86ca:	dc 90       	ld	r13, X
    86cc:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    86ce:	56 96       	adiw	r26, 0x16	; 22
    86d0:	4d 91       	ld	r20, X+
    86d2:	5d 91       	ld	r21, X+
    86d4:	6d 91       	ld	r22, X+
    86d6:	7c 91       	ld	r23, X
    86d8:	59 97       	sbiw	r26, 0x19	; 25
    86da:	8d 91       	ld	r24, X+
    86dc:	9c 91       	ld	r25, X
    86de:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    86e2:	00 97       	sbiw	r24, 0x00	; 0
    86e4:	49 f0       	breq	.+18     	; 0x86f8 <f_write+0x2f2>
			ABORT(fp->fs, FR_DISK_ERR);
    86e6:	eb 81       	ldd	r30, Y+3	; 0x03
    86e8:	fc 81       	ldd	r31, Y+4	; 0x04
    86ea:	84 81       	ldd	r24, Z+4	; 0x04
    86ec:	80 68       	ori	r24, 0x80	; 128
    86ee:	84 83       	std	Z+4, r24	; 0x04
    86f0:	21 e0       	ldi	r18, 0x01	; 1
    86f2:	e2 2e       	mov	r14, r18
    86f4:	f1 2c       	mov	r15, r1
    86f6:	6a c0       	rjmp	.+212    	; 0x87cc <f_write+0x3c6>
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    86f8:	c5 01       	movw	r24, r10
    86fa:	91 70       	andi	r25, 0x01	; 1
    86fc:	20 e0       	ldi	r18, 0x00	; 0
    86fe:	32 e0       	ldi	r19, 0x02	; 2
    8700:	28 1b       	sub	r18, r24
    8702:	39 0b       	sbc	r19, r25
    8704:	82 01       	movw	r16, r4
    8706:	24 15       	cp	r18, r4
    8708:	35 05       	cpc	r19, r5
    870a:	08 f4       	brcc	.+2      	; 0x870e <f_write+0x308>
    870c:	89 01       	movw	r16, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    870e:	ab 81       	ldd	r26, Y+3	; 0x03
    8710:	bc 81       	ldd	r27, Y+4	; 0x04
    8712:	2d 91       	ld	r18, X+
    8714:	3c 91       	ld	r19, X
    8716:	11 97       	sbiw	r26, 0x01	; 1
    8718:	2e 5c       	subi	r18, 0xCE	; 206
    871a:	3f 4f       	sbci	r19, 0xFF	; 255
    871c:	16 96       	adiw	r26, 0x06	; 6
    871e:	8d 91       	ld	r24, X+
    8720:	9c 91       	ld	r25, X
    8722:	17 97       	sbiw	r26, 0x07	; 7
    8724:	91 70       	andi	r25, 0x01	; 1
    8726:	82 0f       	add	r24, r18
    8728:	93 1f       	adc	r25, r19
    872a:	b1 01       	movw	r22, r2
    872c:	a8 01       	movw	r20, r16
    872e:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <mem_cpy>
		fp->fs->wflag = 1;
    8732:	ab 81       	ldd	r26, Y+3	; 0x03
    8734:	bc 81       	ldd	r27, Y+4	; 0x04
    8736:	ed 91       	ld	r30, X+
    8738:	fc 91       	ld	r31, X
    873a:	b1 e0       	ldi	r27, 0x01	; 1
    873c:	b4 83       	std	Z+4, r27	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    873e:	20 0e       	add	r2, r16
    8740:	31 1e       	adc	r3, r17
    8742:	98 01       	movw	r18, r16
    8744:	40 e0       	ldi	r20, 0x00	; 0
    8746:	50 e0       	ldi	r21, 0x00	; 0
    8748:	eb 81       	ldd	r30, Y+3	; 0x03
    874a:	fc 81       	ldd	r31, Y+4	; 0x04
    874c:	86 81       	ldd	r24, Z+6	; 0x06
    874e:	97 81       	ldd	r25, Z+7	; 0x07
    8750:	a0 85       	ldd	r26, Z+8	; 0x08
    8752:	b1 85       	ldd	r27, Z+9	; 0x09
    8754:	82 0f       	add	r24, r18
    8756:	93 1f       	adc	r25, r19
    8758:	a4 1f       	adc	r26, r20
    875a:	b5 1f       	adc	r27, r21
    875c:	86 83       	std	Z+6, r24	; 0x06
    875e:	97 83       	std	Z+7, r25	; 0x07
    8760:	a0 87       	std	Z+8, r26	; 0x08
    8762:	b1 87       	std	Z+9, r27	; 0x09
    8764:	a9 81       	ldd	r26, Y+1	; 0x01
    8766:	ba 81       	ldd	r27, Y+2	; 0x02
    8768:	8d 91       	ld	r24, X+
    876a:	9c 91       	ld	r25, X
    876c:	11 97       	sbiw	r26, 0x01	; 1
    876e:	80 0f       	add	r24, r16
    8770:	91 1f       	adc	r25, r17
    8772:	11 96       	adiw	r26, 0x01	; 1
    8774:	9c 93       	st	X, r25
    8776:	8e 93       	st	-X, r24
    8778:	40 1a       	sub	r4, r16
    877a:	51 0a       	sbc	r5, r17
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    877c:	41 14       	cp	r4, r1
    877e:	51 04       	cpc	r5, r1
    8780:	09 f0       	breq	.+2      	; 0x8784 <f_write+0x37e>
    8782:	7c ce       	rjmp	.-776    	; 0x847c <f_write+0x76>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    8784:	eb 81       	ldd	r30, Y+3	; 0x03
    8786:	fc 81       	ldd	r31, Y+4	; 0x04
    8788:	86 81       	ldd	r24, Z+6	; 0x06
    878a:	97 81       	ldd	r25, Z+7	; 0x07
    878c:	a0 85       	ldd	r26, Z+8	; 0x08
    878e:	b1 85       	ldd	r27, Z+9	; 0x09
    8790:	22 85       	ldd	r18, Z+10	; 0x0a
    8792:	33 85       	ldd	r19, Z+11	; 0x0b
    8794:	44 85       	ldd	r20, Z+12	; 0x0c
    8796:	55 85       	ldd	r21, Z+13	; 0x0d
    8798:	28 17       	cp	r18, r24
    879a:	39 07       	cpc	r19, r25
    879c:	4a 07       	cpc	r20, r26
    879e:	5b 07       	cpc	r21, r27
    87a0:	20 f4       	brcc	.+8      	; 0x87aa <f_write+0x3a4>
    87a2:	82 87       	std	Z+10, r24	; 0x0a
    87a4:	93 87       	std	Z+11, r25	; 0x0b
    87a6:	a4 87       	std	Z+12, r26	; 0x0c
    87a8:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    87aa:	ab 81       	ldd	r26, Y+3	; 0x03
    87ac:	bc 81       	ldd	r27, Y+4	; 0x04
    87ae:	14 96       	adiw	r26, 0x04	; 4
    87b0:	8c 91       	ld	r24, X
    87b2:	14 97       	sbiw	r26, 0x04	; 4
    87b4:	80 62       	ori	r24, 0x20	; 32
    87b6:	14 96       	adiw	r26, 0x04	; 4
    87b8:	8c 93       	st	X, r24
    87ba:	14 97       	sbiw	r26, 0x04	; 4

	LEAVE_FF(fp->fs, FR_OK);
    87bc:	07 c0       	rjmp	.+14     	; 0x87cc <f_write+0x3c6>
	*bw = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)						/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    87be:	92 e0       	ldi	r25, 0x02	; 2
    87c0:	e9 2e       	mov	r14, r25
    87c2:	f1 2c       	mov	r15, r1
    87c4:	03 c0       	rjmp	.+6      	; 0x87cc <f_write+0x3c6>
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    87c6:	87 e0       	ldi	r24, 0x07	; 7
    87c8:	e8 2e       	mov	r14, r24
    87ca:	f1 2c       	mov	r15, r1

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    87cc:	c7 01       	movw	r24, r14
    87ce:	24 96       	adiw	r28, 0x04	; 4
    87d0:	e2 e1       	ldi	r30, 0x12	; 18
    87d2:	0c 94 ee 5c 	jmp	0xb9dc	; 0xb9dc <__epilogue_restores__>

000087d6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    87d6:	0f 93       	push	r16
    87d8:	1f 93       	push	r17
    87da:	cf 93       	push	r28
    87dc:	df 93       	push	r29
    87de:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    87e0:	6a 81       	ldd	r22, Y+2	; 0x02
    87e2:	7b 81       	ldd	r23, Y+3	; 0x03
    87e4:	88 81       	ld	r24, Y
    87e6:	99 81       	ldd	r25, Y+1	; 0x01
    87e8:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <validate>
    87ec:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    87ee:	00 97       	sbiw	r24, 0x00	; 0
    87f0:	b1 f5       	brne	.+108    	; 0x885e <f_sync+0x88>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    87f2:	8c 81       	ldd	r24, Y+4	; 0x04
    87f4:	85 ff       	sbrs	r24, 5
    87f6:	33 c0       	rjmp	.+102    	; 0x885e <f_sync+0x88>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    87f8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    87fa:	5b 8d       	ldd	r21, Y+27	; 0x1b
    87fc:	6c 8d       	ldd	r22, Y+28	; 0x1c
    87fe:	7d 8d       	ldd	r23, Y+29	; 0x1d
    8800:	88 81       	ld	r24, Y
    8802:	99 81       	ldd	r25, Y+1	; 0x01
    8804:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    8808:	9c 01       	movw	r18, r24
			if (res == FR_OK) {
    880a:	00 97       	sbiw	r24, 0x00	; 0
    880c:	41 f5       	brne	.+80     	; 0x885e <f_sync+0x88>
				dir = fp->dir_ptr;
    880e:	0e 8d       	ldd	r16, Y+30	; 0x1e
    8810:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    8812:	f8 01       	movw	r30, r16
    8814:	83 85       	ldd	r24, Z+11	; 0x0b
    8816:	80 62       	ori	r24, 0x20	; 32
    8818:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    881a:	8a 85       	ldd	r24, Y+10	; 0x0a
    881c:	9b 85       	ldd	r25, Y+11	; 0x0b
    881e:	ac 85       	ldd	r26, Y+12	; 0x0c
    8820:	bd 85       	ldd	r27, Y+13	; 0x0d
    8822:	84 8f       	std	Z+28, r24	; 0x1c
    8824:	95 8f       	std	Z+29, r25	; 0x1d
    8826:	a6 8f       	std	Z+30, r26	; 0x1e
    8828:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_CLUST(dir, fp->org_clust);				/* Update start cluster */
    882a:	8e 85       	ldd	r24, Y+14	; 0x0e
    882c:	9f 85       	ldd	r25, Y+15	; 0x0f
    882e:	a8 89       	ldd	r26, Y+16	; 0x10
    8830:	b9 89       	ldd	r27, Y+17	; 0x11
    8832:	93 8f       	std	Z+27, r25	; 0x1b
    8834:	82 8f       	std	Z+26, r24	; 0x1a
    8836:	b5 8b       	std	Z+21, r27	; 0x15
    8838:	a4 8b       	std	Z+20, r26	; 0x14
				tim = get_fattime();						/* Update updated time */
    883a:	0e 94 61 23 	call	0x46c2	; 0x46c2 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    883e:	f8 01       	movw	r30, r16
    8840:	66 8b       	std	Z+22, r22	; 0x16
    8842:	77 8b       	std	Z+23, r23	; 0x17
    8844:	80 8f       	std	Z+24, r24	; 0x18
    8846:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    8848:	8c 81       	ldd	r24, Y+4	; 0x04
    884a:	8f 7d       	andi	r24, 0xDF	; 223
    884c:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    884e:	88 81       	ld	r24, Y
    8850:	99 81       	ldd	r25, Y+1	; 0x01
    8852:	21 e0       	ldi	r18, 0x01	; 1
    8854:	fc 01       	movw	r30, r24
    8856:	24 83       	std	Z+4, r18	; 0x04
				res = sync(fp->fs);
    8858:	0e 94 d6 32 	call	0x65ac	; 0x65ac <sync>
    885c:	9c 01       	movw	r18, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    885e:	c9 01       	movw	r24, r18
    8860:	df 91       	pop	r29
    8862:	cf 91       	pop	r28
    8864:	1f 91       	pop	r17
    8866:	0f 91       	pop	r16
    8868:	08 95       	ret

0000886a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    886a:	cf 93       	push	r28
    886c:	df 93       	push	r29
    886e:	ec 01       	movw	r28, r24
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    8870:	0e 94 eb 43 	call	0x87d6	; 0x87d6 <f_sync>
    8874:	9c 01       	movw	r18, r24
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    8876:	00 97       	sbiw	r24, 0x00	; 0
    8878:	11 f4       	brne	.+4      	; 0x887e <f_close+0x14>
    887a:	19 82       	std	Y+1, r1	; 0x01
    887c:	18 82       	st	Y, r1
	return res;
#endif
}
    887e:	c9 01       	movw	r24, r18
    8880:	df 91       	pop	r29
    8882:	cf 91       	pop	r28
    8884:	08 95       	ret

00008886 <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
    8886:	82 30       	cpi	r24, 0x02	; 2
    8888:	28 f4       	brcc	.+10     	; 0x8894 <f_chdrive+0xe>

	CurrVol = drv;
    888a:	80 93 90 02 	sts	0x0290, r24

	return FR_OK;
    888e:	20 e0       	ldi	r18, 0x00	; 0
    8890:	30 e0       	ldi	r19, 0x00	; 0
    8892:	02 c0       	rjmp	.+4      	; 0x8898 <f_chdrive+0x12>

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
    8894:	2b e0       	ldi	r18, 0x0B	; 11
    8896:	30 e0       	ldi	r19, 0x00	; 0

	CurrVol = drv;

	return FR_OK;
}
    8898:	c9 01       	movw	r24, r18
    889a:	08 95       	ret

0000889c <f_chdir>:


FRESULT f_chdir (
	const TCHAR *path	/* Pointer to the directory path */
)
{
    889c:	a8 e2       	ldi	r26, 0x28	; 40
    889e:	b0 e0       	ldi	r27, 0x00	; 0
    88a0:	e4 e5       	ldi	r30, 0x54	; 84
    88a2:	f4 e4       	ldi	r31, 0x44	; 68
    88a4:	0c 94 e0 5c 	jmp	0xb9c0	; 0xb9c0 <__prologue_saves__+0x1c>
    88a8:	98 a7       	std	Y+40, r25	; 0x28
    88aa:	8f a3       	std	Y+39, r24	; 0x27
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    88ac:	8e 01       	movw	r16, r28
    88ae:	03 5f       	subi	r16, 0xF3	; 243
    88b0:	1f 4f       	sbci	r17, 0xFF	; 255
    88b2:	ce 01       	movw	r24, r28
    88b4:	87 96       	adiw	r24, 0x27	; 39
    88b6:	b8 01       	movw	r22, r16
    88b8:	40 e0       	ldi	r20, 0x00	; 0
    88ba:	0e 94 04 30 	call	0x6008	; 0x6008 <chk_mounted>
    88be:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    88c0:	00 97       	sbiw	r24, 0x00	; 0
    88c2:	09 f0       	breq	.+2      	; 0x88c6 <f_chdir+0x2a>
    88c4:	41 c0       	rjmp	.+130    	; 0x8948 <f_chdir+0xac>
		INIT_BUF(dj);
    88c6:	ce 01       	movw	r24, r28
    88c8:	01 96       	adiw	r24, 0x01	; 1
    88ca:	9a a3       	std	Y+34, r25	; 0x22
    88cc:	89 a3       	std	Y+33, r24	; 0x21
    88ce:	8e e8       	ldi	r24, 0x8E	; 142
    88d0:	91 e0       	ldi	r25, 0x01	; 1
    88d2:	9c a3       	std	Y+36, r25	; 0x24
    88d4:	8b a3       	std	Y+35, r24	; 0x23
		res = follow_path(&dj, path);		/* Follow the path */
    88d6:	6f a1       	ldd	r22, Y+39	; 0x27
    88d8:	78 a5       	ldd	r23, Y+40	; 0x28
    88da:	c8 01       	movw	r24, r16
    88dc:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <follow_path>
    88e0:	9c 01       	movw	r18, r24
		FREE_BUF();
		if (res == FR_OK) {					/* Follow completed */
    88e2:	00 97       	sbiw	r24, 0x00	; 0
    88e4:	61 f5       	brne	.+88     	; 0x893e <f_chdir+0xa2>
			if (!dj.dir) {
    88e6:	4f 8d       	ldd	r20, Y+31	; 0x1f
    88e8:	58 a1       	ldd	r21, Y+32	; 0x20
    88ea:	41 15       	cp	r20, r1
    88ec:	51 05       	cpc	r21, r1
    88ee:	39 f4       	brne	.+14     	; 0x88fe <f_chdir+0x62>
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
    88f0:	ed 85       	ldd	r30, Y+13	; 0x0d
    88f2:	fe 85       	ldd	r31, Y+14	; 0x0e
    88f4:	8b 89       	ldd	r24, Y+19	; 0x13
    88f6:	9c 89       	ldd	r25, Y+20	; 0x14
    88f8:	ad 89       	ldd	r26, Y+21	; 0x15
    88fa:	be 89       	ldd	r27, Y+22	; 0x16
    88fc:	1b c0       	rjmp	.+54     	; 0x8934 <f_chdir+0x98>
			} else {
				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
    88fe:	da 01       	movw	r26, r20
    8900:	1b 96       	adiw	r26, 0x0b	; 11
    8902:	8c 91       	ld	r24, X
    8904:	1b 97       	sbiw	r26, 0x0b	; 11
    8906:	84 ff       	sbrs	r24, 4
    8908:	1d c0       	rjmp	.+58     	; 0x8944 <f_chdir+0xa8>
					dj.fs->cdir = LD_CLUST(dj.dir);
    890a:	0d 85       	ldd	r16, Y+13	; 0x0d
    890c:	1e 85       	ldd	r17, Y+14	; 0x0e
    890e:	54 96       	adiw	r26, 0x14	; 20
    8910:	8d 91       	ld	r24, X+
    8912:	9c 91       	ld	r25, X
    8914:	55 97       	sbiw	r26, 0x15	; 21
    8916:	a0 e0       	ldi	r26, 0x00	; 0
    8918:	b0 e0       	ldi	r27, 0x00	; 0
    891a:	dc 01       	movw	r26, r24
    891c:	99 27       	eor	r25, r25
    891e:	88 27       	eor	r24, r24
    8920:	fa 01       	movw	r30, r20
    8922:	42 8d       	ldd	r20, Z+26	; 0x1a
    8924:	53 8d       	ldd	r21, Z+27	; 0x1b
    8926:	60 e0       	ldi	r22, 0x00	; 0
    8928:	70 e0       	ldi	r23, 0x00	; 0
    892a:	84 2b       	or	r24, r20
    892c:	95 2b       	or	r25, r21
    892e:	a6 2b       	or	r26, r22
    8930:	b7 2b       	or	r27, r23
    8932:	f8 01       	movw	r30, r16
    8934:	86 8b       	std	Z+22, r24	; 0x16
    8936:	97 8b       	std	Z+23, r25	; 0x17
    8938:	a0 8f       	std	Z+24, r26	; 0x18
    893a:	b1 8f       	std	Z+25, r27	; 0x19
    893c:	05 c0       	rjmp	.+10     	; 0x8948 <f_chdir+0xac>
				else
					res = FR_NO_PATH;		/* Reached but a file */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    893e:	84 30       	cpi	r24, 0x04	; 4
    8940:	91 05       	cpc	r25, r1
    8942:	11 f4       	brne	.+4      	; 0x8948 <f_chdir+0xac>
    8944:	25 e0       	ldi	r18, 0x05	; 5
    8946:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    8948:	c9 01       	movw	r24, r18
    894a:	a8 96       	adiw	r28, 0x28	; 40
    894c:	e4 e0       	ldi	r30, 0x04	; 4
    894e:	0c 94 fc 5c 	jmp	0xb9f8	; 0xb9f8 <__epilogue_restores__+0x1c>

00008952 <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR *path,	/* Pointer to the directory path */
	UINT sz_path	/* Size of path */
)
{
    8952:	a2 e4       	ldi	r26, 0x42	; 66
    8954:	b0 e0       	ldi	r27, 0x00	; 0
    8956:	ef ea       	ldi	r30, 0xAF	; 175
    8958:	f4 e4       	ldi	r31, 0x44	; 68
    895a:	0c 94 d2 5c 	jmp	0xb9a4	; 0xb9a4 <__prologue_saves__>
    895e:	f1 e4       	ldi	r31, 0x41	; 65
    8960:	cf 2e       	mov	r12, r31
    8962:	d1 2c       	mov	r13, r1
    8964:	cc 0e       	add	r12, r28
    8966:	dd 1e       	adc	r13, r29
    8968:	d6 01       	movw	r26, r12
    896a:	8d 93       	st	X+, r24
    896c:	9c 93       	st	X, r25
    896e:	2b 01       	movw	r4, r22
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMEBUF;


	*path = 0;
    8970:	fc 01       	movw	r30, r24
    8972:	10 82       	st	Z, r1
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
    8974:	ed e0       	ldi	r30, 0x0D	; 13
    8976:	ae 2e       	mov	r10, r30
    8978:	b1 2c       	mov	r11, r1
    897a:	ac 0e       	add	r10, r28
    897c:	bd 1e       	adc	r11, r29
    897e:	c6 01       	movw	r24, r12
    8980:	b5 01       	movw	r22, r10
    8982:	40 e0       	ldi	r20, 0x00	; 0
    8984:	0e 94 04 30 	call	0x6008	; 0x6008 <chk_mounted>
    8988:	7c 01       	movw	r14, r24
	if (res == FR_OK) {
    898a:	00 97       	sbiw	r24, 0x00	; 0
    898c:	09 f0       	breq	.+2      	; 0x8990 <f_getcwd+0x3e>
    898e:	fa c0       	rjmp	.+500    	; 0x8b84 <f_getcwd+0x232>
		INIT_BUF(dj);
    8990:	ce 01       	movw	r24, r28
    8992:	01 96       	adiw	r24, 0x01	; 1
    8994:	9a a3       	std	Y+34, r25	; 0x22
    8996:	89 a3       	std	Y+33, r24	; 0x21
    8998:	8e e8       	ldi	r24, 0x8E	; 142
    899a:	91 e0       	ldi	r25, 0x01	; 1
    899c:	9c a3       	std	Y+36, r25	; 0x24
    899e:	8b a3       	std	Y+35, r24	; 0x23
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
    89a0:	ed 85       	ldd	r30, Y+13	; 0x0d
    89a2:	fe 85       	ldd	r31, Y+14	; 0x0e
    89a4:	86 89       	ldd	r24, Z+22	; 0x16
    89a6:	97 89       	ldd	r25, Z+23	; 0x17
    89a8:	a0 8d       	ldd	r26, Z+24	; 0x18
    89aa:	b1 8d       	ldd	r27, Z+25	; 0x19
    89ac:	8b 8b       	std	Y+19, r24	; 0x13
    89ae:	9c 8b       	std	Y+20, r25	; 0x14
    89b0:	ad 8b       	std	Y+21, r26	; 0x15
    89b2:	be 8b       	std	Y+22, r27	; 0x16
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    89b4:	82 01       	movw	r16, r4
			res = dir_sdi(&dj, 1);			/* Get parent dir */
    89b6:	c5 01       	movw	r24, r10
    89b8:	ba 2c       	mov	r11, r10
    89ba:	a9 2e       	mov	r10, r25
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
			if (res != FR_OK) break;
#if _USE_LFN
			fno.lfname = path;
			fno.lfsize = i;
    89bc:	7f e3       	ldi	r23, 0x3F	; 63
    89be:	27 2e       	mov	r2, r23
    89c0:	31 2c       	mov	r3, r1
    89c2:	2c 0e       	add	r2, r28
    89c4:	3d 1e       	adc	r3, r29
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    89c6:	9b c0       	rjmp	.+310    	; 0x8afe <f_getcwd+0x1ac>
			res = dir_sdi(&dj, 1);			/* Get parent dir */
    89c8:	8b 2d       	mov	r24, r11
    89ca:	9a 2d       	mov	r25, r10
    89cc:	61 e0       	ldi	r22, 0x01	; 1
    89ce:	70 e0       	ldi	r23, 0x00	; 0
    89d0:	0e 94 13 35 	call	0x6a26	; 0x6a26 <dir_sdi>
			if (res != FR_OK) break;
    89d4:	00 97       	sbiw	r24, 0x00	; 0
    89d6:	09 f0       	breq	.+2      	; 0x89da <f_getcwd+0x88>
    89d8:	9d c0       	rjmp	.+314    	; 0x8b14 <f_getcwd+0x1c2>
			res = dir_read(&dj);
    89da:	8b 2d       	mov	r24, r11
    89dc:	9a 2d       	mov	r25, r10
    89de:	0e 94 06 3c 	call	0x780c	; 0x780c <dir_read>
			if (res != FR_OK) break;
    89e2:	00 97       	sbiw	r24, 0x00	; 0
    89e4:	09 f0       	breq	.+2      	; 0x89e8 <f_getcwd+0x96>
    89e6:	96 c0       	rjmp	.+300    	; 0x8b14 <f_getcwd+0x1c2>
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
    89e8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    89ea:	f8 a1       	ldd	r31, Y+32	; 0x20
    89ec:	24 89       	ldd	r18, Z+20	; 0x14
    89ee:	35 89       	ldd	r19, Z+21	; 0x15
    89f0:	40 e0       	ldi	r20, 0x00	; 0
    89f2:	50 e0       	ldi	r21, 0x00	; 0
    89f4:	a9 01       	movw	r20, r18
    89f6:	33 27       	eor	r19, r19
    89f8:	22 27       	eor	r18, r18
    89fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    89fc:	93 8d       	ldd	r25, Z+27	; 0x1b
    89fe:	a0 e0       	ldi	r26, 0x00	; 0
    8a00:	b0 e0       	ldi	r27, 0x00	; 0
    8a02:	28 2b       	or	r18, r24
    8a04:	39 2b       	or	r19, r25
    8a06:	4a 2b       	or	r20, r26
    8a08:	5b 2b       	or	r21, r27
    8a0a:	2b 8b       	std	Y+19, r18	; 0x13
    8a0c:	3c 8b       	std	Y+20, r19	; 0x14
    8a0e:	4d 8b       	std	Y+21, r20	; 0x15
    8a10:	5e 8b       	std	Y+22, r21	; 0x16
			res = dir_sdi(&dj, 0);
    8a12:	8b 2d       	mov	r24, r11
    8a14:	9a 2d       	mov	r25, r10
    8a16:	60 e0       	ldi	r22, 0x00	; 0
    8a18:	70 e0       	ldi	r23, 0x00	; 0
    8a1a:	0e 94 13 35 	call	0x6a26	; 0x6a26 <dir_sdi>
			if (res != FR_OK) break;
    8a1e:	00 97       	sbiw	r24, 0x00	; 0
    8a20:	09 f0       	breq	.+2      	; 0x8a24 <f_getcwd+0xd2>
    8a22:	78 c0       	rjmp	.+240    	; 0x8b14 <f_getcwd+0x1c2>
			do {							/* Find the entry links to the child dir */
				res = dir_read(&dj);
    8a24:	8b 2d       	mov	r24, r11
    8a26:	9a 2d       	mov	r25, r10
    8a28:	0e 94 06 3c 	call	0x780c	; 0x780c <dir_read>
				if (res != FR_OK) break;
    8a2c:	00 97       	sbiw	r24, 0x00	; 0
    8a2e:	f1 f4       	brne	.+60     	; 0x8a6c <f_getcwd+0x11a>
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
    8a30:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8a32:	f8 a1       	ldd	r31, Y+32	; 0x20
    8a34:	84 89       	ldd	r24, Z+20	; 0x14
    8a36:	95 89       	ldd	r25, Z+21	; 0x15
    8a38:	a0 e0       	ldi	r26, 0x00	; 0
    8a3a:	b0 e0       	ldi	r27, 0x00	; 0
    8a3c:	dc 01       	movw	r26, r24
    8a3e:	99 27       	eor	r25, r25
    8a40:	88 27       	eor	r24, r24
    8a42:	22 8d       	ldd	r18, Z+26	; 0x1a
    8a44:	33 8d       	ldd	r19, Z+27	; 0x1b
    8a46:	40 e0       	ldi	r20, 0x00	; 0
    8a48:	50 e0       	ldi	r21, 0x00	; 0
    8a4a:	82 2b       	or	r24, r18
    8a4c:	93 2b       	or	r25, r19
    8a4e:	a4 2b       	or	r26, r20
    8a50:	b5 2b       	or	r27, r21
    8a52:	68 16       	cp	r6, r24
    8a54:	79 06       	cpc	r7, r25
    8a56:	8a 06       	cpc	r8, r26
    8a58:	9b 06       	cpc	r9, r27
    8a5a:	69 f0       	breq	.+26     	; 0x8a76 <f_getcwd+0x124>
				res = dir_next(&dj, 0);	
    8a5c:	8b 2d       	mov	r24, r11
    8a5e:	9a 2d       	mov	r25, r10
    8a60:	60 e0       	ldi	r22, 0x00	; 0
    8a62:	70 e0       	ldi	r23, 0x00	; 0
    8a64:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <dir_next>
			} while (res == FR_OK);
    8a68:	00 97       	sbiw	r24, 0x00	; 0
    8a6a:	e1 f2       	breq	.-72     	; 0x8a24 <f_getcwd+0xd2>
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    8a6c:	84 30       	cpi	r24, 0x04	; 4
    8a6e:	91 05       	cpc	r25, r1
    8a70:	09 f0       	breq	.+2      	; 0x8a74 <f_getcwd+0x122>
    8a72:	50 c0       	rjmp	.+160    	; 0x8b14 <f_getcwd+0x1c2>
    8a74:	51 c0       	rjmp	.+162    	; 0x8b18 <f_getcwd+0x1c6>
			if (res != FR_OK) break;
#if _USE_LFN
			fno.lfname = path;
    8a76:	d6 01       	movw	r26, r12
    8a78:	8d 91       	ld	r24, X+
    8a7a:	9c 91       	ld	r25, X
    8a7c:	9e af       	std	Y+62, r25	; 0x3e
    8a7e:	8d af       	std	Y+61, r24	; 0x3d
			fno.lfsize = i;
    8a80:	f1 01       	movw	r30, r2
    8a82:	11 83       	std	Z+1, r17	; 0x01
    8a84:	00 83       	st	Z, r16
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
    8a86:	8b 2d       	mov	r24, r11
    8a88:	9a 2d       	mov	r25, r10
    8a8a:	be 01       	movw	r22, r28
    8a8c:	69 5d       	subi	r22, 0xD9	; 217
    8a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    8a90:	0e 94 47 33 	call	0x668e	; 0x668e <get_fileinfo>
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
    8a94:	f6 01       	movw	r30, r12
    8a96:	a0 81       	ld	r26, Z
    8a98:	b1 81       	ldd	r27, Z+1	; 0x01
    8a9a:	8c 91       	ld	r24, X
    8a9c:	88 23       	and	r24, r24
    8a9e:	11 f4       	brne	.+4      	; 0x8aa4 <f_getcwd+0x152>
#if _USE_LFN
			fno.lfname = path;
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
    8aa0:	de 01       	movw	r26, r28
    8aa2:	d0 96       	adiw	r26, 0x30	; 48
			if (_USE_LFN && *path) tp = path;
    8aa4:	fd 01       	movw	r30, r26
			for (n = 0; tp[n]; n++) ;
    8aa6:	80 e0       	ldi	r24, 0x00	; 0
    8aa8:	90 e0       	ldi	r25, 0x00	; 0
    8aaa:	01 c0       	rjmp	.+2      	; 0x8aae <f_getcwd+0x15c>
    8aac:	01 96       	adiw	r24, 0x01	; 1
    8aae:	21 91       	ld	r18, Z+
    8ab0:	22 23       	and	r18, r18
    8ab2:	e1 f7       	brne	.-8      	; 0x8aac <f_getcwd+0x15a>
    8ab4:	ac 01       	movw	r20, r24
			if (i < n + 3) {
    8ab6:	9c 01       	movw	r18, r24
    8ab8:	2d 5f       	subi	r18, 0xFD	; 253
    8aba:	3f 4f       	sbci	r19, 0xFF	; 255
    8abc:	02 17       	cp	r16, r18
    8abe:	13 07       	cpc	r17, r19
    8ac0:	78 f1       	brcs	.+94     	; 0x8b20 <f_getcwd+0x1ce>
	LEAVE_FF(dj.fs, res);
}


#if _FS_RPATH >= 2
FRESULT f_getcwd (
    8ac2:	3d 01       	movw	r6, r26
    8ac4:	68 0e       	add	r6, r24
    8ac6:	79 1e       	adc	r7, r25
    8ac8:	98 01       	movw	r18, r16
    8aca:	0c c0       	rjmp	.+24     	; 0x8ae4 <f_getcwd+0x192>
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
    8acc:	21 50       	subi	r18, 0x01	; 1
    8ace:	30 40       	sbci	r19, 0x00	; 0
    8ad0:	01 97       	sbiw	r24, 0x01	; 1
    8ad2:	d6 01       	movw	r26, r12
    8ad4:	ed 91       	ld	r30, X+
    8ad6:	fc 91       	ld	r31, X
    8ad8:	e2 0f       	add	r30, r18
    8ada:	f3 1f       	adc	r31, r19
    8adc:	d3 01       	movw	r26, r6
    8ade:	6e 91       	ld	r22, -X
    8ae0:	3d 01       	movw	r6, r26
    8ae2:	60 83       	st	Z, r22
    8ae4:	00 97       	sbiw	r24, 0x00	; 0
    8ae6:	91 f7       	brne	.-28     	; 0x8acc <f_getcwd+0x17a>
    8ae8:	40 95       	com	r20
    8aea:	50 95       	com	r21
			path[--i] = '/';
    8aec:	04 0f       	add	r16, r20
    8aee:	15 1f       	adc	r17, r21
    8af0:	d6 01       	movw	r26, r12
    8af2:	ed 91       	ld	r30, X+
    8af4:	fc 91       	ld	r31, X
    8af6:	e0 0f       	add	r30, r16
    8af8:	f1 1f       	adc	r31, r17
    8afa:	bf e2       	ldi	r27, 0x2F	; 47
    8afc:	b0 83       	st	Z, r27
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    8afe:	6b 88       	ldd	r6, Y+19	; 0x13
    8b00:	7c 88       	ldd	r7, Y+20	; 0x14
    8b02:	8d 88       	ldd	r8, Y+21	; 0x15
    8b04:	9e 88       	ldd	r9, Y+22	; 0x16
    8b06:	61 14       	cp	r6, r1
    8b08:	71 04       	cpc	r7, r1
    8b0a:	81 04       	cpc	r8, r1
    8b0c:	91 04       	cpc	r9, r1
    8b0e:	09 f0       	breq	.+2      	; 0x8b12 <f_getcwd+0x1c0>
    8b10:	5b cf       	rjmp	.-330    	; 0x89c8 <f_getcwd+0x76>
    8b12:	09 c0       	rjmp	.+18     	; 0x8b26 <f_getcwd+0x1d4>
			res = dir_sdi(&dj, 1);			/* Get parent dir */
			if (res != FR_OK) break;
			res = dir_read(&dj);
			if (res != FR_OK) break;
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
			res = dir_sdi(&dj, 0);
    8b14:	7c 01       	movw	r14, r24
    8b16:	07 c0       	rjmp	.+14     	; 0x8b26 <f_getcwd+0x1d4>
				res = dir_read(&dj);
				if (res != FR_OK) break;
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    8b18:	f2 e0       	ldi	r31, 0x02	; 2
    8b1a:	ef 2e       	mov	r14, r31
    8b1c:	f1 2c       	mov	r15, r1
    8b1e:	03 c0       	rjmp	.+6      	; 0x8b26 <f_getcwd+0x1d4>
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
    8b20:	e1 e1       	ldi	r30, 0x11	; 17
    8b22:	ee 2e       	mov	r14, r30
    8b24:	f1 2c       	mov	r15, r1
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    8b26:	ce 01       	movw	r24, r28
    8b28:	8f 5b       	subi	r24, 0xBF	; 191
    8b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    8b2c:	dc 01       	movw	r26, r24
    8b2e:	ed 91       	ld	r30, X+
    8b30:	fc 91       	ld	r31, X
    8b32:	11 97       	sbiw	r26, 0x01	; 1
		if (res == FR_OK) {
    8b34:	e1 14       	cp	r14, r1
    8b36:	f1 04       	cpc	r15, r1
    8b38:	21 f5       	brne	.+72     	; 0x8b82 <f_getcwd+0x230>
			*tp++ = '0' + CurrVol;			/* Put drive number */
    8b3a:	20 91 90 02 	lds	r18, 0x0290
    8b3e:	20 5d       	subi	r18, 0xD0	; 208
    8b40:	df 01       	movw	r26, r30
    8b42:	2d 93       	st	X+, r18
			*tp++ = ':';
    8b44:	2a e3       	ldi	r18, 0x3A	; 58
    8b46:	21 83       	std	Z+1, r18	; 0x01
    8b48:	9d 01       	movw	r18, r26
    8b4a:	2f 5f       	subi	r18, 0xFF	; 255
    8b4c:	3f 4f       	sbci	r19, 0xFF	; 255
			if (i == sz_path) {				/* Root-dir */
    8b4e:	04 15       	cp	r16, r4
    8b50:	15 05       	cpc	r17, r5
    8b52:	39 f4       	brne	.+14     	; 0x8b62 <f_getcwd+0x210>
				*tp++ = '/';
    8b54:	8f e2       	ldi	r24, 0x2F	; 47
    8b56:	11 96       	adiw	r26, 0x01	; 1
    8b58:	8c 93       	st	X, r24
    8b5a:	11 97       	sbiw	r26, 0x01	; 1
    8b5c:	f9 01       	movw	r30, r18
    8b5e:	31 96       	adiw	r30, 0x01	; 1
    8b60:	10 c0       	rjmp	.+32     	; 0x8b82 <f_getcwd+0x230>
	LEAVE_FF(dj.fs, res);
}


#if _FS_RPATH >= 2
FRESULT f_getcwd (
    8b62:	df 01       	movw	r26, r30
    8b64:	12 96       	adiw	r26, 0x02	; 2
			*tp++ = ':';
			if (i == sz_path) {				/* Root-dir */
				*tp++ = '/';
			} else {						/* Sub-dir */
				do		/* Add stacked path str */
					*tp++ = path[i++];
    8b66:	fc 01       	movw	r30, r24
    8b68:	20 81       	ld	r18, Z
    8b6a:	31 81       	ldd	r19, Z+1	; 0x01
    8b6c:	20 0f       	add	r18, r16
    8b6e:	31 1f       	adc	r19, r17
    8b70:	f9 01       	movw	r30, r18
    8b72:	20 81       	ld	r18, Z
    8b74:	2d 93       	st	X+, r18
    8b76:	fd 01       	movw	r30, r26
    8b78:	0f 5f       	subi	r16, 0xFF	; 255
    8b7a:	1f 4f       	sbci	r17, 0xFF	; 255
				while (i < sz_path);
    8b7c:	04 15       	cp	r16, r4
    8b7e:	15 05       	cpc	r17, r5
    8b80:	90 f3       	brcs	.-28     	; 0x8b66 <f_getcwd+0x214>
			}
		}
		*tp = 0;
    8b82:	10 82       	st	Z, r1
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    8b84:	c7 01       	movw	r24, r14
    8b86:	ce 5b       	subi	r28, 0xBE	; 190
    8b88:	df 4f       	sbci	r29, 0xFF	; 255
    8b8a:	e2 e1       	ldi	r30, 0x12	; 18
    8b8c:	0c 94 ee 5c 	jmp	0xb9dc	; 0xb9dc <__epilogue_restores__>

00008b90 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    8b90:	a6 e0       	ldi	r26, 0x06	; 6
    8b92:	b0 e0       	ldi	r27, 0x00	; 0
    8b94:	ee ec       	ldi	r30, 0xCE	; 206
    8b96:	f5 e4       	ldi	r31, 0x45	; 69
    8b98:	0c 94 d2 5c 	jmp	0xb9a4	; 0xb9a4 <__prologue_saves__>
    8b9c:	9e 83       	std	Y+6, r25	; 0x06
    8b9e:	8d 83       	std	Y+5, r24	; 0x05
    8ba0:	7a 01       	movw	r14, r20
    8ba2:	8b 01       	movw	r16, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    8ba4:	dc 01       	movw	r26, r24
    8ba6:	12 96       	adiw	r26, 0x02	; 2
    8ba8:	6d 91       	ld	r22, X+
    8baa:	7c 91       	ld	r23, X
    8bac:	13 97       	sbiw	r26, 0x03	; 3
    8bae:	8d 91       	ld	r24, X+
    8bb0:	9c 91       	ld	r25, X
    8bb2:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <validate>
    8bb6:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    8bb8:	00 97       	sbiw	r24, 0x00	; 0
    8bba:	09 f0       	breq	.+2      	; 0x8bbe <f_lseek+0x2e>
    8bbc:	86 c1       	rjmp	.+780    	; 0x8eca <f_lseek+0x33a>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    8bbe:	ed 81       	ldd	r30, Y+5	; 0x05
    8bc0:	fe 81       	ldd	r31, Y+6	; 0x06
    8bc2:	24 81       	ldd	r18, Z+4	; 0x04
    8bc4:	27 fd       	sbrc	r18, 7
    8bc6:	7e c1       	rjmp	.+764    	; 0x8ec4 <f_lseek+0x334>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    8bc8:	82 85       	ldd	r24, Z+10	; 0x0a
    8bca:	93 85       	ldd	r25, Z+11	; 0x0b
    8bcc:	a4 85       	ldd	r26, Z+12	; 0x0c
    8bce:	b5 85       	ldd	r27, Z+13	; 0x0d
    8bd0:	8e 15       	cp	r24, r14
    8bd2:	9f 05       	cpc	r25, r15
    8bd4:	a0 07       	cpc	r26, r16
    8bd6:	b1 07       	cpc	r27, r17
    8bd8:	20 f4       	brcc	.+8      	; 0x8be2 <f_lseek+0x52>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    8bda:	21 fd       	sbrc	r18, 1
    8bdc:	02 c0       	rjmp	.+4      	; 0x8be2 <f_lseek+0x52>
    8bde:	7c 01       	movw	r14, r24
    8be0:	8d 01       	movw	r16, r26
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    8be2:	ed 81       	ldd	r30, Y+5	; 0x05
    8be4:	fe 81       	ldd	r31, Y+6	; 0x06
    8be6:	86 81       	ldd	r24, Z+6	; 0x06
    8be8:	97 81       	ldd	r25, Z+7	; 0x07
    8bea:	a0 85       	ldd	r26, Z+8	; 0x08
    8bec:	b1 85       	ldd	r27, Z+9	; 0x09
		fp->fptr = nsect = 0;
    8bee:	16 82       	std	Z+6, r1	; 0x06
    8bf0:	17 82       	std	Z+7, r1	; 0x07
    8bf2:	10 86       	std	Z+8, r1	; 0x08
    8bf4:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    8bf6:	e1 14       	cp	r14, r1
    8bf8:	f1 04       	cpc	r15, r1
    8bfa:	01 05       	cpc	r16, r1
    8bfc:	11 05       	cpc	r17, r1
    8bfe:	09 f4       	brne	.+2      	; 0x8c02 <f_lseek+0x72>
    8c00:	2f c1       	rjmp	.+606    	; 0x8e60 <f_lseek+0x2d0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    8c02:	20 80       	ld	r2, Z
    8c04:	31 80       	ldd	r3, Z+1	; 0x01
    8c06:	f1 01       	movw	r30, r2
    8c08:	a2 80       	ldd	r10, Z+2	; 0x02
    8c0a:	bb 24       	eor	r11, r11
    8c0c:	cc 24       	eor	r12, r12
    8c0e:	dd 24       	eor	r13, r13
    8c10:	29 e0       	ldi	r18, 0x09	; 9
    8c12:	aa 0c       	add	r10, r10
    8c14:	bb 1c       	adc	r11, r11
    8c16:	cc 1c       	adc	r12, r12
    8c18:	dd 1c       	adc	r13, r13
    8c1a:	2a 95       	dec	r18
    8c1c:	d1 f7       	brne	.-12     	; 0x8c12 <f_lseek+0x82>
			if (ifptr > 0 &&
    8c1e:	00 97       	sbiw	r24, 0x00	; 0
    8c20:	a1 05       	cpc	r26, r1
    8c22:	b1 05       	cpc	r27, r1
    8c24:	f1 f1       	breq	.+124    	; 0x8ca2 <f_lseek+0x112>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    8c26:	2c 01       	movw	r4, r24
    8c28:	3d 01       	movw	r6, r26
    8c2a:	08 94       	sec
    8c2c:	41 08       	sbc	r4, r1
    8c2e:	51 08       	sbc	r5, r1
    8c30:	61 08       	sbc	r6, r1
    8c32:	71 08       	sbc	r7, r1
    8c34:	c8 01       	movw	r24, r16
    8c36:	b7 01       	movw	r22, r14
    8c38:	61 50       	subi	r22, 0x01	; 1
    8c3a:	70 40       	sbci	r23, 0x00	; 0
    8c3c:	80 40       	sbci	r24, 0x00	; 0
    8c3e:	90 40       	sbci	r25, 0x00	; 0
    8c40:	a6 01       	movw	r20, r12
    8c42:	95 01       	movw	r18, r10
    8c44:	0e 94 95 5c 	call	0xb92a	; 0xb92a <__udivmodsi4>
    8c48:	29 83       	std	Y+1, r18	; 0x01
    8c4a:	3a 83       	std	Y+2, r19	; 0x02
    8c4c:	4b 83       	std	Y+3, r20	; 0x03
    8c4e:	5c 83       	std	Y+4, r21	; 0x04
    8c50:	c3 01       	movw	r24, r6
    8c52:	b2 01       	movw	r22, r4
    8c54:	a6 01       	movw	r20, r12
    8c56:	95 01       	movw	r18, r10
    8c58:	0e 94 95 5c 	call	0xb92a	; 0xb92a <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    8c5c:	89 81       	ldd	r24, Y+1	; 0x01
    8c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    8c60:	ab 81       	ldd	r26, Y+3	; 0x03
    8c62:	bc 81       	ldd	r27, Y+4	; 0x04
    8c64:	82 17       	cp	r24, r18
    8c66:	93 07       	cpc	r25, r19
    8c68:	a4 07       	cpc	r26, r20
    8c6a:	b5 07       	cpc	r27, r21
    8c6c:	d0 f0       	brcs	.+52     	; 0x8ca2 <f_lseek+0x112>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    8c6e:	88 27       	eor	r24, r24
    8c70:	99 27       	eor	r25, r25
    8c72:	dc 01       	movw	r26, r24
    8c74:	8a 19       	sub	r24, r10
    8c76:	9b 09       	sbc	r25, r11
    8c78:	ac 09       	sbc	r26, r12
    8c7a:	bd 09       	sbc	r27, r13
    8c7c:	84 21       	and	r24, r4
    8c7e:	95 21       	and	r25, r5
    8c80:	a6 21       	and	r26, r6
    8c82:	b7 21       	and	r27, r7
    8c84:	ed 81       	ldd	r30, Y+5	; 0x05
    8c86:	fe 81       	ldd	r31, Y+6	; 0x06
    8c88:	86 83       	std	Z+6, r24	; 0x06
    8c8a:	97 83       	std	Z+7, r25	; 0x07
    8c8c:	a0 87       	std	Z+8, r26	; 0x08
    8c8e:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    8c90:	e8 1a       	sub	r14, r24
    8c92:	f9 0a       	sbc	r15, r25
    8c94:	0a 0b       	sbc	r16, r26
    8c96:	1b 0b       	sbc	r17, r27
				clst = fp->curr_clust;
    8c98:	42 89       	ldd	r20, Z+18	; 0x12
    8c9a:	53 89       	ldd	r21, Z+19	; 0x13
    8c9c:	64 89       	ldd	r22, Z+20	; 0x14
    8c9e:	75 89       	ldd	r23, Z+21	; 0x15
    8ca0:	37 c0       	rjmp	.+110    	; 0x8d10 <f_lseek+0x180>
			} else {									/* When seek to back cluster, */
				clst = fp->org_clust;					/* start from the first cluster */
    8ca2:	ad 81       	ldd	r26, Y+5	; 0x05
    8ca4:	be 81       	ldd	r27, Y+6	; 0x06
    8ca6:	1e 96       	adiw	r26, 0x0e	; 14
    8ca8:	4d 91       	ld	r20, X+
    8caa:	5d 91       	ld	r21, X+
    8cac:	6d 91       	ld	r22, X+
    8cae:	7c 91       	ld	r23, X
    8cb0:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    8cb2:	41 15       	cp	r20, r1
    8cb4:	51 05       	cpc	r21, r1
    8cb6:	61 05       	cpc	r22, r1
    8cb8:	71 05       	cpc	r23, r1
    8cba:	11 f5       	brne	.+68     	; 0x8d00 <f_lseek+0x170>
					clst = create_chain(fp->fs, 0);
    8cbc:	c1 01       	movw	r24, r2
    8cbe:	40 e0       	ldi	r20, 0x00	; 0
    8cc0:	50 e0       	ldi	r21, 0x00	; 0
    8cc2:	60 e0       	ldi	r22, 0x00	; 0
    8cc4:	70 e0       	ldi	r23, 0x00	; 0
    8cc6:	0e 94 9c 36 	call	0x6d38	; 0x6d38 <create_chain>
    8cca:	ab 01       	movw	r20, r22
    8ccc:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    8cce:	41 30       	cpi	r20, 0x01	; 1
    8cd0:	51 05       	cpc	r21, r1
    8cd2:	61 05       	cpc	r22, r1
    8cd4:	71 05       	cpc	r23, r1
    8cd6:	19 f4       	brne	.+6      	; 0x8cde <f_lseek+0x14e>
    8cd8:	ed 81       	ldd	r30, Y+5	; 0x05
    8cda:	fe 81       	ldd	r31, Y+6	; 0x06
    8cdc:	60 c0       	rjmp	.+192    	; 0x8d9e <f_lseek+0x20e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    8cde:	4f 3f       	cpi	r20, 0xFF	; 255
    8ce0:	ff ef       	ldi	r31, 0xFF	; 255
    8ce2:	5f 07       	cpc	r21, r31
    8ce4:	ff ef       	ldi	r31, 0xFF	; 255
    8ce6:	6f 07       	cpc	r22, r31
    8ce8:	ff ef       	ldi	r31, 0xFF	; 255
    8cea:	7f 07       	cpc	r23, r31
    8cec:	19 f4       	brne	.+6      	; 0x8cf4 <f_lseek+0x164>
    8cee:	ad 81       	ldd	r26, Y+5	; 0x05
    8cf0:	be 81       	ldd	r27, Y+6	; 0x06
    8cf2:	36 c0       	rjmp	.+108    	; 0x8d60 <f_lseek+0x1d0>
					fp->org_clust = clst;
    8cf4:	ed 81       	ldd	r30, Y+5	; 0x05
    8cf6:	fe 81       	ldd	r31, Y+6	; 0x06
    8cf8:	46 87       	std	Z+14, r20	; 0x0e
    8cfa:	57 87       	std	Z+15, r21	; 0x0f
    8cfc:	60 8b       	std	Z+16, r22	; 0x10
    8cfe:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->curr_clust = clst;
    8d00:	ad 81       	ldd	r26, Y+5	; 0x05
    8d02:	be 81       	ldd	r27, Y+6	; 0x06
    8d04:	52 96       	adiw	r26, 0x12	; 18
    8d06:	4d 93       	st	X+, r20
    8d08:	5d 93       	st	X+, r21
    8d0a:	6d 93       	st	X+, r22
    8d0c:	7c 93       	st	X, r23
    8d0e:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    8d10:	41 15       	cp	r20, r1
    8d12:	51 05       	cpc	r21, r1
    8d14:	61 05       	cpc	r22, r1
    8d16:	71 05       	cpc	r23, r1
    8d18:	09 f4       	brne	.+2      	; 0x8d1c <f_lseek+0x18c>
    8d1a:	a2 c0       	rjmp	.+324    	; 0x8e60 <f_lseek+0x2d0>
    8d1c:	4d 80       	ldd	r4, Y+5	; 0x05
    8d1e:	5e 80       	ldd	r5, Y+6	; 0x06
    8d20:	5c c0       	rjmp	.+184    	; 0x8dda <f_lseek+0x24a>
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    8d22:	f2 01       	movw	r30, r4
    8d24:	24 81       	ldd	r18, Z+4	; 0x04
    8d26:	80 81       	ld	r24, Z
    8d28:	91 81       	ldd	r25, Z+1	; 0x01
    8d2a:	21 ff       	sbrs	r18, 1
    8d2c:	0a c0       	rjmp	.+20     	; 0x8d42 <f_lseek+0x1b2>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    8d2e:	0e 94 9c 36 	call	0x6d38	; 0x6d38 <create_chain>
    8d32:	ab 01       	movw	r20, r22
    8d34:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    8d36:	41 15       	cp	r20, r1
    8d38:	51 05       	cpc	r21, r1
    8d3a:	61 05       	cpc	r22, r1
    8d3c:	71 05       	cpc	r23, r1
    8d3e:	29 f4       	brne	.+10     	; 0x8d4a <f_lseek+0x1ba>
    8d40:	55 c0       	rjmp	.+170    	; 0x8dec <f_lseek+0x25c>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    8d42:	0e 94 52 34 	call	0x68a4	; 0x68a4 <get_fat>
    8d46:	ab 01       	movw	r20, r22
    8d48:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    8d4a:	4f 3f       	cpi	r20, 0xFF	; 255
    8d4c:	ff ef       	ldi	r31, 0xFF	; 255
    8d4e:	5f 07       	cpc	r21, r31
    8d50:	ff ef       	ldi	r31, 0xFF	; 255
    8d52:	6f 07       	cpc	r22, r31
    8d54:	ff ef       	ldi	r31, 0xFF	; 255
    8d56:	7f 07       	cpc	r23, r31
    8d58:	71 f4       	brne	.+28     	; 0x8d76 <f_lseek+0x1e6>
    8d5a:	5e 82       	std	Y+6, r5	; 0x06
    8d5c:	4d 82       	std	Y+5, r4	; 0x05
    8d5e:	d2 01       	movw	r26, r4
    8d60:	14 96       	adiw	r26, 0x04	; 4
    8d62:	8c 91       	ld	r24, X
    8d64:	14 97       	sbiw	r26, 0x04	; 4
    8d66:	80 68       	ori	r24, 0x80	; 128
    8d68:	14 96       	adiw	r26, 0x04	; 4
    8d6a:	8c 93       	st	X, r24
    8d6c:	14 97       	sbiw	r26, 0x04	; 4
    8d6e:	81 e0       	ldi	r24, 0x01	; 1
    8d70:	88 2e       	mov	r8, r24
    8d72:	91 2c       	mov	r9, r1
    8d74:	aa c0       	rjmp	.+340    	; 0x8eca <f_lseek+0x33a>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    8d76:	42 30       	cpi	r20, 0x02	; 2
    8d78:	51 05       	cpc	r21, r1
    8d7a:	61 05       	cpc	r22, r1
    8d7c:	71 05       	cpc	r23, r1
    8d7e:	60 f0       	brcs	.+24     	; 0x8d98 <f_lseek+0x208>
    8d80:	d2 01       	movw	r26, r4
    8d82:	ed 91       	ld	r30, X+
    8d84:	fc 91       	ld	r31, X
    8d86:	82 8d       	ldd	r24, Z+26	; 0x1a
    8d88:	93 8d       	ldd	r25, Z+27	; 0x1b
    8d8a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    8d8c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    8d8e:	48 17       	cp	r20, r24
    8d90:	59 07       	cpc	r21, r25
    8d92:	6a 07       	cpc	r22, r26
    8d94:	7b 07       	cpc	r23, r27
    8d96:	38 f0       	brcs	.+14     	; 0x8da6 <f_lseek+0x216>
    8d98:	5e 82       	std	Y+6, r5	; 0x06
    8d9a:	4d 82       	std	Y+5, r4	; 0x05
    8d9c:	f2 01       	movw	r30, r4
    8d9e:	84 81       	ldd	r24, Z+4	; 0x04
    8da0:	80 68       	ori	r24, 0x80	; 128
    8da2:	84 83       	std	Z+4, r24	; 0x04
    8da4:	8f c0       	rjmp	.+286    	; 0x8ec4 <f_lseek+0x334>
					fp->curr_clust = clst;
    8da6:	d2 01       	movw	r26, r4
    8da8:	52 96       	adiw	r26, 0x12	; 18
    8daa:	4d 93       	st	X+, r20
    8dac:	5d 93       	st	X+, r21
    8dae:	6d 93       	st	X+, r22
    8db0:	7c 93       	st	X, r23
    8db2:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    8db4:	16 96       	adiw	r26, 0x06	; 6
    8db6:	8d 91       	ld	r24, X+
    8db8:	9d 91       	ld	r25, X+
    8dba:	0d 90       	ld	r0, X+
    8dbc:	bc 91       	ld	r27, X
    8dbe:	a0 2d       	mov	r26, r0
    8dc0:	8a 0d       	add	r24, r10
    8dc2:	9b 1d       	adc	r25, r11
    8dc4:	ac 1d       	adc	r26, r12
    8dc6:	bd 1d       	adc	r27, r13
    8dc8:	f2 01       	movw	r30, r4
    8dca:	86 83       	std	Z+6, r24	; 0x06
    8dcc:	97 83       	std	Z+7, r25	; 0x07
    8dce:	a0 87       	std	Z+8, r26	; 0x08
    8dd0:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    8dd2:	ea 18       	sub	r14, r10
    8dd4:	fb 08       	sbc	r15, r11
    8dd6:	0c 09       	sbc	r16, r12
    8dd8:	1d 09       	sbc	r17, r13
				}
#endif
				fp->curr_clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    8dda:	ae 14       	cp	r10, r14
    8ddc:	bf 04       	cpc	r11, r15
    8dde:	c0 06       	cpc	r12, r16
    8de0:	d1 06       	cpc	r13, r17
    8de2:	08 f4       	brcc	.+2      	; 0x8de6 <f_lseek+0x256>
    8de4:	9e cf       	rjmp	.-196    	; 0x8d22 <f_lseek+0x192>
    8de6:	5e 82       	std	Y+6, r5	; 0x06
    8de8:	4d 82       	std	Y+5, r4	; 0x05
    8dea:	04 c0       	rjmp	.+8      	; 0x8df4 <f_lseek+0x264>
    8dec:	5e 82       	std	Y+6, r5	; 0x06
    8dee:	4d 82       	std	Y+5, r4	; 0x05
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
    8df0:	86 01       	movw	r16, r12
    8df2:	75 01       	movw	r14, r10
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->curr_clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    8df4:	ed 81       	ldd	r30, Y+5	; 0x05
    8df6:	fe 81       	ldd	r31, Y+6	; 0x06
    8df8:	86 81       	ldd	r24, Z+6	; 0x06
    8dfa:	97 81       	ldd	r25, Z+7	; 0x07
    8dfc:	a0 85       	ldd	r26, Z+8	; 0x08
    8dfe:	b1 85       	ldd	r27, Z+9	; 0x09
    8e00:	8e 0d       	add	r24, r14
    8e02:	9f 1d       	adc	r25, r15
    8e04:	a0 1f       	adc	r26, r16
    8e06:	b1 1f       	adc	r27, r17
    8e08:	86 83       	std	Z+6, r24	; 0x06
    8e0a:	97 83       	std	Z+7, r25	; 0x07
    8e0c:	a0 87       	std	Z+8, r26	; 0x08
    8e0e:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    8e10:	d8 01       	movw	r26, r16
    8e12:	c7 01       	movw	r24, r14
    8e14:	91 70       	andi	r25, 0x01	; 1
    8e16:	a0 70       	andi	r26, 0x00	; 0
    8e18:	b0 70       	andi	r27, 0x00	; 0
    8e1a:	00 97       	sbiw	r24, 0x00	; 0
    8e1c:	a1 05       	cpc	r26, r1
    8e1e:	b1 05       	cpc	r27, r1
    8e20:	f9 f0       	breq	.+62     	; 0x8e60 <f_lseek+0x2d0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    8e22:	80 81       	ld	r24, Z
    8e24:	91 81       	ldd	r25, Z+1	; 0x01
    8e26:	0e 94 22 34 	call	0x6844	; 0x6844 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    8e2a:	61 15       	cp	r22, r1
    8e2c:	71 05       	cpc	r23, r1
    8e2e:	81 05       	cpc	r24, r1
    8e30:	91 05       	cpc	r25, r1
    8e32:	51 f4       	brne	.+20     	; 0x8e48 <f_lseek+0x2b8>
    8e34:	ad 81       	ldd	r26, Y+5	; 0x05
    8e36:	be 81       	ldd	r27, Y+6	; 0x06
    8e38:	14 96       	adiw	r26, 0x04	; 4
    8e3a:	8c 91       	ld	r24, X
    8e3c:	14 97       	sbiw	r26, 0x04	; 4
    8e3e:	80 68       	ori	r24, 0x80	; 128
    8e40:	14 96       	adiw	r26, 0x04	; 4
    8e42:	8c 93       	st	X, r24
    8e44:	14 97       	sbiw	r26, 0x04	; 4
    8e46:	3e c0       	rjmp	.+124    	; 0x8ec4 <f_lseek+0x334>
					nsect += ofs / SS(fp->fs);
    8e48:	b9 e0       	ldi	r27, 0x09	; 9
    8e4a:	16 95       	lsr	r17
    8e4c:	07 95       	ror	r16
    8e4e:	f7 94       	ror	r15
    8e50:	e7 94       	ror	r14
    8e52:	ba 95       	dec	r27
    8e54:	d1 f7       	brne	.-12     	; 0x8e4a <f_lseek+0x2ba>
    8e56:	e6 0e       	add	r14, r22
    8e58:	f7 1e       	adc	r15, r23
    8e5a:	08 1f       	adc	r16, r24
    8e5c:	19 1f       	adc	r17, r25
    8e5e:	03 c0       	rjmp	.+6      	; 0x8e66 <f_lseek+0x2d6>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    8e60:	ee 24       	eor	r14, r14
    8e62:	ff 24       	eor	r15, r15
    8e64:	87 01       	movw	r16, r14
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    8e66:	ed 81       	ldd	r30, Y+5	; 0x05
    8e68:	fe 81       	ldd	r31, Y+6	; 0x06
    8e6a:	26 81       	ldd	r18, Z+6	; 0x06
    8e6c:	37 81       	ldd	r19, Z+7	; 0x07
    8e6e:	40 85       	ldd	r20, Z+8	; 0x08
    8e70:	51 85       	ldd	r21, Z+9	; 0x09
    8e72:	da 01       	movw	r26, r20
    8e74:	c9 01       	movw	r24, r18
    8e76:	91 70       	andi	r25, 0x01	; 1
    8e78:	a0 70       	andi	r26, 0x00	; 0
    8e7a:	b0 70       	andi	r27, 0x00	; 0
    8e7c:	00 97       	sbiw	r24, 0x00	; 0
    8e7e:	a1 05       	cpc	r26, r1
    8e80:	b1 05       	cpc	r27, r1
    8e82:	69 f0       	breq	.+26     	; 0x8e9e <f_lseek+0x30e>
    8e84:	86 89       	ldd	r24, Z+22	; 0x16
    8e86:	97 89       	ldd	r25, Z+23	; 0x17
    8e88:	a0 8d       	ldd	r26, Z+24	; 0x18
    8e8a:	b1 8d       	ldd	r27, Z+25	; 0x19
    8e8c:	e8 16       	cp	r14, r24
    8e8e:	f9 06       	cpc	r15, r25
    8e90:	0a 07       	cpc	r16, r26
    8e92:	1b 07       	cpc	r17, r27
    8e94:	21 f0       	breq	.+8      	; 0x8e9e <f_lseek+0x30e>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    8e96:	e6 8a       	std	Z+22, r14	; 0x16
    8e98:	f7 8a       	std	Z+23, r15	; 0x17
    8e9a:	00 8f       	std	Z+24, r16	; 0x18
    8e9c:	11 8f       	std	Z+25, r17	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set change flag if the file size is extended */
    8e9e:	ed 81       	ldd	r30, Y+5	; 0x05
    8ea0:	fe 81       	ldd	r31, Y+6	; 0x06
    8ea2:	82 85       	ldd	r24, Z+10	; 0x0a
    8ea4:	93 85       	ldd	r25, Z+11	; 0x0b
    8ea6:	a4 85       	ldd	r26, Z+12	; 0x0c
    8ea8:	b5 85       	ldd	r27, Z+13	; 0x0d
    8eaa:	82 17       	cp	r24, r18
    8eac:	93 07       	cpc	r25, r19
    8eae:	a4 07       	cpc	r26, r20
    8eb0:	b5 07       	cpc	r27, r21
    8eb2:	58 f4       	brcc	.+22     	; 0x8eca <f_lseek+0x33a>
			fp->fsize = fp->fptr;
    8eb4:	22 87       	std	Z+10, r18	; 0x0a
    8eb6:	33 87       	std	Z+11, r19	; 0x0b
    8eb8:	44 87       	std	Z+12, r20	; 0x0c
    8eba:	55 87       	std	Z+13, r21	; 0x0d
			fp->flag |= FA__WRITTEN;
    8ebc:	84 81       	ldd	r24, Z+4	; 0x04
    8ebe:	80 62       	ori	r24, 0x20	; 32
    8ec0:	84 83       	std	Z+4, r24	; 0x04
    8ec2:	03 c0       	rjmp	.+6      	; 0x8eca <f_lseek+0x33a>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    8ec4:	a2 e0       	ldi	r26, 0x02	; 2
    8ec6:	8a 2e       	mov	r8, r26
    8ec8:	91 2c       	mov	r9, r1
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    8eca:	c4 01       	movw	r24, r8
    8ecc:	26 96       	adiw	r28, 0x06	; 6
    8ece:	e2 e1       	ldi	r30, 0x12	; 18
    8ed0:	0c 94 ee 5c 	jmp	0xb9dc	; 0xb9dc <__epilogue_restores__>

00008ed4 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    8ed4:	ae e0       	ldi	r26, 0x0E	; 14
    8ed6:	b0 e0       	ldi	r27, 0x00	; 0
    8ed8:	e0 e7       	ldi	r30, 0x70	; 112
    8eda:	f7 e4       	ldi	r31, 0x47	; 71
    8edc:	0c 94 e0 5c 	jmp	0xb9c0	; 0xb9c0 <__prologue_saves__+0x1c>
    8ee0:	8c 01       	movw	r16, r24
    8ee2:	7e 87       	std	Y+14, r23	; 0x0e
    8ee4:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
    8ee6:	ce 01       	movw	r24, r28
    8ee8:	0d 96       	adiw	r24, 0x0d	; 13
    8eea:	b8 01       	movw	r22, r16
    8eec:	40 e0       	ldi	r20, 0x00	; 0
    8eee:	0e 94 04 30 	call	0x6008	; 0x6008 <chk_mounted>
    8ef2:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8ef4:	00 97       	sbiw	r24, 0x00	; 0
    8ef6:	09 f0       	breq	.+2      	; 0x8efa <f_opendir+0x26>
    8ef8:	48 c0       	rjmp	.+144    	; 0x8f8a <f_opendir+0xb6>
		INIT_BUF(*dj);
    8efa:	ce 01       	movw	r24, r28
    8efc:	01 96       	adiw	r24, 0x01	; 1
    8efe:	d8 01       	movw	r26, r16
    8f00:	55 96       	adiw	r26, 0x15	; 21
    8f02:	9c 93       	st	X, r25
    8f04:	8e 93       	st	-X, r24
    8f06:	54 97       	sbiw	r26, 0x14	; 20
    8f08:	8e e8       	ldi	r24, 0x8E	; 142
    8f0a:	91 e0       	ldi	r25, 0x01	; 1
    8f0c:	57 96       	adiw	r26, 0x17	; 23
    8f0e:	9c 93       	st	X, r25
    8f10:	8e 93       	st	-X, r24
    8f12:	56 97       	sbiw	r26, 0x16	; 22
		res = follow_path(dj, path);			/* Follow the path to the directory */
    8f14:	6d 85       	ldd	r22, Y+13	; 0x0d
    8f16:	7e 85       	ldd	r23, Y+14	; 0x0e
    8f18:	c8 01       	movw	r24, r16
    8f1a:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <follow_path>
    8f1e:	9c 01       	movw	r18, r24
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    8f20:	00 97       	sbiw	r24, 0x00	; 0
    8f22:	71 f5       	brne	.+92     	; 0x8f80 <f_opendir+0xac>
			if (dj->dir) {						/* It is not the root dir */
    8f24:	d8 01       	movw	r26, r16
    8f26:	52 96       	adiw	r26, 0x12	; 18
    8f28:	ed 91       	ld	r30, X+
    8f2a:	fc 91       	ld	r31, X
    8f2c:	53 97       	sbiw	r26, 0x13	; 19
    8f2e:	30 97       	sbiw	r30, 0x00	; 0
    8f30:	b9 f0       	breq	.+46     	; 0x8f60 <f_opendir+0x8c>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    8f32:	83 85       	ldd	r24, Z+11	; 0x0b
    8f34:	84 ff       	sbrs	r24, 4
    8f36:	27 c0       	rjmp	.+78     	; 0x8f86 <f_opendir+0xb2>
					dj->sclust = LD_CLUST(dj->dir);
    8f38:	84 89       	ldd	r24, Z+20	; 0x14
    8f3a:	95 89       	ldd	r25, Z+21	; 0x15
    8f3c:	a0 e0       	ldi	r26, 0x00	; 0
    8f3e:	b0 e0       	ldi	r27, 0x00	; 0
    8f40:	dc 01       	movw	r26, r24
    8f42:	99 27       	eor	r25, r25
    8f44:	88 27       	eor	r24, r24
    8f46:	22 8d       	ldd	r18, Z+26	; 0x1a
    8f48:	33 8d       	ldd	r19, Z+27	; 0x1b
    8f4a:	40 e0       	ldi	r20, 0x00	; 0
    8f4c:	50 e0       	ldi	r21, 0x00	; 0
    8f4e:	82 2b       	or	r24, r18
    8f50:	93 2b       	or	r25, r19
    8f52:	a4 2b       	or	r26, r20
    8f54:	b5 2b       	or	r27, r21
    8f56:	f8 01       	movw	r30, r16
    8f58:	86 83       	std	Z+6, r24	; 0x06
    8f5a:	97 83       	std	Z+7, r25	; 0x07
    8f5c:	a0 87       	std	Z+8, r26	; 0x08
    8f5e:	b1 87       	std	Z+9, r27	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    8f60:	d8 01       	movw	r26, r16
    8f62:	ed 91       	ld	r30, X+
    8f64:	fc 91       	ld	r31, X
    8f66:	11 97       	sbiw	r26, 0x01	; 1
    8f68:	86 81       	ldd	r24, Z+6	; 0x06
    8f6a:	97 81       	ldd	r25, Z+7	; 0x07
    8f6c:	13 96       	adiw	r26, 0x03	; 3
    8f6e:	9c 93       	st	X, r25
    8f70:	8e 93       	st	-X, r24
    8f72:	12 97       	sbiw	r26, 0x02	; 2
				res = dir_sdi(dj, 0);			/* Rewind dir */
    8f74:	c8 01       	movw	r24, r16
    8f76:	60 e0       	ldi	r22, 0x00	; 0
    8f78:	70 e0       	ldi	r23, 0x00	; 0
    8f7a:	0e 94 13 35 	call	0x6a26	; 0x6a26 <dir_sdi>
    8f7e:	9c 01       	movw	r18, r24
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    8f80:	24 30       	cpi	r18, 0x04	; 4
    8f82:	31 05       	cpc	r19, r1
    8f84:	11 f4       	brne	.+4      	; 0x8f8a <f_opendir+0xb6>
    8f86:	25 e0       	ldi	r18, 0x05	; 5
    8f88:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj->fs, res);
}
    8f8a:	c9 01       	movw	r24, r18
    8f8c:	2e 96       	adiw	r28, 0x0e	; 14
    8f8e:	e4 e0       	ldi	r30, 0x04	; 4
    8f90:	0c 94 fc 5c 	jmp	0xb9f8	; 0xb9f8 <__epilogue_restores__+0x1c>

00008f94 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    8f94:	ac e0       	ldi	r26, 0x0C	; 12
    8f96:	b0 e0       	ldi	r27, 0x00	; 0
    8f98:	e0 ed       	ldi	r30, 0xD0	; 208
    8f9a:	f7 e4       	ldi	r31, 0x47	; 71
    8f9c:	0c 94 dc 5c 	jmp	0xb9b8	; 0xb9b8 <__prologue_saves__+0x14>
    8fa0:	8c 01       	movw	r16, r24
    8fa2:	6b 01       	movw	r12, r22
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    8fa4:	fc 01       	movw	r30, r24
    8fa6:	62 81       	ldd	r22, Z+2	; 0x02
    8fa8:	73 81       	ldd	r23, Z+3	; 0x03
    8faa:	80 81       	ld	r24, Z
    8fac:	91 81       	ldd	r25, Z+1	; 0x01
    8fae:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <validate>
    8fb2:	7c 01       	movw	r14, r24
	if (res == FR_OK) {
    8fb4:	00 97       	sbiw	r24, 0x00	; 0
    8fb6:	99 f5       	brne	.+102    	; 0x901e <f_readdir+0x8a>
		if (!fno) {
    8fb8:	c1 14       	cp	r12, r1
    8fba:	d1 04       	cpc	r13, r1
    8fbc:	31 f4       	brne	.+12     	; 0x8fca <f_readdir+0x36>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
    8fbe:	c8 01       	movw	r24, r16
    8fc0:	60 e0       	ldi	r22, 0x00	; 0
    8fc2:	70 e0       	ldi	r23, 0x00	; 0
    8fc4:	0e 94 13 35 	call	0x6a26	; 0x6a26 <dir_sdi>
    8fc8:	29 c0       	rjmp	.+82     	; 0x901c <f_readdir+0x88>
		} else {
			INIT_BUF(*dj);
    8fca:	ce 01       	movw	r24, r28
    8fcc:	01 96       	adiw	r24, 0x01	; 1
    8fce:	f8 01       	movw	r30, r16
    8fd0:	95 8b       	std	Z+21, r25	; 0x15
    8fd2:	84 8b       	std	Z+20, r24	; 0x14
    8fd4:	8e e8       	ldi	r24, 0x8E	; 142
    8fd6:	91 e0       	ldi	r25, 0x01	; 1
    8fd8:	97 8b       	std	Z+23, r25	; 0x17
    8fda:	86 8b       	std	Z+22, r24	; 0x16
			res = dir_read(dj);				/* Read an directory item */
    8fdc:	c8 01       	movw	r24, r16
    8fde:	0e 94 06 3c 	call	0x780c	; 0x780c <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
    8fe2:	84 30       	cpi	r24, 0x04	; 4
    8fe4:	91 05       	cpc	r25, r1
    8fe6:	31 f4       	brne	.+12     	; 0x8ff4 <f_readdir+0x60>
				dj->sect = 0;
    8fe8:	f8 01       	movw	r30, r16
    8fea:	16 86       	std	Z+14, r1	; 0x0e
    8fec:	17 86       	std	Z+15, r1	; 0x0f
    8fee:	10 8a       	std	Z+16, r1	; 0x10
    8ff0:	11 8a       	std	Z+17, r1	; 0x11
    8ff2:	02 c0       	rjmp	.+4      	; 0x8ff8 <f_readdir+0x64>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    8ff4:	00 97       	sbiw	r24, 0x00	; 0
    8ff6:	91 f4       	brne	.+36     	; 0x901c <f_readdir+0x88>
				get_fileinfo(dj, fno);		/* Get the object information */
    8ff8:	c8 01       	movw	r24, r16
    8ffa:	b6 01       	movw	r22, r12
    8ffc:	0e 94 47 33 	call	0x668e	; 0x668e <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
    9000:	c8 01       	movw	r24, r16
    9002:	60 e0       	ldi	r22, 0x00	; 0
    9004:	70 e0       	ldi	r23, 0x00	; 0
    9006:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <dir_next>
				if (res == FR_NO_FILE) {
    900a:	84 30       	cpi	r24, 0x04	; 4
    900c:	91 05       	cpc	r25, r1
    900e:	31 f4       	brne	.+12     	; 0x901c <f_readdir+0x88>
					dj->sect = 0;
    9010:	f8 01       	movw	r30, r16
    9012:	16 86       	std	Z+14, r1	; 0x0e
    9014:	17 86       	std	Z+15, r1	; 0x0f
    9016:	10 8a       	std	Z+16, r1	; 0x10
    9018:	11 8a       	std	Z+17, r1	; 0x11
    901a:	01 c0       	rjmp	.+2      	; 0x901e <f_readdir+0x8a>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
				if (res == FR_NO_FILE) {
    901c:	7c 01       	movw	r14, r24
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
    901e:	c7 01       	movw	r24, r14
    9020:	2c 96       	adiw	r28, 0x0c	; 12
    9022:	e8 e0       	ldi	r30, 0x08	; 8
    9024:	0c 94 f8 5c 	jmp	0xb9f0	; 0xb9f0 <__epilogue_restores__+0x14>

00009028 <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    9028:	a8 e2       	ldi	r26, 0x28	; 40
    902a:	b0 e0       	ldi	r27, 0x00	; 0
    902c:	ea e1       	ldi	r30, 0x1A	; 26
    902e:	f8 e4       	ldi	r31, 0x48	; 72
    9030:	0c 94 dc 5c 	jmp	0xb9b8	; 0xb9b8 <__prologue_saves__+0x14>
    9034:	98 a7       	std	Y+40, r25	; 0x28
    9036:	8f a3       	std	Y+39, r24	; 0x27
    9038:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    903a:	4d e0       	ldi	r20, 0x0D	; 13
    903c:	e4 2e       	mov	r14, r20
    903e:	f1 2c       	mov	r15, r1
    9040:	ec 0e       	add	r14, r28
    9042:	fd 1e       	adc	r15, r29
    9044:	ce 01       	movw	r24, r28
    9046:	87 96       	adiw	r24, 0x27	; 39
    9048:	b7 01       	movw	r22, r14
    904a:	40 e0       	ldi	r20, 0x00	; 0
    904c:	0e 94 04 30 	call	0x6008	; 0x6008 <chk_mounted>
    9050:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    9052:	00 97       	sbiw	r24, 0x00	; 0
    9054:	d9 f4       	brne	.+54     	; 0x908c <f_stat+0x64>
		INIT_BUF(dj);
    9056:	ce 01       	movw	r24, r28
    9058:	01 96       	adiw	r24, 0x01	; 1
    905a:	9a a3       	std	Y+34, r25	; 0x22
    905c:	89 a3       	std	Y+33, r24	; 0x21
    905e:	8e e8       	ldi	r24, 0x8E	; 142
    9060:	91 e0       	ldi	r25, 0x01	; 1
    9062:	9c a3       	std	Y+36, r25	; 0x24
    9064:	8b a3       	std	Y+35, r24	; 0x23
		res = follow_path(&dj, path);	/* Follow the file path */
    9066:	6f a1       	ldd	r22, Y+39	; 0x27
    9068:	78 a5       	ldd	r23, Y+40	; 0x28
    906a:	c7 01       	movw	r24, r14
    906c:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <follow_path>
    9070:	8c 01       	movw	r16, r24
		if (res == FR_OK) {				/* Follow completed */
    9072:	00 97       	sbiw	r24, 0x00	; 0
    9074:	59 f4       	brne	.+22     	; 0x908c <f_stat+0x64>
			if (dj.dir)		/* Found an object */
    9076:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9078:	98 a1       	ldd	r25, Y+32	; 0x20
    907a:	00 97       	sbiw	r24, 0x00	; 0
    907c:	29 f0       	breq	.+10     	; 0x9088 <f_stat+0x60>
				get_fileinfo(&dj, fno);
    907e:	c7 01       	movw	r24, r14
    9080:	b6 01       	movw	r22, r12
    9082:	0e 94 47 33 	call	0x668e	; 0x668e <get_fileinfo>
    9086:	02 c0       	rjmp	.+4      	; 0x908c <f_stat+0x64>
			else			/* It is root dir */
				res = FR_INVALID_NAME;
    9088:	06 e0       	ldi	r16, 0x06	; 6
    908a:	10 e0       	ldi	r17, 0x00	; 0
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    908c:	c8 01       	movw	r24, r16
    908e:	a8 96       	adiw	r28, 0x28	; 40
    9090:	e8 e0       	ldi	r30, 0x08	; 8
    9092:	0c 94 f8 5c 	jmp	0xb9f0	; 0xb9f0 <__epilogue_restores__+0x14>

00009096 <f_getfree>:
FRESULT f_getfree (
	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    9096:	a5 e0       	ldi	r26, 0x05	; 5
    9098:	b0 e0       	ldi	r27, 0x00	; 0
    909a:	e1 e5       	ldi	r30, 0x51	; 81
    909c:	f8 e4       	ldi	r31, 0x48	; 72
    909e:	0c 94 d2 5c 	jmp	0xb9a4	; 0xb9a4 <__prologue_saves__>
    90a2:	9a 83       	std	Y+2, r25	; 0x02
    90a4:	89 83       	std	Y+1, r24	; 0x01
    90a6:	7d 83       	std	Y+5, r23	; 0x05
    90a8:	6c 83       	std	Y+4, r22	; 0x04
    90aa:	6a 01       	movw	r12, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    90ac:	ce 01       	movw	r24, r28
    90ae:	01 96       	adiw	r24, 0x01	; 1
    90b0:	ba 01       	movw	r22, r20
    90b2:	40 e0       	ldi	r20, 0x00	; 0
    90b4:	0e 94 04 30 	call	0x6008	; 0x6008 <chk_mounted>
    90b8:	1c 01       	movw	r2, r24
	if (res == FR_OK) {
    90ba:	00 97       	sbiw	r24, 0x00	; 0
    90bc:	09 f0       	breq	.+2      	; 0x90c0 <f_getfree+0x2a>
    90be:	c6 c0       	rjmp	.+396    	; 0x924c <f_getfree+0x1b6>
		/* If free_clust is valid, return it without full cluster scan */
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
    90c0:	d6 01       	movw	r26, r12
    90c2:	ed 91       	ld	r30, X+
    90c4:	fc 91       	ld	r31, X
    90c6:	86 85       	ldd	r24, Z+14	; 0x0e
    90c8:	97 85       	ldd	r25, Z+15	; 0x0f
    90ca:	a0 89       	ldd	r26, Z+16	; 0x10
    90cc:	b1 89       	ldd	r27, Z+17	; 0x11
    90ce:	42 8c       	ldd	r4, Z+26	; 0x1a
    90d0:	53 8c       	ldd	r5, Z+27	; 0x1b
    90d2:	64 8c       	ldd	r6, Z+28	; 0x1c
    90d4:	75 8c       	ldd	r7, Z+29	; 0x1d
    90d6:	a3 01       	movw	r20, r6
    90d8:	92 01       	movw	r18, r4
    90da:	22 50       	subi	r18, 0x02	; 2
    90dc:	30 40       	sbci	r19, 0x00	; 0
    90de:	40 40       	sbci	r20, 0x00	; 0
    90e0:	50 40       	sbci	r21, 0x00	; 0
    90e2:	28 17       	cp	r18, r24
    90e4:	39 07       	cpc	r19, r25
    90e6:	4a 07       	cpc	r20, r26
    90e8:	5b 07       	cpc	r21, r27
    90ea:	38 f0       	brcs	.+14     	; 0x90fa <f_getfree+0x64>
			*nclst = (*fatfs)->free_clust;
    90ec:	ec 81       	ldd	r30, Y+4	; 0x04
    90ee:	fd 81       	ldd	r31, Y+5	; 0x05
    90f0:	80 83       	st	Z, r24
    90f2:	91 83       	std	Z+1, r25	; 0x01
    90f4:	a2 83       	std	Z+2, r26	; 0x02
    90f6:	b3 83       	std	Z+3, r27	; 0x03
    90f8:	a9 c0       	rjmp	.+338    	; 0x924c <f_getfree+0x1b6>
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
    90fa:	20 81       	ld	r18, Z
    90fc:	2b 83       	std	Y+3, r18	; 0x03
			n = 0;
			if (fat == FS_FAT12) {
    90fe:	21 30       	cpi	r18, 0x01	; 1
    9100:	d1 f5       	brne	.+116    	; 0x9176 <f_getfree+0xe0>
    9102:	72 e0       	ldi	r23, 0x02	; 2
    9104:	87 2e       	mov	r8, r23
    9106:	91 2c       	mov	r9, r1
    9108:	a1 2c       	mov	r10, r1
    910a:	b1 2c       	mov	r11, r1
    910c:	ee 24       	eor	r14, r14
    910e:	ff 24       	eor	r15, r15
    9110:	87 01       	movw	r16, r14
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
    9112:	d6 01       	movw	r26, r12
    9114:	8d 91       	ld	r24, X+
    9116:	9c 91       	ld	r25, X
    9118:	b5 01       	movw	r22, r10
    911a:	a4 01       	movw	r20, r8
    911c:	0e 94 52 34 	call	0x68a4	; 0x68a4 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    9120:	6f 3f       	cpi	r22, 0xFF	; 255
    9122:	bf ef       	ldi	r27, 0xFF	; 255
    9124:	7b 07       	cpc	r23, r27
    9126:	bf ef       	ldi	r27, 0xFF	; 255
    9128:	8b 07       	cpc	r24, r27
    912a:	bf ef       	ldi	r27, 0xFF	; 255
    912c:	9b 07       	cpc	r25, r27
    912e:	09 f4       	brne	.+2      	; 0x9132 <f_getfree+0x9c>
    9130:	72 c0       	rjmp	.+228    	; 0x9216 <f_getfree+0x180>
					if (stat == 1) { res = FR_INT_ERR; break; }
    9132:	61 30       	cpi	r22, 0x01	; 1
    9134:	71 05       	cpc	r23, r1
    9136:	81 05       	cpc	r24, r1
    9138:	91 05       	cpc	r25, r1
    913a:	09 f4       	brne	.+2      	; 0x913e <f_getfree+0xa8>
    913c:	70 c0       	rjmp	.+224    	; 0x921e <f_getfree+0x188>
					if (stat == 0) n++;
    913e:	61 15       	cp	r22, r1
    9140:	71 05       	cpc	r23, r1
    9142:	81 05       	cpc	r24, r1
    9144:	91 05       	cpc	r25, r1
    9146:	29 f4       	brne	.+10     	; 0x9152 <f_getfree+0xbc>
    9148:	08 94       	sec
    914a:	e1 1c       	adc	r14, r1
    914c:	f1 1c       	adc	r15, r1
    914e:	01 1d       	adc	r16, r1
    9150:	11 1d       	adc	r17, r1
				} while (++clst < (*fatfs)->n_fatent);
    9152:	08 94       	sec
    9154:	81 1c       	adc	r8, r1
    9156:	91 1c       	adc	r9, r1
    9158:	a1 1c       	adc	r10, r1
    915a:	b1 1c       	adc	r11, r1
    915c:	d6 01       	movw	r26, r12
    915e:	ed 91       	ld	r30, X+
    9160:	fc 91       	ld	r31, X
    9162:	82 8d       	ldd	r24, Z+26	; 0x1a
    9164:	93 8d       	ldd	r25, Z+27	; 0x1b
    9166:	a4 8d       	ldd	r26, Z+28	; 0x1c
    9168:	b5 8d       	ldd	r27, Z+29	; 0x1d
    916a:	88 16       	cp	r8, r24
    916c:	99 06       	cpc	r9, r25
    916e:	aa 06       	cpc	r10, r26
    9170:	bb 06       	cpc	r11, r27
    9172:	78 f2       	brcs	.-98     	; 0x9112 <f_getfree+0x7c>
    9174:	59 c0       	rjmp	.+178    	; 0x9228 <f_getfree+0x192>
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
    9176:	82 a0       	ldd	r8, Z+34	; 0x22
    9178:	93 a0       	ldd	r9, Z+35	; 0x23
    917a:	a4 a0       	ldd	r10, Z+36	; 0x24
    917c:	b5 a0       	ldd	r11, Z+37	; 0x25
				i = 0; p = 0;
    917e:	e0 e0       	ldi	r30, 0x00	; 0
    9180:	f0 e0       	ldi	r31, 0x00	; 0
    9182:	20 e0       	ldi	r18, 0x00	; 0
    9184:	30 e0       	ldi	r19, 0x00	; 0
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
			*nclst = (*fatfs)->free_clust;
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
			n = 0;
    9186:	ee 24       	eor	r14, r14
    9188:	ff 24       	eor	r15, r15
    918a:	87 01       	movw	r16, r14
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
    918c:	21 15       	cp	r18, r1
    918e:	31 05       	cpc	r19, r1
    9190:	a9 f4       	brne	.+42     	; 0x91bc <f_getfree+0x126>
						res = move_window(*fatfs, sect++);
    9192:	f6 01       	movw	r30, r12
    9194:	80 81       	ld	r24, Z
    9196:	91 81       	ldd	r25, Z+1	; 0x01
    9198:	b5 01       	movw	r22, r10
    919a:	a4 01       	movw	r20, r8
    919c:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
						if (res != FR_OK) break;
    91a0:	00 97       	sbiw	r24, 0x00	; 0
    91a2:	09 f0       	breq	.+2      	; 0x91a6 <f_getfree+0x110>
    91a4:	40 c0       	rjmp	.+128    	; 0x9226 <f_getfree+0x190>
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
    91a6:	08 94       	sec
    91a8:	81 1c       	adc	r8, r1
    91aa:	91 1c       	adc	r9, r1
    91ac:	a1 1c       	adc	r10, r1
    91ae:	b1 1c       	adc	r11, r1
						if (res != FR_OK) break;
						p = (*fatfs)->win;
    91b0:	d6 01       	movw	r26, r12
    91b2:	ed 91       	ld	r30, X+
    91b4:	fc 91       	ld	r31, X
    91b6:	f2 96       	adiw	r30, 0x32	; 50
						i = SS(*fatfs);
    91b8:	20 e0       	ldi	r18, 0x00	; 0
    91ba:	32 e0       	ldi	r19, 0x02	; 2
					}
					if (fat == FS_FAT16) {
    91bc:	bb 81       	ldd	r27, Y+3	; 0x03
    91be:	b2 30       	cpi	r27, 0x02	; 2
    91c0:	69 f4       	brne	.+26     	; 0x91dc <f_getfree+0x146>
						if (LD_WORD(p) == 0) n++;
    91c2:	80 81       	ld	r24, Z
    91c4:	91 81       	ldd	r25, Z+1	; 0x01
    91c6:	00 97       	sbiw	r24, 0x00	; 0
    91c8:	29 f4       	brne	.+10     	; 0x91d4 <f_getfree+0x13e>
    91ca:	08 94       	sec
    91cc:	e1 1c       	adc	r14, r1
    91ce:	f1 1c       	adc	r15, r1
    91d0:	01 1d       	adc	r16, r1
    91d2:	11 1d       	adc	r17, r1
						p += 2; i -= 2;
    91d4:	32 96       	adiw	r30, 0x02	; 2
    91d6:	22 50       	subi	r18, 0x02	; 2
    91d8:	30 40       	sbci	r19, 0x00	; 0
    91da:	11 c0       	rjmp	.+34     	; 0x91fe <f_getfree+0x168>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    91dc:	80 81       	ld	r24, Z
    91de:	91 81       	ldd	r25, Z+1	; 0x01
    91e0:	a2 81       	ldd	r26, Z+2	; 0x02
    91e2:	b3 81       	ldd	r27, Z+3	; 0x03
    91e4:	bf 70       	andi	r27, 0x0F	; 15
    91e6:	00 97       	sbiw	r24, 0x00	; 0
    91e8:	a1 05       	cpc	r26, r1
    91ea:	b1 05       	cpc	r27, r1
    91ec:	29 f4       	brne	.+10     	; 0x91f8 <f_getfree+0x162>
    91ee:	08 94       	sec
    91f0:	e1 1c       	adc	r14, r1
    91f2:	f1 1c       	adc	r15, r1
    91f4:	01 1d       	adc	r16, r1
    91f6:	11 1d       	adc	r17, r1
						p += 4; i -= 4;
    91f8:	34 96       	adiw	r30, 0x04	; 4
    91fa:	24 50       	subi	r18, 0x04	; 4
    91fc:	30 40       	sbci	r19, 0x00	; 0
					}
				} while (--clst);
    91fe:	08 94       	sec
    9200:	41 08       	sbc	r4, r1
    9202:	51 08       	sbc	r5, r1
    9204:	61 08       	sbc	r6, r1
    9206:	71 08       	sbc	r7, r1
    9208:	41 14       	cp	r4, r1
    920a:	51 04       	cpc	r5, r1
    920c:	61 04       	cpc	r6, r1
    920e:	71 04       	cpc	r7, r1
    9210:	09 f0       	breq	.+2      	; 0x9214 <f_getfree+0x17e>
    9212:	bc cf       	rjmp	.-136    	; 0x918c <f_getfree+0xf6>
    9214:	09 c0       	rjmp	.+18     	; 0x9228 <f_getfree+0x192>
			n = 0;
			if (fat == FS_FAT12) {
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    9216:	61 e0       	ldi	r22, 0x01	; 1
    9218:	26 2e       	mov	r2, r22
    921a:	31 2c       	mov	r3, r1
    921c:	05 c0       	rjmp	.+10     	; 0x9228 <f_getfree+0x192>
					if (stat == 1) { res = FR_INT_ERR; break; }
    921e:	52 e0       	ldi	r21, 0x02	; 2
    9220:	25 2e       	mov	r2, r21
    9222:	31 2c       	mov	r3, r1
    9224:	01 c0       	rjmp	.+2      	; 0x9228 <f_getfree+0x192>
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
    9226:	1c 01       	movw	r2, r24
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			(*fatfs)->free_clust = n;
    9228:	d6 01       	movw	r26, r12
    922a:	ed 91       	ld	r30, X+
    922c:	fc 91       	ld	r31, X
    922e:	e6 86       	std	Z+14, r14	; 0x0e
    9230:	f7 86       	std	Z+15, r15	; 0x0f
    9232:	00 8b       	std	Z+16, r16	; 0x10
    9234:	11 8b       	std	Z+17, r17	; 0x11
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    9236:	bb 81       	ldd	r27, Y+3	; 0x03
    9238:	b3 30       	cpi	r27, 0x03	; 3
    923a:	11 f4       	brne	.+4      	; 0x9240 <f_getfree+0x1aa>
    923c:	81 e0       	ldi	r24, 0x01	; 1
    923e:	85 83       	std	Z+5, r24	; 0x05
			*nclst = n;
    9240:	ec 81       	ldd	r30, Y+4	; 0x04
    9242:	fd 81       	ldd	r31, Y+5	; 0x05
    9244:	e0 82       	st	Z, r14
    9246:	f1 82       	std	Z+1, r15	; 0x01
    9248:	02 83       	std	Z+2, r16	; 0x02
    924a:	13 83       	std	Z+3, r17	; 0x03
		}
	}
	LEAVE_FF(*fatfs, res);
}
    924c:	c1 01       	movw	r24, r2
    924e:	25 96       	adiw	r28, 0x05	; 5
    9250:	e2 e1       	ldi	r30, 0x12	; 18
    9252:	0c 94 ee 5c 	jmp	0xb9dc	; 0xb9dc <__epilogue_restores__>

00009256 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    9256:	a0 e0       	ldi	r26, 0x00	; 0
    9258:	b0 e0       	ldi	r27, 0x00	; 0
    925a:	e1 e3       	ldi	r30, 0x31	; 49
    925c:	f9 e4       	ldi	r31, 0x49	; 73
    925e:	0c 94 dc 5c 	jmp	0xb9b8	; 0xb9b8 <__prologue_saves__+0x14>
    9262:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    9264:	6a 81       	ldd	r22, Y+2	; 0x02
    9266:	7b 81       	ldd	r23, Y+3	; 0x03
    9268:	88 81       	ld	r24, Y
    926a:	99 81       	ldd	r25, Y+1	; 0x01
    926c:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <validate>
    9270:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    9272:	00 97       	sbiw	r24, 0x00	; 0
    9274:	09 f0       	breq	.+2      	; 0x9278 <f_truncate+0x22>
    9276:	56 c0       	rjmp	.+172    	; 0x9324 <f_truncate+0xce>
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
    9278:	6c 81       	ldd	r22, Y+4	; 0x04
    927a:	67 fd       	sbrc	r22, 7
    927c:	05 c0       	rjmp	.+10     	; 0x9288 <f_truncate+0x32>
			res = FR_INT_ERR;
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
    927e:	61 fd       	sbrc	r22, 1
    9280:	57 c0       	rjmp	.+174    	; 0x9330 <f_truncate+0xda>
				res = FR_DENIED;
    9282:	07 e0       	ldi	r16, 0x07	; 7
    9284:	10 e0       	ldi	r17, 0x00	; 0
    9286:	4e c0       	rjmp	.+156    	; 0x9324 <f_truncate+0xce>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
			res = FR_INT_ERR;
    9288:	02 e0       	ldi	r16, 0x02	; 2
    928a:	10 e0       	ldi	r17, 0x00	; 0
    928c:	4b c0       	rjmp	.+150    	; 0x9324 <f_truncate+0xce>
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    928e:	2a 87       	std	Y+10, r18	; 0x0a
    9290:	3b 87       	std	Y+11, r19	; 0x0b
    9292:	4c 87       	std	Y+12, r20	; 0x0c
    9294:	5d 87       	std	Y+13, r21	; 0x0d
			fp->flag |= FA__WRITTEN;
    9296:	60 62       	ori	r22, 0x20	; 32
    9298:	6c 83       	std	Y+4, r22	; 0x04
    929a:	88 81       	ld	r24, Y
    929c:	99 81       	ldd	r25, Y+1	; 0x01
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    929e:	21 15       	cp	r18, r1
    92a0:	31 05       	cpc	r19, r1
    92a2:	41 05       	cpc	r20, r1
    92a4:	51 05       	cpc	r21, r1
    92a6:	61 f4       	brne	.+24     	; 0x92c0 <f_truncate+0x6a>
				res = remove_chain(fp->fs, fp->org_clust);
    92a8:	4e 85       	ldd	r20, Y+14	; 0x0e
    92aa:	5f 85       	ldd	r21, Y+15	; 0x0f
    92ac:	68 89       	ldd	r22, Y+16	; 0x10
    92ae:	79 89       	ldd	r23, Y+17	; 0x11
    92b0:	0e 94 e3 3c 	call	0x79c6	; 0x79c6 <remove_chain>
    92b4:	8c 01       	movw	r16, r24
				fp->org_clust = 0;
    92b6:	1e 86       	std	Y+14, r1	; 0x0e
    92b8:	1f 86       	std	Y+15, r1	; 0x0f
    92ba:	18 8a       	std	Y+16, r1	; 0x10
    92bc:	19 8a       	std	Y+17, r1	; 0x11
    92be:	2c c0       	rjmp	.+88     	; 0x9318 <f_truncate+0xc2>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->curr_clust);
    92c0:	4a 89       	ldd	r20, Y+18	; 0x12
    92c2:	5b 89       	ldd	r21, Y+19	; 0x13
    92c4:	6c 89       	ldd	r22, Y+20	; 0x14
    92c6:	7d 89       	ldd	r23, Y+21	; 0x15
    92c8:	0e 94 52 34 	call	0x68a4	; 0x68a4 <get_fat>
    92cc:	6b 01       	movw	r12, r22
    92ce:	7c 01       	movw	r14, r24
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    92d0:	8f ef       	ldi	r24, 0xFF	; 255
    92d2:	c8 16       	cp	r12, r24
    92d4:	8f ef       	ldi	r24, 0xFF	; 255
    92d6:	d8 06       	cpc	r13, r24
    92d8:	8f ef       	ldi	r24, 0xFF	; 255
    92da:	e8 06       	cpc	r14, r24
    92dc:	8f ef       	ldi	r24, 0xFF	; 255
    92de:	f8 06       	cpc	r15, r24
    92e0:	b1 f1       	breq	.+108    	; 0x934e <f_truncate+0xf8>
				if (ncl == 1) res = FR_INT_ERR;
    92e2:	e1 e0       	ldi	r30, 0x01	; 1
    92e4:	ce 16       	cp	r12, r30
    92e6:	d1 04       	cpc	r13, r1
    92e8:	e1 04       	cpc	r14, r1
    92ea:	f1 04       	cpc	r15, r1
    92ec:	b1 f5       	brne	.+108    	; 0x935a <f_truncate+0x104>
    92ee:	32 c0       	rjmp	.+100    	; 0x9354 <f_truncate+0xfe>
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
					res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    92f0:	4a 89       	ldd	r20, Y+18	; 0x12
    92f2:	5b 89       	ldd	r21, Y+19	; 0x13
    92f4:	6c 89       	ldd	r22, Y+20	; 0x14
    92f6:	7d 89       	ldd	r23, Y+21	; 0x15
    92f8:	0f ef       	ldi	r16, 0xFF	; 255
    92fa:	1f ef       	ldi	r17, 0xFF	; 255
    92fc:	2f ef       	ldi	r18, 0xFF	; 255
    92fe:	3f e0       	ldi	r19, 0x0F	; 15
    9300:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <put_fat>
    9304:	8c 01       	movw	r16, r24
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    9306:	00 97       	sbiw	r24, 0x00	; 0
    9308:	51 f4       	brne	.+20     	; 0x931e <f_truncate+0xc8>
    930a:	88 81       	ld	r24, Y
    930c:	99 81       	ldd	r25, Y+1	; 0x01
    930e:	b7 01       	movw	r22, r14
    9310:	a6 01       	movw	r20, r12
    9312:	0e 94 e3 3c 	call	0x79c6	; 0x79c6 <remove_chain>
    9316:	8c 01       	movw	r16, r24
				}
			}
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
    9318:	01 15       	cp	r16, r1
    931a:	11 05       	cpc	r17, r1
    931c:	19 f0       	breq	.+6      	; 0x9324 <f_truncate+0xce>
    931e:	8c 81       	ldd	r24, Y+4	; 0x04
    9320:	80 68       	ori	r24, 0x80	; 128
    9322:	8c 83       	std	Y+4, r24	; 0x04
	}

	LEAVE_FF(fp->fs, res);
}
    9324:	c8 01       	movw	r24, r16
    9326:	cd b7       	in	r28, 0x3d	; 61
    9328:	de b7       	in	r29, 0x3e	; 62
    932a:	e8 e0       	ldi	r30, 0x08	; 8
    932c:	0c 94 f8 5c 	jmp	0xb9f0	; 0xb9f0 <__epilogue_restores__+0x14>
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
    9330:	2e 81       	ldd	r18, Y+6	; 0x06
    9332:	3f 81       	ldd	r19, Y+7	; 0x07
    9334:	48 85       	ldd	r20, Y+8	; 0x08
    9336:	59 85       	ldd	r21, Y+9	; 0x09
    9338:	8a 85       	ldd	r24, Y+10	; 0x0a
    933a:	9b 85       	ldd	r25, Y+11	; 0x0b
    933c:	ac 85       	ldd	r26, Y+12	; 0x0c
    933e:	bd 85       	ldd	r27, Y+13	; 0x0d
    9340:	28 17       	cp	r18, r24
    9342:	39 07       	cpc	r19, r25
    9344:	4a 07       	cpc	r20, r26
    9346:	5b 07       	cpc	r21, r27
    9348:	08 f4       	brcc	.+2      	; 0x934c <f_truncate+0xf6>
    934a:	a1 cf       	rjmp	.-190    	; 0x928e <f_truncate+0x38>
    934c:	eb cf       	rjmp	.-42     	; 0x9324 <f_truncate+0xce>
				res = remove_chain(fp->fs, fp->org_clust);
				fp->org_clust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->curr_clust);
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    934e:	01 e0       	ldi	r16, 0x01	; 1
    9350:	10 e0       	ldi	r17, 0x00	; 0
    9352:	e5 cf       	rjmp	.-54     	; 0x931e <f_truncate+0xc8>
				if (ncl == 1) res = FR_INT_ERR;
    9354:	02 e0       	ldi	r16, 0x02	; 2
    9356:	10 e0       	ldi	r17, 0x00	; 0
    9358:	e2 cf       	rjmp	.-60     	; 0x931e <f_truncate+0xc8>
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
    935a:	88 81       	ld	r24, Y
    935c:	99 81       	ldd	r25, Y+1	; 0x01
    935e:	fc 01       	movw	r30, r24
    9360:	22 8d       	ldd	r18, Z+26	; 0x1a
    9362:	33 8d       	ldd	r19, Z+27	; 0x1b
    9364:	44 8d       	ldd	r20, Z+28	; 0x1c
    9366:	55 8d       	ldd	r21, Z+29	; 0x1d
    9368:	c2 16       	cp	r12, r18
    936a:	d3 06       	cpc	r13, r19
    936c:	e4 06       	cpc	r14, r20
    936e:	f5 06       	cpc	r15, r21
    9370:	c8 f6       	brcc	.-78     	; 0x9324 <f_truncate+0xce>
    9372:	be cf       	rjmp	.-132    	; 0x92f0 <f_truncate+0x9a>

00009374 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    9374:	a2 e4       	ldi	r26, 0x42	; 66
    9376:	b0 e0       	ldi	r27, 0x00	; 0
    9378:	e0 ec       	ldi	r30, 0xC0	; 192
    937a:	f9 e4       	ldi	r31, 0x49	; 73
    937c:	0c 94 dc 5c 	jmp	0xb9b8	; 0xb9b8 <__prologue_saves__+0x14>
    9380:	8e 01       	movw	r16, r28
    9382:	0f 5b       	subi	r16, 0xBF	; 191
    9384:	1f 4f       	sbci	r17, 0xFF	; 255
    9386:	f8 01       	movw	r30, r16
    9388:	91 83       	std	Z+1, r25	; 0x01
    938a:	80 83       	st	Z, r24
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    938c:	bd e0       	ldi	r27, 0x0D	; 13
    938e:	eb 2e       	mov	r14, r27
    9390:	f1 2c       	mov	r15, r1
    9392:	ec 0e       	add	r14, r28
    9394:	fd 1e       	adc	r15, r29
    9396:	c8 01       	movw	r24, r16
    9398:	b7 01       	movw	r22, r14
    939a:	41 e0       	ldi	r20, 0x01	; 1
    939c:	0e 94 04 30 	call	0x6008	; 0x6008 <chk_mounted>
    93a0:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    93a2:	00 97       	sbiw	r24, 0x00	; 0
    93a4:	09 f0       	breq	.+2      	; 0x93a8 <f_unlink+0x34>
    93a6:	85 c0       	rjmp	.+266    	; 0x94b2 <f_unlink+0x13e>
		INIT_BUF(dj);
    93a8:	ce 01       	movw	r24, r28
    93aa:	01 96       	adiw	r24, 0x01	; 1
    93ac:	9a a3       	std	Y+34, r25	; 0x22
    93ae:	89 a3       	std	Y+33, r24	; 0x21
    93b0:	8e e8       	ldi	r24, 0x8E	; 142
    93b2:	91 e0       	ldi	r25, 0x01	; 1
    93b4:	9c a3       	std	Y+36, r25	; 0x24
    93b6:	8b a3       	std	Y+35, r24	; 0x23
		res = follow_path(&dj, path);		/* Follow the file path */
    93b8:	f8 01       	movw	r30, r16
    93ba:	60 81       	ld	r22, Z
    93bc:	71 81       	ldd	r23, Z+1	; 0x01
    93be:	c7 01       	movw	r24, r14
    93c0:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <follow_path>
    93c4:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    93c6:	00 97       	sbiw	r24, 0x00	; 0
    93c8:	09 f0       	breq	.+2      	; 0x93cc <f_unlink+0x58>
    93ca:	73 c0       	rjmp	.+230    	; 0x94b2 <f_unlink+0x13e>
    93cc:	e9 a1       	ldd	r30, Y+33	; 0x21
    93ce:	fa a1       	ldd	r31, Y+34	; 0x22
    93d0:	83 85       	ldd	r24, Z+11	; 0x0b
    93d2:	85 ff       	sbrs	r24, 5
    93d4:	74 c0       	rjmp	.+232    	; 0x94be <f_unlink+0x14a>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
    93d6:	26 e0       	ldi	r18, 0x06	; 6
    93d8:	30 e0       	ldi	r19, 0x00	; 0
    93da:	6b c0       	rjmp	.+214    	; 0x94b2 <f_unlink+0x13e>
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    93dc:	83 85       	ldd	r24, Z+11	; 0x0b
    93de:	80 ff       	sbrs	r24, 0
    93e0:	05 c0       	rjmp	.+10     	; 0x93ec <f_unlink+0x78>
					res = FR_DENIED;		/* Cannot remove R/O object */
    93e2:	27 e0       	ldi	r18, 0x07	; 7
    93e4:	30 e0       	ldi	r19, 0x00	; 0
    93e6:	02 c0       	rjmp	.+4      	; 0x93ec <f_unlink+0x78>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    93e8:	26 e0       	ldi	r18, 0x06	; 6
    93ea:	30 e0       	ldi	r19, 0x00	; 0
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
    93ec:	e4 88       	ldd	r14, Z+20	; 0x14
    93ee:	f5 88       	ldd	r15, Z+21	; 0x15
    93f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    93f2:	93 8d       	ldd	r25, Z+27	; 0x1b
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    93f4:	21 15       	cp	r18, r1
    93f6:	31 05       	cpc	r19, r1
    93f8:	09 f0       	breq	.+2      	; 0x93fc <f_unlink+0x88>
    93fa:	5b c0       	rjmp	.+182    	; 0x94b2 <f_unlink+0x13e>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
    93fc:	00 e0       	ldi	r16, 0x00	; 0
    93fe:	10 e0       	ldi	r17, 0x00	; 0
    9400:	87 01       	movw	r16, r14
    9402:	ff 24       	eor	r15, r15
    9404:	ee 24       	eor	r14, r14
    9406:	a0 e0       	ldi	r26, 0x00	; 0
    9408:	b0 e0       	ldi	r27, 0x00	; 0
    940a:	e8 2a       	or	r14, r24
    940c:	f9 2a       	or	r15, r25
    940e:	0a 2b       	or	r16, r26
    9410:	1b 2b       	or	r17, r27
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    9412:	83 85       	ldd	r24, Z+11	; 0x0b
    9414:	84 ff       	sbrs	r24, 4
    9416:	59 c0       	rjmp	.+178    	; 0x94ca <f_unlink+0x156>
				if (dclst < 2) {
    9418:	f2 e0       	ldi	r31, 0x02	; 2
    941a:	ef 16       	cp	r14, r31
    941c:	f1 04       	cpc	r15, r1
    941e:	01 05       	cpc	r16, r1
    9420:	11 05       	cpc	r17, r1
    9422:	70 f1       	brcs	.+92     	; 0x9480 <f_unlink+0x10c>
					res = FR_INT_ERR;
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
    9424:	e7 e2       	ldi	r30, 0x27	; 39
    9426:	ce 2e       	mov	r12, r30
    9428:	d1 2c       	mov	r13, r1
    942a:	cc 0e       	add	r12, r28
    942c:	dd 1e       	adc	r13, r29
    942e:	c6 01       	movw	r24, r12
    9430:	be 01       	movw	r22, r28
    9432:	63 5f       	subi	r22, 0xF3	; 243
    9434:	7f 4f       	sbci	r23, 0xFF	; 255
    9436:	4a e1       	ldi	r20, 0x1A	; 26
    9438:	50 e0       	ldi	r21, 0x00	; 0
    943a:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <mem_cpy>
					sdj.sclust = dclst;
    943e:	ed a6       	std	Y+45, r14	; 0x2d
    9440:	fe a6       	std	Y+46, r15	; 0x2e
    9442:	0f a7       	std	Y+47, r16	; 0x2f
    9444:	18 ab       	std	Y+48, r17	; 0x30
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    9446:	c6 01       	movw	r24, r12
    9448:	62 e0       	ldi	r22, 0x02	; 2
    944a:	70 e0       	ldi	r23, 0x00	; 0
    944c:	0e 94 13 35 	call	0x6a26	; 0x6a26 <dir_sdi>
    9450:	9c 01       	movw	r18, r24
					if (res == FR_OK) {
    9452:	00 97       	sbiw	r24, 0x00	; 0
    9454:	71 f5       	brne	.+92     	; 0x94b2 <f_unlink+0x13e>
						res = dir_read(&sdj);
    9456:	c6 01       	movw	r24, r12
    9458:	0e 94 06 3c 	call	0x780c	; 0x780c <dir_read>
    945c:	9c 01       	movw	r18, r24
						if (res == FR_OK			/* Not empty dir */
    945e:	00 97       	sbiw	r24, 0x00	; 0
    9460:	91 f0       	breq	.+36     	; 0x9486 <f_unlink+0x112>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
    9462:	ef a1       	ldd	r30, Y+39	; 0x27
    9464:	f8 a5       	ldd	r31, Y+40	; 0x28
    9466:	86 89       	ldd	r24, Z+22	; 0x16
    9468:	97 89       	ldd	r25, Z+23	; 0x17
    946a:	a0 8d       	ldd	r26, Z+24	; 0x18
    946c:	b1 8d       	ldd	r27, Z+25	; 0x19
    946e:	e8 16       	cp	r14, r24
    9470:	f9 06       	cpc	r15, r25
    9472:	0a 07       	cpc	r16, r26
    9474:	1b 07       	cpc	r17, r27
    9476:	39 f0       	breq	.+14     	; 0x9486 <f_unlink+0x112>
#endif
						) res = FR_DENIED;
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    9478:	24 30       	cpi	r18, 0x04	; 4
    947a:	31 05       	cpc	r19, r1
    947c:	31 f1       	breq	.+76     	; 0x94ca <f_unlink+0x156>
    947e:	19 c0       	rjmp	.+50     	; 0x94b2 <f_unlink+0x13e>
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
				if (dclst < 2) {
					res = FR_INT_ERR;
    9480:	22 e0       	ldi	r18, 0x02	; 2
    9482:	30 e0       	ldi	r19, 0x00	; 0
    9484:	16 c0       	rjmp	.+44     	; 0x94b2 <f_unlink+0x13e>
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
					if (res == FR_OK) {
						res = dir_read(&sdj);
						if (res == FR_OK			/* Not empty dir */
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
    9486:	27 e0       	ldi	r18, 0x07	; 7
    9488:	30 e0       	ldi	r19, 0x00	; 0
    948a:	13 c0       	rjmp	.+38     	; 0x94b2 <f_unlink+0x13e>
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
    948c:	e1 14       	cp	r14, r1
    948e:	f1 04       	cpc	r15, r1
    9490:	01 05       	cpc	r16, r1
    9492:	11 05       	cpc	r17, r1
    9494:	49 f0       	breq	.+18     	; 0x94a8 <f_unlink+0x134>
						res = remove_chain(dj.fs, dclst);
    9496:	8d 85       	ldd	r24, Y+13	; 0x0d
    9498:	9e 85       	ldd	r25, Y+14	; 0x0e
    949a:	b8 01       	movw	r22, r16
    949c:	a7 01       	movw	r20, r14
    949e:	0e 94 e3 3c 	call	0x79c6	; 0x79c6 <remove_chain>
    94a2:	9c 01       	movw	r18, r24
					if (res == FR_OK) res = sync(dj.fs);
    94a4:	00 97       	sbiw	r24, 0x00	; 0
    94a6:	29 f4       	brne	.+10     	; 0x94b2 <f_unlink+0x13e>
    94a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    94aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    94ac:	0e 94 d6 32 	call	0x65ac	; 0x65ac <sync>
    94b0:	9c 01       	movw	r18, r24
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
    94b2:	c9 01       	movw	r24, r18
    94b4:	ce 5b       	subi	r28, 0xBE	; 190
    94b6:	df 4f       	sbci	r29, 0xFF	; 255
    94b8:	e8 e0       	ldi	r30, 0x08	; 8
    94ba:	0c 94 f8 5c 	jmp	0xb9f0	; 0xb9f0 <__epilogue_restores__+0x14>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
    94be:	ef 8d       	ldd	r30, Y+31	; 0x1f
    94c0:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {
    94c2:	30 97       	sbiw	r30, 0x00	; 0
    94c4:	09 f0       	breq	.+2      	; 0x94c8 <f_unlink+0x154>
    94c6:	8a cf       	rjmp	.-236    	; 0x93dc <f_unlink+0x68>
    94c8:	8f cf       	rjmp	.-226    	; 0x93e8 <f_unlink+0x74>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
    94ca:	ce 01       	movw	r24, r28
    94cc:	0d 96       	adiw	r24, 0x0d	; 13
    94ce:	0e 94 c3 3b 	call	0x7786	; 0x7786 <dir_remove>
    94d2:	9c 01       	movw	r18, r24
				if (res == FR_OK) {
    94d4:	00 97       	sbiw	r24, 0x00	; 0
    94d6:	d1 f2       	breq	.-76     	; 0x948c <f_unlink+0x118>
    94d8:	ec cf       	rjmp	.-40     	; 0x94b2 <f_unlink+0x13e>

000094da <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
    94da:	ae e2       	ldi	r26, 0x2E	; 46
    94dc:	b0 e0       	ldi	r27, 0x00	; 0
    94de:	e3 e7       	ldi	r30, 0x73	; 115
    94e0:	fa e4       	ldi	r31, 0x4A	; 74
    94e2:	0c 94 d2 5c 	jmp	0xb9a4	; 0xb9a4 <__prologue_saves__>
    94e6:	98 a7       	std	Y+40, r25	; 0x28
    94e8:	8f a3       	std	Y+39, r24	; 0x27
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
    94ea:	0e 94 61 23 	call	0x46c2	; 0x46c2 <get_fattime>
    94ee:	69 a7       	std	Y+41, r22	; 0x29
    94f0:	7a a7       	std	Y+42, r23	; 0x2a
    94f2:	8b a7       	std	Y+43, r24	; 0x2b
    94f4:	9c a7       	std	Y+44, r25	; 0x2c
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    94f6:	3d e0       	ldi	r19, 0x0D	; 13
    94f8:	c3 2e       	mov	r12, r19
    94fa:	d1 2c       	mov	r13, r1
    94fc:	cc 0e       	add	r12, r28
    94fe:	dd 1e       	adc	r13, r29
    9500:	ce 01       	movw	r24, r28
    9502:	87 96       	adiw	r24, 0x27	; 39
    9504:	b6 01       	movw	r22, r12
    9506:	41 e0       	ldi	r20, 0x01	; 1
    9508:	0e 94 04 30 	call	0x6008	; 0x6008 <chk_mounted>
    950c:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    950e:	00 97       	sbiw	r24, 0x00	; 0
    9510:	09 f0       	breq	.+2      	; 0x9514 <f_mkdir+0x3a>
    9512:	ee c0       	rjmp	.+476    	; 0x96f0 <f_mkdir+0x216>
		INIT_BUF(dj);
    9514:	ce 01       	movw	r24, r28
    9516:	01 96       	adiw	r24, 0x01	; 1
    9518:	9a a3       	std	Y+34, r25	; 0x22
    951a:	89 a3       	std	Y+33, r24	; 0x21
    951c:	8e e8       	ldi	r24, 0x8E	; 142
    951e:	91 e0       	ldi	r25, 0x01	; 1
    9520:	9c a3       	std	Y+36, r25	; 0x24
    9522:	8b a3       	std	Y+35, r24	; 0x23
		res = follow_path(&dj, path);			/* Follow the file path */
    9524:	6f a1       	ldd	r22, Y+39	; 0x27
    9526:	78 a5       	ldd	r23, Y+40	; 0x28
    9528:	c6 01       	movw	r24, r12
    952a:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <follow_path>
    952e:	8c 01       	movw	r16, r24
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    9530:	00 97       	sbiw	r24, 0x00	; 0
    9532:	61 f0       	breq	.+24     	; 0x954c <f_mkdir+0x72>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
    9534:	84 30       	cpi	r24, 0x04	; 4
    9536:	91 05       	cpc	r25, r1
    9538:	09 f0       	breq	.+2      	; 0x953c <f_mkdir+0x62>
    953a:	da c0       	rjmp	.+436    	; 0x96f0 <f_mkdir+0x216>
    953c:	e9 a1       	ldd	r30, Y+33	; 0x21
    953e:	fa a1       	ldd	r31, Y+34	; 0x22
    9540:	83 85       	ldd	r24, Z+11	; 0x0b
    9542:	85 ff       	sbrs	r24, 5
    9544:	da c0       	rjmp	.+436    	; 0x96fa <f_mkdir+0x220>
			res = FR_INVALID_NAME;
    9546:	06 e0       	ldi	r16, 0x06	; 6
    9548:	10 e0       	ldi	r17, 0x00	; 0
    954a:	d2 c0       	rjmp	.+420    	; 0x96f0 <f_mkdir+0x216>

	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    954c:	08 e0       	ldi	r16, 0x08	; 8
    954e:	10 e0       	ldi	r17, 0x00	; 0
    9550:	cf c0       	rjmp	.+414    	; 0x96f0 <f_mkdir+0x216>
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
    9552:	81 e0       	ldi	r24, 0x01	; 1
    9554:	c8 16       	cp	r12, r24
    9556:	d1 04       	cpc	r13, r1
    9558:	e1 04       	cpc	r14, r1
    955a:	f1 04       	cpc	r15, r1
    955c:	09 f4       	brne	.+2      	; 0x9560 <f_mkdir+0x86>
    955e:	e0 c0       	rjmp	.+448    	; 0x9720 <f_mkdir+0x246>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    9560:	9f ef       	ldi	r25, 0xFF	; 255
    9562:	c9 16       	cp	r12, r25
    9564:	9f ef       	ldi	r25, 0xFF	; 255
    9566:	d9 06       	cpc	r13, r25
    9568:	9f ef       	ldi	r25, 0xFF	; 255
    956a:	e9 06       	cpc	r14, r25
    956c:	9f ef       	ldi	r25, 0xFF	; 255
    956e:	f9 06       	cpc	r15, r25
    9570:	09 f4       	brne	.+2      	; 0x9574 <f_mkdir+0x9a>
    9572:	d9 c0       	rjmp	.+434    	; 0x9726 <f_mkdir+0x24c>
    9574:	db c0       	rjmp	.+438    	; 0x972c <f_mkdir+0x252>
			if (res == FR_OK)					/* Flush FAT */
				res = move_window(dj.fs, 0);
			if (res == FR_OK) {					/* Initialize the new directory table */
				dsc = clust2sect(dj.fs, dcl);
    9576:	0d 85       	ldd	r16, Y+13	; 0x0d
    9578:	1e 85       	ldd	r17, Y+14	; 0x0e
    957a:	c8 01       	movw	r24, r16
    957c:	b7 01       	movw	r22, r14
    957e:	a6 01       	movw	r20, r12
    9580:	0e 94 22 34 	call	0x6844	; 0x6844 <clust2sect>
    9584:	2b 01       	movw	r4, r22
    9586:	3c 01       	movw	r6, r24
				dir = dj.fs->win;
    9588:	22 e3       	ldi	r18, 0x32	; 50
    958a:	82 2e       	mov	r8, r18
    958c:	91 2c       	mov	r9, r1
    958e:	80 0e       	add	r8, r16
    9590:	91 1e       	adc	r9, r17
				mem_set(dir, 0, SS(dj.fs));
    9592:	c4 01       	movw	r24, r8
    9594:	60 e0       	ldi	r22, 0x00	; 0
    9596:	70 e0       	ldi	r23, 0x00	; 0
    9598:	40 e0       	ldi	r20, 0x00	; 0
    959a:	52 e0       	ldi	r21, 0x02	; 2
    959c:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <mem_set>
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
    95a0:	c4 01       	movw	r24, r8
    95a2:	60 e2       	ldi	r22, 0x20	; 32
    95a4:	70 e0       	ldi	r23, 0x00	; 0
    95a6:	4b e0       	ldi	r20, 0x0B	; 11
    95a8:	50 e0       	ldi	r21, 0x00	; 0
    95aa:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <mem_set>
				dir[DIR_Name] = '.';
    95ae:	9e e2       	ldi	r25, 0x2E	; 46
    95b0:	b9 2e       	mov	r11, r25
    95b2:	d8 01       	movw	r26, r16
    95b4:	d2 96       	adiw	r26, 0x32	; 50
    95b6:	bc 92       	st	X, r11
    95b8:	d2 97       	sbiw	r26, 0x32	; 50
				dir[DIR_Attr] = AM_DIR;
    95ba:	80 e1       	ldi	r24, 0x10	; 16
    95bc:	dd 96       	adiw	r26, 0x3d	; 61
    95be:	8c 93       	st	X, r24
				ST_DWORD(dir+DIR_WrtTime, tim);
    95c0:	f8 01       	movw	r30, r16
    95c2:	e8 5b       	subi	r30, 0xB8	; 184
    95c4:	ff 4f       	sbci	r31, 0xFF	; 255
    95c6:	89 a5       	ldd	r24, Y+41	; 0x29
    95c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    95ca:	ab a5       	ldd	r26, Y+43	; 0x2b
    95cc:	bc a5       	ldd	r27, Y+44	; 0x2c
    95ce:	80 83       	st	Z, r24
    95d0:	91 83       	std	Z+1, r25	; 0x01
    95d2:	a2 83       	std	Z+2, r26	; 0x02
    95d4:	b3 83       	std	Z+3, r27	; 0x03
				ST_CLUST(dir, dcl);
    95d6:	de a6       	std	Y+46, r13	; 0x2e
    95d8:	cd a6       	std	Y+45, r12	; 0x2d
    95da:	f8 01       	movw	r30, r16
    95dc:	e4 5b       	subi	r30, 0xB4	; 180
    95de:	ff 4f       	sbci	r31, 0xFF	; 255
    95e0:	d1 82       	std	Z+1, r13	; 0x01
    95e2:	c0 82       	st	Z, r12
    95e4:	c7 01       	movw	r24, r14
    95e6:	aa 27       	eor	r26, r26
    95e8:	bb 27       	eor	r27, r27
    95ea:	1c 01       	movw	r2, r24
    95ec:	f8 01       	movw	r30, r16
    95ee:	ea 5b       	subi	r30, 0xBA	; 186
    95f0:	ff 4f       	sbci	r31, 0xFF	; 255
    95f2:	91 83       	std	Z+1, r25	; 0x01
    95f4:	80 83       	st	Z, r24
				mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
    95f6:	c8 01       	movw	r24, r16
    95f8:	8e 5a       	subi	r24, 0xAE	; 174
    95fa:	9f 4f       	sbci	r25, 0xFF	; 255
    95fc:	b4 01       	movw	r22, r8
    95fe:	40 e2       	ldi	r20, 0x20	; 32
    9600:	50 e0       	ldi	r21, 0x00	; 0
    9602:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <mem_cpy>
				dir[33] = '.'; pcl = dj.sclust;
    9606:	f8 01       	movw	r30, r16
    9608:	ed 5a       	subi	r30, 0xAD	; 173
    960a:	ff 4f       	sbci	r31, 0xFF	; 255
    960c:	b0 82       	st	Z, r11
    960e:	8b 89       	ldd	r24, Y+19	; 0x13
    9610:	9c 89       	ldd	r25, Y+20	; 0x14
    9612:	ad 89       	ldd	r26, Y+21	; 0x15
    9614:	be 89       	ldd	r27, Y+22	; 0x16
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
    9616:	6d 85       	ldd	r22, Y+13	; 0x0d
    9618:	7e 85       	ldd	r23, Y+14	; 0x0e
    961a:	fb 01       	movw	r30, r22
    961c:	20 81       	ld	r18, Z
    961e:	23 30       	cpi	r18, 0x03	; 3
    9620:	69 f4       	brne	.+26     	; 0x963c <f_mkdir+0x162>
    9622:	26 a1       	ldd	r18, Z+38	; 0x26
    9624:	37 a1       	ldd	r19, Z+39	; 0x27
    9626:	40 a5       	ldd	r20, Z+40	; 0x28
    9628:	51 a5       	ldd	r21, Z+41	; 0x29
    962a:	82 17       	cp	r24, r18
    962c:	93 07       	cpc	r25, r19
    962e:	a4 07       	cpc	r26, r20
    9630:	b5 07       	cpc	r27, r21
    9632:	21 f4       	brne	.+8      	; 0x963c <f_mkdir+0x162>
					pcl = 0;
    9634:	80 e0       	ldi	r24, 0x00	; 0
    9636:	90 e0       	ldi	r25, 0x00	; 0
    9638:	a0 e0       	ldi	r26, 0x00	; 0
    963a:	b0 e0       	ldi	r27, 0x00	; 0
				ST_CLUST(dir+32, pcl);
    963c:	98 01       	movw	r18, r16
    963e:	24 59       	subi	r18, 0x94	; 148
    9640:	3f 4f       	sbci	r19, 0xFF	; 255
    9642:	f9 01       	movw	r30, r18
    9644:	91 83       	std	Z+1, r25	; 0x01
    9646:	80 83       	st	Z, r24
    9648:	0a 59       	subi	r16, 0x9A	; 154
    964a:	1f 4f       	sbci	r17, 0xFF	; 255
    964c:	f8 01       	movw	r30, r16
    964e:	b1 83       	std	Z+1, r27	; 0x01
    9650:	a0 83       	st	Z, r26
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    9652:	db 01       	movw	r26, r22
    9654:	12 96       	adiw	r26, 0x02	; 2
    9656:	bc 90       	ld	r11, X
    9658:	12 97       	sbiw	r26, 0x02	; 2
					dj.fs->winsect = dsc++;
					dj.fs->wflag = 1;
    965a:	aa 24       	eor	r10, r10
    965c:	a3 94       	inc	r10
				mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+32, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    965e:	1e c0       	rjmp	.+60     	; 0x969c <f_mkdir+0x1c2>
					dj.fs->winsect = dsc++;
    9660:	8d 85       	ldd	r24, Y+13	; 0x0d
    9662:	9e 85       	ldd	r25, Y+14	; 0x0e
    9664:	fc 01       	movw	r30, r24
    9666:	46 a6       	std	Z+46, r4	; 0x2e
    9668:	57 a6       	std	Z+47, r5	; 0x2f
    966a:	60 aa       	std	Z+48, r6	; 0x30
    966c:	71 aa       	std	Z+49, r7	; 0x31
					dj.fs->wflag = 1;
    966e:	a4 82       	std	Z+4, r10	; 0x04
					res = move_window(dj.fs, 0);
    9670:	40 e0       	ldi	r20, 0x00	; 0
    9672:	50 e0       	ldi	r21, 0x00	; 0
    9674:	60 e0       	ldi	r22, 0x00	; 0
    9676:	70 e0       	ldi	r23, 0x00	; 0
    9678:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    967c:	8c 01       	movw	r16, r24
					if (res != FR_OK) break;
    967e:	00 97       	sbiw	r24, 0x00	; 0
    9680:	b1 f4       	brne	.+44     	; 0x96ae <f_mkdir+0x1d4>
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+32, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
    9682:	08 94       	sec
    9684:	41 1c       	adc	r4, r1
    9686:	51 1c       	adc	r5, r1
    9688:	61 1c       	adc	r6, r1
    968a:	71 1c       	adc	r7, r1
					dj.fs->wflag = 1;
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
    968c:	c4 01       	movw	r24, r8
    968e:	60 e0       	ldi	r22, 0x00	; 0
    9690:	70 e0       	ldi	r23, 0x00	; 0
    9692:	40 e0       	ldi	r20, 0x00	; 0
    9694:	52 e0       	ldi	r21, 0x02	; 2
    9696:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <mem_set>
				mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+32, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    969a:	ba 94       	dec	r11
    969c:	bb 20       	and	r11, r11
    969e:	01 f7       	brne	.-64     	; 0x9660 <f_mkdir+0x186>
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
    96a0:	ce 01       	movw	r24, r28
    96a2:	0d 96       	adiw	r24, 0x0d	; 13
    96a4:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <dir_register>
    96a8:	8c 01       	movw	r16, r24
			if (res != FR_OK) {
    96aa:	00 97       	sbiw	r24, 0x00	; 0
    96ac:	39 f0       	breq	.+14     	; 0x96bc <f_mkdir+0x1e2>
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
    96ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    96b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    96b2:	b7 01       	movw	r22, r14
    96b4:	a6 01       	movw	r20, r12
    96b6:	0e 94 e3 3c 	call	0x79c6	; 0x79c6 <remove_chain>
    96ba:	1a c0       	rjmp	.+52     	; 0x96f0 <f_mkdir+0x216>
			} else {
				dir = dj.dir;
    96bc:	ef 8d       	ldd	r30, Y+31	; 0x1f
    96be:	f8 a1       	ldd	r31, Y+32	; 0x20
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
    96c0:	80 e1       	ldi	r24, 0x10	; 16
    96c2:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
    96c4:	89 a5       	ldd	r24, Y+41	; 0x29
    96c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    96c8:	ab a5       	ldd	r26, Y+43	; 0x2b
    96ca:	bc a5       	ldd	r27, Y+44	; 0x2c
    96cc:	86 8b       	std	Z+22, r24	; 0x16
    96ce:	97 8b       	std	Z+23, r25	; 0x17
    96d0:	a0 8f       	std	Z+24, r26	; 0x18
    96d2:	b1 8f       	std	Z+25, r27	; 0x19
				ST_CLUST(dir, dcl);					/* Table start cluster */
    96d4:	ad a5       	ldd	r26, Y+45	; 0x2d
    96d6:	be a5       	ldd	r27, Y+46	; 0x2e
    96d8:	b3 8f       	std	Z+27, r27	; 0x1b
    96da:	a2 8f       	std	Z+26, r26	; 0x1a
    96dc:	35 8a       	std	Z+21, r3	; 0x15
    96de:	24 8a       	std	Z+20, r2	; 0x14
				dj.fs->wflag = 1;
    96e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    96e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    96e4:	21 e0       	ldi	r18, 0x01	; 1
    96e6:	fc 01       	movw	r30, r24
    96e8:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    96ea:	0e 94 d6 32 	call	0x65ac	; 0x65ac <sync>
    96ee:	8c 01       	movw	r16, r24
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    96f0:	c8 01       	movw	r24, r16
    96f2:	ae 96       	adiw	r28, 0x2e	; 46
    96f4:	e2 e1       	ldi	r30, 0x12	; 18
    96f6:	0c 94 ee 5c 	jmp	0xb9dc	; 0xb9dc <__epilogue_restores__>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
    96fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    96fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    96fe:	40 e0       	ldi	r20, 0x00	; 0
    9700:	50 e0       	ldi	r21, 0x00	; 0
    9702:	60 e0       	ldi	r22, 0x00	; 0
    9704:	70 e0       	ldi	r23, 0x00	; 0
    9706:	0e 94 9c 36 	call	0x6d38	; 0x6d38 <create_chain>
    970a:	6b 01       	movw	r12, r22
    970c:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    970e:	61 15       	cp	r22, r1
    9710:	71 05       	cpc	r23, r1
    9712:	81 05       	cpc	r24, r1
    9714:	91 05       	cpc	r25, r1
    9716:	09 f0       	breq	.+2      	; 0x971a <f_mkdir+0x240>
    9718:	1c cf       	rjmp	.-456    	; 0x9552 <f_mkdir+0x78>
    971a:	07 e0       	ldi	r16, 0x07	; 7
    971c:	10 e0       	ldi	r17, 0x00	; 0
    971e:	c7 cf       	rjmp	.-114    	; 0x96ae <f_mkdir+0x1d4>
			if (dcl == 1) res = FR_INT_ERR;
    9720:	02 e0       	ldi	r16, 0x02	; 2
    9722:	10 e0       	ldi	r17, 0x00	; 0
    9724:	c4 cf       	rjmp	.-120    	; 0x96ae <f_mkdir+0x1d4>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    9726:	01 e0       	ldi	r16, 0x01	; 1
    9728:	10 e0       	ldi	r17, 0x00	; 0
    972a:	c1 cf       	rjmp	.-126    	; 0x96ae <f_mkdir+0x1d4>
			if (res == FR_OK)					/* Flush FAT */
				res = move_window(dj.fs, 0);
    972c:	8d 85       	ldd	r24, Y+13	; 0x0d
    972e:	9e 85       	ldd	r25, Y+14	; 0x0e
    9730:	40 e0       	ldi	r20, 0x00	; 0
    9732:	50 e0       	ldi	r21, 0x00	; 0
    9734:	60 e0       	ldi	r22, 0x00	; 0
    9736:	70 e0       	ldi	r23, 0x00	; 0
    9738:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    973c:	8c 01       	movw	r16, r24
			if (res == FR_OK) {					/* Initialize the new directory table */
    973e:	00 97       	sbiw	r24, 0x00	; 0
    9740:	09 f4       	brne	.+2      	; 0x9744 <f_mkdir+0x26a>
    9742:	19 cf       	rjmp	.-462    	; 0x9576 <f_mkdir+0x9c>
    9744:	b4 cf       	rjmp	.-152    	; 0x96ae <f_mkdir+0x1d4>

00009746 <f_chmod>:
FRESULT f_chmod (
	const TCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    9746:	a8 e2       	ldi	r26, 0x28	; 40
    9748:	b0 e0       	ldi	r27, 0x00	; 0
    974a:	e9 ea       	ldi	r30, 0xA9	; 169
    974c:	fb e4       	ldi	r31, 0x4B	; 75
    974e:	0c 94 de 5c 	jmp	0xb9bc	; 0xb9bc <__prologue_saves__+0x18>
    9752:	98 a7       	std	Y+40, r25	; 0x28
    9754:	8f a3       	std	Y+39, r24	; 0x27
    9756:	f6 2e       	mov	r15, r22
    9758:	e4 2e       	mov	r14, r20
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    975a:	8e 01       	movw	r16, r28
    975c:	03 5f       	subi	r16, 0xF3	; 243
    975e:	1f 4f       	sbci	r17, 0xFF	; 255
    9760:	ce 01       	movw	r24, r28
    9762:	87 96       	adiw	r24, 0x27	; 39
    9764:	b8 01       	movw	r22, r16
    9766:	41 e0       	ldi	r20, 0x01	; 1
    9768:	0e 94 04 30 	call	0x6008	; 0x6008 <chk_mounted>
    976c:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    976e:	00 97       	sbiw	r24, 0x00	; 0
    9770:	59 f5       	brne	.+86     	; 0x97c8 <f_chmod+0x82>
		INIT_BUF(dj);
    9772:	ce 01       	movw	r24, r28
    9774:	01 96       	adiw	r24, 0x01	; 1
    9776:	9a a3       	std	Y+34, r25	; 0x22
    9778:	89 a3       	std	Y+33, r24	; 0x21
    977a:	8e e8       	ldi	r24, 0x8E	; 142
    977c:	91 e0       	ldi	r25, 0x01	; 1
    977e:	9c a3       	std	Y+36, r25	; 0x24
    9780:	8b a3       	std	Y+35, r24	; 0x23
		res = follow_path(&dj, path);		/* Follow the file path */
    9782:	2f a1       	ldd	r18, Y+39	; 0x27
    9784:	38 a5       	ldd	r19, Y+40	; 0x28
    9786:	c8 01       	movw	r24, r16
    9788:	b9 01       	movw	r22, r18
    978a:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <follow_path>
    978e:	9c 01       	movw	r18, r24
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    9790:	00 97       	sbiw	r24, 0x00	; 0
    9792:	d1 f4       	brne	.+52     	; 0x97c8 <f_chmod+0x82>
    9794:	e9 a1       	ldd	r30, Y+33	; 0x21
    9796:	fa a1       	ldd	r31, Y+34	; 0x22
    9798:	83 85       	ldd	r24, Z+11	; 0x0b
    979a:	85 ff       	sbrs	r24, 5
    979c:	1a c0       	rjmp	.+52     	; 0x97d2 <f_chmod+0x8c>
    979e:	12 c0       	rjmp	.+36     	; 0x97c4 <f_chmod+0x7e>
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    97a0:	87 e2       	ldi	r24, 0x27	; 39
    97a2:	e8 22       	and	r14, r24
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    97a4:	8e 2d       	mov	r24, r14
    97a6:	80 95       	com	r24
    97a8:	93 85       	ldd	r25, Z+11	; 0x0b
    97aa:	89 23       	and	r24, r25
    97ac:	ef 20       	and	r14, r15
    97ae:	8e 29       	or	r24, r14
    97b0:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    97b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    97b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    97b6:	21 e0       	ldi	r18, 0x01	; 1
    97b8:	fc 01       	movw	r30, r24
    97ba:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    97bc:	0e 94 d6 32 	call	0x65ac	; 0x65ac <sync>
    97c0:	9c 01       	movw	r18, r24
    97c2:	02 c0       	rjmp	.+4      	; 0x97c8 <f_chmod+0x82>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
    97c4:	26 e0       	ldi	r18, 0x06	; 6
    97c6:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    97c8:	c9 01       	movw	r24, r18
    97ca:	a8 96       	adiw	r28, 0x28	; 40
    97cc:	e6 e0       	ldi	r30, 0x06	; 6
    97ce:	0c 94 fa 5c 	jmp	0xb9f4	; 0xb9f4 <__epilogue_restores__+0x18>
		res = follow_path(&dj, path);		/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    97d2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    97d4:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    97d6:	30 97       	sbiw	r30, 0x00	; 0
    97d8:	19 f7       	brne	.-58     	; 0x97a0 <f_chmod+0x5a>
    97da:	f4 cf       	rjmp	.-24     	; 0x97c4 <f_chmod+0x7e>

000097dc <f_utime>:

FRESULT f_utime (
	const TCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the time stamp to be set */
)
{
    97dc:	a8 e2       	ldi	r26, 0x28	; 40
    97de:	b0 e0       	ldi	r27, 0x00	; 0
    97e0:	e4 ef       	ldi	r30, 0xF4	; 244
    97e2:	fb e4       	ldi	r31, 0x4B	; 75
    97e4:	0c 94 de 5c 	jmp	0xb9bc	; 0xb9bc <__prologue_saves__+0x18>
    97e8:	98 a7       	std	Y+40, r25	; 0x28
    97ea:	8f a3       	std	Y+39, r24	; 0x27
    97ec:	7b 01       	movw	r14, r22
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    97ee:	8e 01       	movw	r16, r28
    97f0:	03 5f       	subi	r16, 0xF3	; 243
    97f2:	1f 4f       	sbci	r17, 0xFF	; 255
    97f4:	ce 01       	movw	r24, r28
    97f6:	87 96       	adiw	r24, 0x27	; 39
    97f8:	b8 01       	movw	r22, r16
    97fa:	41 e0       	ldi	r20, 0x01	; 1
    97fc:	0e 94 04 30 	call	0x6008	; 0x6008 <chk_mounted>
    9800:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    9802:	00 97       	sbiw	r24, 0x00	; 0
    9804:	71 f5       	brne	.+92     	; 0x9862 <f_utime+0x86>
		INIT_BUF(dj);
    9806:	ce 01       	movw	r24, r28
    9808:	01 96       	adiw	r24, 0x01	; 1
    980a:	9a a3       	std	Y+34, r25	; 0x22
    980c:	89 a3       	std	Y+33, r24	; 0x21
    980e:	8e e8       	ldi	r24, 0x8E	; 142
    9810:	91 e0       	ldi	r25, 0x01	; 1
    9812:	9c a3       	std	Y+36, r25	; 0x24
    9814:	8b a3       	std	Y+35, r24	; 0x23
		res = follow_path(&dj, path);	/* Follow the file path */
    9816:	6f a1       	ldd	r22, Y+39	; 0x27
    9818:	78 a5       	ldd	r23, Y+40	; 0x28
    981a:	c8 01       	movw	r24, r16
    981c:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <follow_path>
    9820:	9c 01       	movw	r18, r24
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    9822:	00 97       	sbiw	r24, 0x00	; 0
    9824:	f1 f4       	brne	.+60     	; 0x9862 <f_utime+0x86>
    9826:	e9 a1       	ldd	r30, Y+33	; 0x21
    9828:	fa a1       	ldd	r31, Y+34	; 0x22
    982a:	83 85       	ldd	r24, Z+11	; 0x0b
    982c:	85 ff       	sbrs	r24, 5
    982e:	1e c0       	rjmp	.+60     	; 0x986c <f_utime+0x90>
    9830:	16 c0       	rjmp	.+44     	; 0x985e <f_utime+0x82>
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    9832:	d7 01       	movw	r26, r14
    9834:	16 96       	adiw	r26, 0x06	; 6
    9836:	8d 91       	ld	r24, X+
    9838:	9c 91       	ld	r25, X
    983a:	17 97       	sbiw	r26, 0x07	; 7
    983c:	97 8b       	std	Z+23, r25	; 0x17
    983e:	86 8b       	std	Z+22, r24	; 0x16
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    9840:	14 96       	adiw	r26, 0x04	; 4
    9842:	8d 91       	ld	r24, X+
    9844:	9c 91       	ld	r25, X
    9846:	15 97       	sbiw	r26, 0x05	; 5
    9848:	91 8f       	std	Z+25, r25	; 0x19
    984a:	80 8f       	std	Z+24, r24	; 0x18
				dj.fs->wflag = 1;
    984c:	8d 85       	ldd	r24, Y+13	; 0x0d
    984e:	9e 85       	ldd	r25, Y+14	; 0x0e
    9850:	21 e0       	ldi	r18, 0x01	; 1
    9852:	fc 01       	movw	r30, r24
    9854:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    9856:	0e 94 d6 32 	call	0x65ac	; 0x65ac <sync>
    985a:	9c 01       	movw	r18, r24
    985c:	02 c0       	rjmp	.+4      	; 0x9862 <f_utime+0x86>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
    985e:	26 e0       	ldi	r18, 0x06	; 6
    9860:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    9862:	c9 01       	movw	r24, r18
    9864:	a8 96       	adiw	r28, 0x28	; 40
    9866:	e6 e0       	ldi	r30, 0x06	; 6
    9868:	0c 94 fa 5c 	jmp	0xb9f4	; 0xb9f4 <__epilogue_restores__+0x18>
		res = follow_path(&dj, path);	/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    986c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    986e:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {					/* Root directory */
    9870:	30 97       	sbiw	r30, 0x00	; 0
    9872:	f9 f6       	brne	.-66     	; 0x9832 <f_utime+0x56>
    9874:	f4 cf       	rjmp	.-24     	; 0x985e <f_utime+0x82>

00009876 <f_rename>:

FRESULT f_rename (
	const TCHAR *path_old,	/* Pointer to the old name */
	const TCHAR *path_new	/* Pointer to the new name */
)
{
    9876:	a7 e5       	ldi	r26, 0x57	; 87
    9878:	b0 e0       	ldi	r27, 0x00	; 0
    987a:	e1 e4       	ldi	r30, 0x41	; 65
    987c:	fc e4       	ldi	r31, 0x4C	; 76
    987e:	0c 94 dc 5c 	jmp	0xb9b8	; 0xb9b8 <__prologue_saves__+0x14>
    9882:	8e 01       	movw	r16, r28
    9884:	0a 5a       	subi	r16, 0xAA	; 170
    9886:	1f 4f       	sbci	r17, 0xFF	; 255
    9888:	d8 01       	movw	r26, r16
    988a:	8d 93       	st	X+, r24
    988c:	9c 93       	st	X, r25
    988e:	6b 01       	movw	r12, r22
	BYTE buf[21], *dir;
	DWORD dw;
	DEF_NAMEBUF;


	res = chk_mounted(&path_old, &djo.fs, 1);
    9890:	b2 e2       	ldi	r27, 0x22	; 34
    9892:	eb 2e       	mov	r14, r27
    9894:	f1 2c       	mov	r15, r1
    9896:	ec 0e       	add	r14, r28
    9898:	fd 1e       	adc	r15, r29
    989a:	c8 01       	movw	r24, r16
    989c:	b7 01       	movw	r22, r14
    989e:	41 e0       	ldi	r20, 0x01	; 1
    98a0:	0e 94 04 30 	call	0x6008	; 0x6008 <chk_mounted>
    98a4:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    98a6:	00 97       	sbiw	r24, 0x00	; 0
    98a8:	09 f0       	breq	.+2      	; 0x98ac <f_rename+0x36>
    98aa:	d9 c0       	rjmp	.+434    	; 0x9a5e <f_rename+0x1e8>
		djn.fs = djo.fs;
    98ac:	8a a1       	ldd	r24, Y+34	; 0x22
    98ae:	9b a1       	ldd	r25, Y+35	; 0x23
    98b0:	9d af       	std	Y+61, r25	; 0x3d
    98b2:	8c af       	std	Y+60, r24	; 0x3c
		INIT_BUF(djo);
    98b4:	ce 01       	movw	r24, r28
    98b6:	01 96       	adiw	r24, 0x01	; 1
    98b8:	9f ab       	std	Y+55, r25	; 0x37
    98ba:	8e ab       	std	Y+54, r24	; 0x36
    98bc:	8e e8       	ldi	r24, 0x8E	; 142
    98be:	91 e0       	ldi	r25, 0x01	; 1
    98c0:	99 af       	std	Y+57, r25	; 0x39
    98c2:	88 af       	std	Y+56, r24	; 0x38
		res = follow_path(&djo, path_old);		/* Check old object */
    98c4:	f8 01       	movw	r30, r16
    98c6:	60 81       	ld	r22, Z
    98c8:	71 81       	ldd	r23, Z+1	; 0x01
    98ca:	c7 01       	movw	r24, r14
    98cc:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <follow_path>
    98d0:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
    98d2:	00 97       	sbiw	r24, 0x00	; 0
    98d4:	09 f0       	breq	.+2      	; 0x98d8 <f_rename+0x62>
    98d6:	c3 c0       	rjmp	.+390    	; 0x9a5e <f_rename+0x1e8>
    98d8:	ee a9       	ldd	r30, Y+54	; 0x36
    98da:	ff a9       	ldd	r31, Y+55	; 0x37
    98dc:	83 85       	ldd	r24, Z+11	; 0x0b
    98de:	85 ff       	sbrs	r24, 5
    98e0:	c4 c0       	rjmp	.+392    	; 0x9a6a <f_rename+0x1f4>
			res = FR_INVALID_NAME;
    98e2:	26 e0       	ldi	r18, 0x06	; 6
    98e4:	30 e0       	ldi	r19, 0x00	; 0
    98e6:	bb c0       	rjmp	.+374    	; 0x9a5e <f_rename+0x1e8>
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
    98e8:	65 5f       	subi	r22, 0xF5	; 245
    98ea:	7f 4f       	sbci	r23, 0xFF	; 255
    98ec:	ce 01       	movw	r24, r28
    98ee:	0d 96       	adiw	r24, 0x0d	; 13
    98f0:	45 e1       	ldi	r20, 0x15	; 21
    98f2:	50 e0       	ldi	r21, 0x00	; 0
    98f4:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
    98f8:	8e 01       	movw	r16, r28
    98fa:	04 5c       	subi	r16, 0xC4	; 196
    98fc:	1f 4f       	sbci	r17, 0xFF	; 255
    98fe:	c8 01       	movw	r24, r16
    9900:	b7 01       	movw	r22, r14
    9902:	4a e1       	ldi	r20, 0x1A	; 26
    9904:	50 e0       	ldi	r21, 0x00	; 0
    9906:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <mem_cpy>
				res = follow_path(&djn, path_new);
    990a:	c8 01       	movw	r24, r16
    990c:	b6 01       	movw	r22, r12
    990e:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <follow_path>
    9912:	9c 01       	movw	r18, r24
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    9914:	00 97       	sbiw	r24, 0x00	; 0
    9916:	09 f4       	brne	.+2      	; 0x991a <f_rename+0xa4>
    9918:	9d c0       	rjmp	.+314    	; 0x9a54 <f_rename+0x1de>
				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
    991a:	84 30       	cpi	r24, 0x04	; 4
    991c:	91 05       	cpc	r25, r1
    991e:	09 f0       	breq	.+2      	; 0x9922 <f_rename+0xac>
    9920:	9e c0       	rjmp	.+316    	; 0x9a5e <f_rename+0x1e8>
/* Start critical section that any interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
    9922:	c8 01       	movw	r24, r16
    9924:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <dir_register>
    9928:	9c 01       	movw	r18, r24
					if (res == FR_OK) {
    992a:	00 97       	sbiw	r24, 0x00	; 0
    992c:	09 f0       	breq	.+2      	; 0x9930 <f_rename+0xba>
    992e:	97 c0       	rjmp	.+302    	; 0x9a5e <f_rename+0x1e8>
						dir = djn.dir;					/* Copy object information except for name */
    9930:	fe 01       	movw	r30, r28
    9932:	e2 5b       	subi	r30, 0xB2	; 178
    9934:	ff 4f       	sbci	r31, 0xFF	; 255
    9936:	00 81       	ld	r16, Z
    9938:	11 81       	ldd	r17, Z+1	; 0x01
						mem_cpy(dir+13, buf+2, 19);
    993a:	c8 01       	movw	r24, r16
    993c:	0d 96       	adiw	r24, 0x0d	; 13
    993e:	be 01       	movw	r22, r28
    9940:	61 5f       	subi	r22, 0xF1	; 241
    9942:	7f 4f       	sbci	r23, 0xFF	; 255
    9944:	43 e1       	ldi	r20, 0x13	; 19
    9946:	50 e0       	ldi	r21, 0x00	; 0
    9948:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
    994c:	8d 85       	ldd	r24, Y+13	; 0x0d
    994e:	80 62       	ori	r24, 0x20	; 32
    9950:	d8 01       	movw	r26, r16
    9952:	1b 96       	adiw	r26, 0x0b	; 11
    9954:	8c 93       	st	X, r24
						djo.fs->wflag = 1;
    9956:	ea a1       	ldd	r30, Y+34	; 0x22
    9958:	fb a1       	ldd	r31, Y+35	; 0x23
    995a:	81 e0       	ldi	r24, 0x01	; 1
    995c:	84 83       	std	Z+4, r24	; 0x04
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
    995e:	28 a5       	ldd	r18, Y+40	; 0x28
    9960:	39 a5       	ldd	r19, Y+41	; 0x29
    9962:	4a a5       	ldd	r20, Y+42	; 0x2a
    9964:	5b a5       	ldd	r21, Y+43	; 0x2b
    9966:	fe 01       	movw	r30, r28
    9968:	ee 5b       	subi	r30, 0xBE	; 190
    996a:	ff 4f       	sbci	r31, 0xFF	; 255
    996c:	80 81       	ld	r24, Z
    996e:	91 81       	ldd	r25, Z+1	; 0x01
    9970:	a2 81       	ldd	r26, Z+2	; 0x02
    9972:	b3 81       	ldd	r27, Z+3	; 0x03
    9974:	28 17       	cp	r18, r24
    9976:	39 07       	cpc	r19, r25
    9978:	4a 07       	cpc	r20, r26
    997a:	5b 07       	cpc	r21, r27
    997c:	09 f4       	brne	.+2      	; 0x9980 <f_rename+0x10a>
    997e:	5d c0       	rjmp	.+186    	; 0x9a3a <f_rename+0x1c4>
    9980:	f8 01       	movw	r30, r16
    9982:	83 85       	ldd	r24, Z+11	; 0x0b
    9984:	84 ff       	sbrs	r24, 4
    9986:	59 c0       	rjmp	.+178    	; 0x9a3a <f_rename+0x1c4>
							dw = clust2sect(djn.fs, LD_CLUST(dir));
    9988:	ec ac       	ldd	r14, Y+60	; 0x3c
    998a:	fd ac       	ldd	r15, Y+61	; 0x3d
    998c:	44 89       	ldd	r20, Z+20	; 0x14
    998e:	55 89       	ldd	r21, Z+21	; 0x15
    9990:	60 e0       	ldi	r22, 0x00	; 0
    9992:	70 e0       	ldi	r23, 0x00	; 0
    9994:	ba 01       	movw	r22, r20
    9996:	55 27       	eor	r21, r21
    9998:	44 27       	eor	r20, r20
    999a:	82 8d       	ldd	r24, Z+26	; 0x1a
    999c:	93 8d       	ldd	r25, Z+27	; 0x1b
    999e:	a0 e0       	ldi	r26, 0x00	; 0
    99a0:	b0 e0       	ldi	r27, 0x00	; 0
    99a2:	48 2b       	or	r20, r24
    99a4:	59 2b       	or	r21, r25
    99a6:	6a 2b       	or	r22, r26
    99a8:	7b 2b       	or	r23, r27
    99aa:	c7 01       	movw	r24, r14
    99ac:	0e 94 22 34 	call	0x6844	; 0x6844 <clust2sect>
    99b0:	ab 01       	movw	r20, r22
    99b2:	bc 01       	movw	r22, r24
							if (!dw) {
    99b4:	41 15       	cp	r20, r1
    99b6:	51 05       	cpc	r21, r1
    99b8:	61 05       	cpc	r22, r1
    99ba:	71 05       	cpc	r23, r1
    99bc:	09 f4       	brne	.+2      	; 0x99c0 <f_rename+0x14a>
    99be:	5c c0       	rjmp	.+184    	; 0x9a78 <f_rename+0x202>
								res = FR_INT_ERR;
							} else {
								res = move_window(djn.fs, dw);
    99c0:	c7 01       	movw	r24, r14
    99c2:	0e 94 6d 32 	call	0x64da	; 0x64da <move_window>
    99c6:	9c 01       	movw	r18, r24
								dir = djn.fs->win+32;	/* .. entry */
    99c8:	ec ad       	ldd	r30, Y+60	; 0x3c
    99ca:	fd ad       	ldd	r31, Y+61	; 0x3d
								if (res == FR_OK && dir[1] == '.') {
    99cc:	00 97       	sbiw	r24, 0x00	; 0
    99ce:	09 f0       	breq	.+2      	; 0x99d2 <f_rename+0x15c>
    99d0:	46 c0       	rjmp	.+140    	; 0x9a5e <f_rename+0x1e8>
    99d2:	df 01       	movw	r26, r30
    99d4:	ad 5a       	subi	r26, 0xAD	; 173
    99d6:	bf 4f       	sbci	r27, 0xFF	; 255
    99d8:	8c 91       	ld	r24, X
    99da:	8e 32       	cpi	r24, 0x2E	; 46
    99dc:	71 f5       	brne	.+92     	; 0x9a3a <f_rename+0x1c4>
									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
    99de:	80 81       	ld	r24, Z
    99e0:	83 30       	cpi	r24, 0x03	; 3
    99e2:	81 f4       	brne	.+32     	; 0x9a04 <f_rename+0x18e>
    99e4:	de 01       	movw	r26, r28
    99e6:	ae 5b       	subi	r26, 0xBE	; 190
    99e8:	bf 4f       	sbci	r27, 0xFF	; 255
    99ea:	2d 91       	ld	r18, X+
    99ec:	3d 91       	ld	r19, X+
    99ee:	4d 91       	ld	r20, X+
    99f0:	5c 91       	ld	r21, X
    99f2:	86 a1       	ldd	r24, Z+38	; 0x26
    99f4:	97 a1       	ldd	r25, Z+39	; 0x27
    99f6:	a0 a5       	ldd	r26, Z+40	; 0x28
    99f8:	b1 a5       	ldd	r27, Z+41	; 0x29
    99fa:	28 17       	cp	r18, r24
    99fc:	39 07       	cpc	r19, r25
    99fe:	4a 07       	cpc	r20, r26
    9a00:	5b 07       	cpc	r21, r27
    9a02:	49 f0       	breq	.+18     	; 0x9a16 <f_rename+0x1a0>
    9a04:	de 01       	movw	r26, r28
    9a06:	ae 5b       	subi	r26, 0xBE	; 190
    9a08:	bf 4f       	sbci	r27, 0xFF	; 255
    9a0a:	4d 91       	ld	r20, X+
    9a0c:	5d 91       	ld	r21, X+
    9a0e:	6d 91       	ld	r22, X+
    9a10:	7c 91       	ld	r23, X
    9a12:	13 97       	sbiw	r26, 0x03	; 3
    9a14:	04 c0       	rjmp	.+8      	; 0x9a1e <f_rename+0x1a8>
    9a16:	40 e0       	ldi	r20, 0x00	; 0
    9a18:	50 e0       	ldi	r21, 0x00	; 0
    9a1a:	60 e0       	ldi	r22, 0x00	; 0
    9a1c:	70 e0       	ldi	r23, 0x00	; 0
									ST_CLUST(dir, dw);
    9a1e:	9f 01       	movw	r18, r30
    9a20:	24 59       	subi	r18, 0x94	; 148
    9a22:	3f 4f       	sbci	r19, 0xFF	; 255
    9a24:	d9 01       	movw	r26, r18
    9a26:	4d 93       	st	X+, r20
    9a28:	5c 93       	st	X, r21
    9a2a:	9f 01       	movw	r18, r30
    9a2c:	2a 59       	subi	r18, 0x9A	; 154
    9a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    9a30:	d9 01       	movw	r26, r18
    9a32:	6d 93       	st	X+, r22
    9a34:	7c 93       	st	X, r23
									djn.fs->wflag = 1;
    9a36:	81 e0       	ldi	r24, 0x01	; 1
    9a38:	84 83       	std	Z+4, r24	; 0x04
								}
							}
						}
						if (res == FR_OK) {
							res = dir_remove(&djo);		/* Remove old entry */
    9a3a:	ce 01       	movw	r24, r28
    9a3c:	82 96       	adiw	r24, 0x22	; 34
    9a3e:	0e 94 c3 3b 	call	0x7786	; 0x7786 <dir_remove>
    9a42:	9c 01       	movw	r18, r24
							if (res == FR_OK)
    9a44:	00 97       	sbiw	r24, 0x00	; 0
    9a46:	59 f4       	brne	.+22     	; 0x9a5e <f_rename+0x1e8>
								res = sync(djo.fs);
    9a48:	8a a1       	ldd	r24, Y+34	; 0x22
    9a4a:	9b a1       	ldd	r25, Y+35	; 0x23
    9a4c:	0e 94 d6 32 	call	0x65ac	; 0x65ac <sync>
    9a50:	9c 01       	movw	r18, r24
    9a52:	05 c0       	rjmp	.+10     	; 0x9a5e <f_rename+0x1e8>
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
				res = follow_path(&djn, path_new);
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    9a54:	28 e0       	ldi	r18, 0x08	; 8
    9a56:	30 e0       	ldi	r19, 0x00	; 0
    9a58:	02 c0       	rjmp	.+4      	; 0x9a5e <f_rename+0x1e8>
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
    9a5a:	24 e0       	ldi	r18, 0x04	; 4
    9a5c:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
    9a5e:	c9 01       	movw	r24, r18
    9a60:	c9 5a       	subi	r28, 0xA9	; 169
    9a62:	df 4f       	sbci	r29, 0xFF	; 255
    9a64:	e8 e0       	ldi	r30, 0x08	; 8
    9a66:	0c 94 f8 5c 	jmp	0xb9f0	; 0xb9f0 <__epilogue_restores__+0x14>
			res = FR_INVALID_NAME;
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
    9a6a:	6c a9       	ldd	r22, Y+52	; 0x34
    9a6c:	7d a9       	ldd	r23, Y+53	; 0x35
    9a6e:	61 15       	cp	r22, r1
    9a70:	71 05       	cpc	r23, r1
    9a72:	09 f0       	breq	.+2      	; 0x9a76 <f_rename+0x200>
    9a74:	39 cf       	rjmp	.-398    	; 0x98e8 <f_rename+0x72>
    9a76:	f1 cf       	rjmp	.-30     	; 0x9a5a <f_rename+0x1e4>
						dir[DIR_Attr] = buf[0] | AM_ARC;
						djo.fs->wflag = 1;
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
							dw = clust2sect(djn.fs, LD_CLUST(dir));
							if (!dw) {
								res = FR_INT_ERR;
    9a78:	22 e0       	ldi	r18, 0x02	; 2
    9a7a:	30 e0       	ldi	r19, 0x00	; 0
    9a7c:	f0 cf       	rjmp	.-32     	; 0x9a5e <f_rename+0x1e8>

00009a7e <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,		/* Logical drive number */
	BYTE sfd,		/* Partitioning rule 0:FDISK, 1:SFD */
	UINT au			/* Allocation unit size [bytes] */
)
{
    9a7e:	a1 e2       	ldi	r26, 0x21	; 33
    9a80:	b0 e0       	ldi	r27, 0x00	; 0
    9a82:	e5 e4       	ldi	r30, 0x45	; 69
    9a84:	fd e4       	ldi	r31, 0x4D	; 77
    9a86:	0c 94 d2 5c 	jmp	0xb9a4	; 0xb9a4 <__prologue_saves__>
    9a8a:	89 87       	std	Y+9, r24	; 0x09
    9a8c:	86 2e       	mov	r8, r22
    9a8e:	6a 01       	movw	r12, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check mounted drive and clear work area */
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
    9a90:	82 30       	cpi	r24, 0x02	; 2
    9a92:	08 f0       	brcs	.+2      	; 0x9a96 <f_mkfs+0x18>
    9a94:	25 c4       	rjmp	.+2122   	; 0xa2e0 <f_mkfs+0x862>
	fs = FatFs[drv];
    9a96:	e8 2f       	mov	r30, r24
    9a98:	f0 e0       	ldi	r31, 0x00	; 0
    9a9a:	ee 0f       	add	r30, r30
    9a9c:	ff 1f       	adc	r31, r31
    9a9e:	e6 57       	subi	r30, 0x76	; 118
    9aa0:	fe 4f       	sbci	r31, 0xFE	; 254
    9aa2:	a0 80       	ld	r10, Z
    9aa4:	b1 80       	ldd	r11, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    9aa6:	a1 14       	cp	r10, r1
    9aa8:	b1 04       	cpc	r11, r1
    9aaa:	09 f4       	brne	.+2      	; 0x9aae <f_mkfs+0x30>
    9aac:	1c c4       	rjmp	.+2104   	; 0xa2e6 <f_mkfs+0x868>
	fs->fs_type = 0;
    9aae:	d5 01       	movw	r26, r10
    9ab0:	1c 92       	st	X, r1
	drv = LD2PD(drv);

	/* Get disk statics */
	stat = disk_initialize(drv);
    9ab2:	89 85       	ldd	r24, Y+9	; 0x09
    9ab4:	0e 94 cc 52 	call	0xa598	; 0xa598 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    9ab8:	80 fd       	sbrc	r24, 0
    9aba:	18 c4       	rjmp	.+2096   	; 0xa2ec <f_mkfs+0x86e>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    9abc:	82 fd       	sbrc	r24, 2
    9abe:	19 c4       	rjmp	.+2098   	; 0xa2f2 <f_mkfs+0x874>
#if _MAX_SS != 512					/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK)
		return FR_DISK_ERR;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
    9ac0:	89 85       	ldd	r24, Y+9	; 0x09
    9ac2:	61 e0       	ldi	r22, 0x01	; 1
    9ac4:	ae 01       	movw	r20, r28
    9ac6:	4b 5f       	subi	r20, 0xFB	; 251
    9ac8:	5f 4f       	sbci	r21, 0xFF	; 255
    9aca:	0e 94 57 54 	call	0xa8ae	; 0xa8ae <disk_ioctl>
    9ace:	00 97       	sbiw	r24, 0x00	; 0
    9ad0:	09 f0       	breq	.+2      	; 0x9ad4 <f_mkfs+0x56>
    9ad2:	15 c4       	rjmp	.+2090   	; 0xa2fe <f_mkfs+0x880>
    9ad4:	4d 80       	ldd	r4, Y+5	; 0x05
    9ad6:	5e 80       	ldd	r5, Y+6	; 0x06
    9ad8:	6f 80       	ldd	r6, Y+7	; 0x07
    9ada:	78 84       	ldd	r7, Y+8	; 0x08
    9adc:	b0 e8       	ldi	r27, 0x80	; 128
    9ade:	4b 16       	cp	r4, r27
    9ae0:	51 04       	cpc	r5, r1
    9ae2:	61 04       	cpc	r6, r1
    9ae4:	71 04       	cpc	r7, r1
    9ae6:	08 f4       	brcc	.+2      	; 0x9aea <f_mkfs+0x6c>
    9ae8:	0a c4       	rjmp	.+2068   	; 0xa2fe <f_mkfs+0x880>
		return FR_DISK_ERR;
	b_vol = (sfd) ? 0 : 63;	/* Volume start sector */
    9aea:	88 20       	and	r8, r8
    9aec:	29 f0       	breq	.+10     	; 0x9af8 <f_mkfs+0x7a>
    9aee:	1a 86       	std	Y+10, r1	; 0x0a
    9af0:	1b 86       	std	Y+11, r1	; 0x0b
    9af2:	1c 86       	std	Y+12, r1	; 0x0c
    9af4:	1d 86       	std	Y+13, r1	; 0x0d
    9af6:	08 c0       	rjmp	.+16     	; 0x9b08 <f_mkfs+0x8a>
    9af8:	2f e3       	ldi	r18, 0x3F	; 63
    9afa:	30 e0       	ldi	r19, 0x00	; 0
    9afc:	40 e0       	ldi	r20, 0x00	; 0
    9afe:	50 e0       	ldi	r21, 0x00	; 0
    9b00:	2a 87       	std	Y+10, r18	; 0x0a
    9b02:	3b 87       	std	Y+11, r19	; 0x0b
    9b04:	4c 87       	std	Y+12, r20	; 0x0c
    9b06:	5d 87       	std	Y+13, r21	; 0x0d
	n_vol -= b_vol;
    9b08:	8a 85       	ldd	r24, Y+10	; 0x0a
    9b0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    9b0c:	ac 85       	ldd	r26, Y+12	; 0x0c
    9b0e:	bd 85       	ldd	r27, Y+13	; 0x0d
    9b10:	48 1a       	sub	r4, r24
    9b12:	59 0a       	sbc	r5, r25
    9b14:	6a 0a       	sbc	r6, r26
    9b16:	7b 0a       	sbc	r7, r27
    9b18:	4d 82       	std	Y+5, r4	; 0x05
    9b1a:	5e 82       	std	Y+6, r5	; 0x06
    9b1c:	6f 82       	std	Y+7, r6	; 0x07
    9b1e:	78 86       	std	Y+8, r7	; 0x08
	if (au & (au - 1)) au = 0;		/* Check validity of the allocation unit size */
    9b20:	c6 01       	movw	r24, r12
    9b22:	01 97       	sbiw	r24, 0x01	; 1
    9b24:	8c 21       	and	r24, r12
    9b26:	9d 21       	and	r25, r13
    9b28:	00 97       	sbiw	r24, 0x00	; 0
    9b2a:	19 f4       	brne	.+6      	; 0x9b32 <f_mkfs+0xb4>
	if (!au) {						/* AU auto selection */
    9b2c:	c1 14       	cp	r12, r1
    9b2e:	d1 04       	cpc	r13, r1
    9b30:	09 f5       	brne	.+66     	; 0x9b74 <f_mkfs+0xf6>
		vs = n_vol / (2000 / (SS(fs) / 512));
    9b32:	c3 01       	movw	r24, r6
    9b34:	b2 01       	movw	r22, r4
    9b36:	20 ed       	ldi	r18, 0xD0	; 208
    9b38:	37 e0       	ldi	r19, 0x07	; 7
    9b3a:	40 e0       	ldi	r20, 0x00	; 0
    9b3c:	50 e0       	ldi	r21, 0x00	; 0
    9b3e:	0e 94 95 5c 	call	0xb92a	; 0xb92a <__udivmodsi4>
    9b42:	69 01       	movw	r12, r18
    9b44:	7a 01       	movw	r14, r20
    9b46:	ee e5       	ldi	r30, 0x5E	; 94
    9b48:	f1 e0       	ldi	r31, 0x01	; 1
		for (i = 0; vs < vst[i]; i++) ;
    9b4a:	20 e0       	ldi	r18, 0x00	; 0
    9b4c:	30 e0       	ldi	r19, 0x00	; 0
    9b4e:	02 c0       	rjmp	.+4      	; 0x9b54 <f_mkfs+0xd6>
    9b50:	2f 5f       	subi	r18, 0xFF	; 255
    9b52:	3f 4f       	sbci	r19, 0xFF	; 255
    9b54:	81 91       	ld	r24, Z+
    9b56:	91 91       	ld	r25, Z+
    9b58:	a0 e0       	ldi	r26, 0x00	; 0
    9b5a:	b0 e0       	ldi	r27, 0x00	; 0
    9b5c:	c8 16       	cp	r12, r24
    9b5e:	d9 06       	cpc	r13, r25
    9b60:	ea 06       	cpc	r14, r26
    9b62:	fb 06       	cpc	r15, r27
    9b64:	a8 f3       	brcs	.-22     	; 0x9b50 <f_mkfs+0xd2>
		au = cst[i];
    9b66:	f9 01       	movw	r30, r18
    9b68:	ee 0f       	add	r30, r30
    9b6a:	ff 1f       	adc	r31, r31
    9b6c:	e8 5b       	subi	r30, 0xB8	; 184
    9b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    9b70:	c0 80       	ld	r12, Z
    9b72:	d1 80       	ldd	r13, Z+1	; 0x01
	}
	au /= SS(fs);		/* Number of sectors per cluster */
    9b74:	16 01       	movw	r2, r12
    9b76:	23 2c       	mov	r2, r3
    9b78:	33 24       	eor	r3, r3
    9b7a:	26 94       	lsr	r2
	if (au == 0) au = 1;
    9b7c:	21 14       	cp	r2, r1
    9b7e:	31 04       	cpc	r3, r1
    9b80:	19 f4       	brne	.+6      	; 0x9b88 <f_mkfs+0x10a>
    9b82:	71 e0       	ldi	r23, 0x01	; 1
    9b84:	27 2e       	mov	r2, r23
    9b86:	31 2c       	mov	r3, r1
	if (au > 128) au = 128;

	/* Pre-compute number of clusters and FAT syb-type */
	n_clst = n_vol / au;
    9b88:	91 01       	movw	r18, r2
    9b8a:	40 e0       	ldi	r20, 0x00	; 0
    9b8c:	50 e0       	ldi	r21, 0x00	; 0
    9b8e:	2e 8f       	std	Y+30, r18	; 0x1e
    9b90:	3f 8f       	std	Y+31, r19	; 0x1f
    9b92:	48 a3       	std	Y+32, r20	; 0x20
    9b94:	59 a3       	std	Y+33, r21	; 0x21
    9b96:	c3 01       	movw	r24, r6
    9b98:	b2 01       	movw	r22, r4
    9b9a:	0e 94 95 5c 	call	0xb92a	; 0xb92a <__udivmodsi4>
	fmt = FS_FAT12;
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
    9b9e:	26 3f       	cpi	r18, 0xF6	; 246
    9ba0:	8f e0       	ldi	r24, 0x0F	; 15
    9ba2:	38 07       	cpc	r19, r24
    9ba4:	80 e0       	ldi	r24, 0x00	; 0
    9ba6:	48 07       	cpc	r20, r24
    9ba8:	80 e0       	ldi	r24, 0x00	; 0
    9baa:	58 07       	cpc	r21, r24
    9bac:	50 f0       	brcs	.+20     	; 0x9bc2 <f_mkfs+0x144>
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
    9bae:	26 3f       	cpi	r18, 0xF6	; 246
    9bb0:	9f ef       	ldi	r25, 0xFF	; 255
    9bb2:	39 07       	cpc	r19, r25
    9bb4:	90 e0       	ldi	r25, 0x00	; 0
    9bb6:	49 07       	cpc	r20, r25
    9bb8:	90 e0       	ldi	r25, 0x00	; 0
    9bba:	59 07       	cpc	r21, r25
    9bbc:	08 f0       	brcs	.+2      	; 0x9bc0 <f_mkfs+0x142>
    9bbe:	a6 c3       	rjmp	.+1868   	; 0xa30c <f_mkfs+0x88e>
    9bc0:	c7 c3       	rjmp	.+1934   	; 0xa350 <f_mkfs+0x8d2>
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
    9bc2:	da 01       	movw	r26, r20
    9bc4:	c9 01       	movw	r24, r18
    9bc6:	88 0f       	add	r24, r24
    9bc8:	99 1f       	adc	r25, r25
    9bca:	aa 1f       	adc	r26, r26
    9bcc:	bb 1f       	adc	r27, r27
    9bce:	82 0f       	add	r24, r18
    9bd0:	93 1f       	adc	r25, r19
    9bd2:	a4 1f       	adc	r26, r20
    9bd4:	b5 1f       	adc	r27, r21
    9bd6:	01 96       	adiw	r24, 0x01	; 1
    9bd8:	a1 1d       	adc	r26, r1
    9bda:	b1 1d       	adc	r27, r1
    9bdc:	b6 95       	lsr	r27
    9bde:	a7 95       	ror	r26
    9be0:	97 95       	ror	r25
    9be2:	87 95       	ror	r24
    9be4:	03 96       	adiw	r24, 0x03	; 3
    9be6:	a1 1d       	adc	r26, r1
    9be8:	b1 1d       	adc	r27, r1
	if (au == 0) au = 1;
	if (au > 128) au = 128;

	/* Pre-compute number of clusters and FAT syb-type */
	n_clst = n_vol / au;
	fmt = FS_FAT12;
    9bea:	11 e0       	ldi	r17, 0x01	; 1
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
    9bec:	ff ef       	ldi	r31, 0xFF	; 255
    9bee:	cf 2e       	mov	r12, r31
    9bf0:	f1 e0       	ldi	r31, 0x01	; 1
    9bf2:	df 2e       	mov	r13, r31
    9bf4:	e1 2c       	mov	r14, r1
    9bf6:	f1 2c       	mov	r15, r1
    9bf8:	c8 0e       	add	r12, r24
    9bfa:	d9 1e       	adc	r13, r25
    9bfc:	ea 1e       	adc	r14, r26
    9bfe:	fb 1e       	adc	r15, r27
    9c00:	e9 e0       	ldi	r30, 0x09	; 9
    9c02:	f6 94       	lsr	r15
    9c04:	e7 94       	ror	r14
    9c06:	d7 94       	ror	r13
    9c08:	c7 94       	ror	r12
    9c0a:	ea 95       	dec	r30
    9c0c:	d1 f7       	brne	.-12     	; 0x9c02 <f_mkfs+0x184>
		n_rsv = 1;
		n_dir = N_ROOTDIR * 32UL / SS(fs);
    9c0e:	20 e2       	ldi	r18, 0x20	; 32
    9c10:	30 e0       	ldi	r19, 0x00	; 0
    9c12:	40 e0       	ldi	r20, 0x00	; 0
    9c14:	50 e0       	ldi	r21, 0x00	; 0
    9c16:	2a 8f       	std	Y+26, r18	; 0x1a
    9c18:	3b 8f       	std	Y+27, r19	; 0x1b
    9c1a:	4c 8f       	std	Y+28, r20	; 0x1c
    9c1c:	5d 8f       	std	Y+29, r21	; 0x1d
		n_rsv = 32;
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
		n_rsv = 1;
    9c1e:	81 e0       	ldi	r24, 0x01	; 1
    9c20:	90 e0       	ldi	r25, 0x00	; 0
    9c22:	a0 e0       	ldi	r26, 0x00	; 0
    9c24:	b0 e0       	ldi	r27, 0x00	; 0
    9c26:	8e 87       	std	Y+14, r24	; 0x0e
    9c28:	9f 87       	std	Y+15, r25	; 0x0f
    9c2a:	a8 8b       	std	Y+16, r26	; 0x10
    9c2c:	b9 8b       	std	Y+17, r27	; 0x11
		n_dir = N_ROOTDIR * 32UL / SS(fs);
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
    9c2e:	2e 85       	ldd	r18, Y+14	; 0x0e
    9c30:	3f 85       	ldd	r19, Y+15	; 0x0f
    9c32:	48 89       	ldd	r20, Y+16	; 0x10
    9c34:	59 89       	ldd	r21, Y+17	; 0x11
    9c36:	8a 85       	ldd	r24, Y+10	; 0x0a
    9c38:	9b 85       	ldd	r25, Y+11	; 0x0b
    9c3a:	ac 85       	ldd	r26, Y+12	; 0x0c
    9c3c:	bd 85       	ldd	r27, Y+13	; 0x0d
    9c3e:	28 0f       	add	r18, r24
    9c40:	39 1f       	adc	r19, r25
    9c42:	4a 1f       	adc	r20, r26
    9c44:	5b 1f       	adc	r21, r27
    9c46:	2e 8b       	std	Y+22, r18	; 0x16
    9c48:	3f 8b       	std	Y+23, r19	; 0x17
    9c4a:	48 8f       	std	Y+24, r20	; 0x18
    9c4c:	59 8f       	std	Y+25, r21	; 0x19
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
    9c4e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    9c50:	3b 8d       	ldd	r19, Y+27	; 0x1b
    9c52:	4c 8d       	ldd	r20, Y+28	; 0x1c
    9c54:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9c56:	2c 0d       	add	r18, r12
    9c58:	3d 1d       	adc	r19, r13
    9c5a:	4e 1d       	adc	r20, r14
    9c5c:	5f 1d       	adc	r21, r15
	b_data = b_dir + n_dir;				/* Data area start sector */
    9c5e:	8e 89       	ldd	r24, Y+22	; 0x16
    9c60:	9f 89       	ldd	r25, Y+23	; 0x17
    9c62:	a8 8d       	ldd	r26, Y+24	; 0x18
    9c64:	b9 8d       	ldd	r27, Y+25	; 0x19
    9c66:	28 0f       	add	r18, r24
    9c68:	39 1f       	adc	r19, r25
    9c6a:	4a 1f       	adc	r20, r26
    9c6c:	5b 1f       	adc	r21, r27
    9c6e:	2a 8b       	std	Y+18, r18	; 0x12
    9c70:	3b 8b       	std	Y+19, r19	; 0x13
    9c72:	4c 8b       	std	Y+20, r20	; 0x14
    9c74:	5d 8b       	std	Y+21, r21	; 0x15
	if (n_vol < b_data + au) return FR_MKFS_ABORTED;	/* Too small volume */
    9c76:	da 01       	movw	r26, r20
    9c78:	c9 01       	movw	r24, r18
    9c7a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    9c7c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    9c7e:	48 a1       	ldd	r20, Y+32	; 0x20
    9c80:	59 a1       	ldd	r21, Y+33	; 0x21
    9c82:	82 0f       	add	r24, r18
    9c84:	93 1f       	adc	r25, r19
    9c86:	a4 1f       	adc	r26, r20
    9c88:	b5 1f       	adc	r27, r21
    9c8a:	48 16       	cp	r4, r24
    9c8c:	59 06       	cpc	r5, r25
    9c8e:	6a 06       	cpc	r6, r26
    9c90:	7b 06       	cpc	r7, r27
    9c92:	08 f4       	brcc	.+2      	; 0x9c96 <f_mkfs+0x218>
    9c94:	31 c3       	rjmp	.+1634   	; 0xa2f8 <f_mkfs+0x87a>

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
    9c96:	89 85       	ldd	r24, Y+9	; 0x09
    9c98:	63 e0       	ldi	r22, 0x03	; 3
    9c9a:	ae 01       	movw	r20, r28
    9c9c:	4f 5f       	subi	r20, 0xFF	; 255
    9c9e:	5f 4f       	sbci	r21, 0xFF	; 255
    9ca0:	0e 94 57 54 	call	0xa8ae	; 0xa8ae <disk_ioctl>
    9ca4:	00 97       	sbiw	r24, 0x00	; 0
    9ca6:	81 f4       	brne	.+32     	; 0x9cc8 <f_mkfs+0x24a>
    9ca8:	89 81       	ldd	r24, Y+1	; 0x01
    9caa:	9a 81       	ldd	r25, Y+2	; 0x02
    9cac:	ab 81       	ldd	r26, Y+3	; 0x03
    9cae:	bc 81       	ldd	r27, Y+4	; 0x04
    9cb0:	00 97       	sbiw	r24, 0x00	; 0
    9cb2:	a1 05       	cpc	r26, r1
    9cb4:	b1 05       	cpc	r27, r1
    9cb6:	41 f0       	breq	.+16     	; 0x9cc8 <f_mkfs+0x24a>
    9cb8:	81 30       	cpi	r24, 0x01	; 1
    9cba:	30 e8       	ldi	r19, 0x80	; 128
    9cbc:	93 07       	cpc	r25, r19
    9cbe:	30 e0       	ldi	r19, 0x00	; 0
    9cc0:	a3 07       	cpc	r26, r19
    9cc2:	30 e0       	ldi	r19, 0x00	; 0
    9cc4:	b3 07       	cpc	r27, r19
    9cc6:	40 f0       	brcs	.+16     	; 0x9cd8 <f_mkfs+0x25a>
    9cc8:	81 e0       	ldi	r24, 0x01	; 1
    9cca:	90 e0       	ldi	r25, 0x00	; 0
    9ccc:	a0 e0       	ldi	r26, 0x00	; 0
    9cce:	b0 e0       	ldi	r27, 0x00	; 0
    9cd0:	89 83       	std	Y+1, r24	; 0x01
    9cd2:	9a 83       	std	Y+2, r25	; 0x02
    9cd4:	ab 83       	std	Y+3, r26	; 0x03
    9cd6:	bc 83       	std	Y+4, r27	; 0x04
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
    9cd8:	29 81       	ldd	r18, Y+1	; 0x01
    9cda:	3a 81       	ldd	r19, Y+2	; 0x02
    9cdc:	4b 81       	ldd	r20, Y+3	; 0x03
    9cde:	5c 81       	ldd	r21, Y+4	; 0x04
    9ce0:	da 01       	movw	r26, r20
    9ce2:	c9 01       	movw	r24, r18
    9ce4:	01 97       	sbiw	r24, 0x01	; 1
    9ce6:	a1 09       	sbc	r26, r1
    9ce8:	b1 09       	sbc	r27, r1
    9cea:	4a 88       	ldd	r4, Y+18	; 0x12
    9cec:	5b 88       	ldd	r5, Y+19	; 0x13
    9cee:	6c 88       	ldd	r6, Y+20	; 0x14
    9cf0:	7d 88       	ldd	r7, Y+21	; 0x15
    9cf2:	84 0d       	add	r24, r4
    9cf4:	95 1d       	adc	r25, r5
    9cf6:	a6 1d       	adc	r26, r6
    9cf8:	b7 1d       	adc	r27, r7
    9cfa:	50 95       	com	r21
    9cfc:	40 95       	com	r20
    9cfe:	30 95       	com	r19
    9d00:	21 95       	neg	r18
    9d02:	3f 4f       	sbci	r19, 0xFF	; 255
    9d04:	4f 4f       	sbci	r20, 0xFF	; 255
    9d06:	5f 4f       	sbci	r21, 0xFF	; 255
    9d08:	82 23       	and	r24, r18
    9d0a:	93 23       	and	r25, r19
    9d0c:	a4 23       	and	r26, r20
    9d0e:	b5 23       	and	r27, r21
	n = (n - b_data) / N_FATS;
    9d10:	84 19       	sub	r24, r4
    9d12:	95 09       	sbc	r25, r5
    9d14:	a6 09       	sbc	r26, r6
    9d16:	b7 09       	sbc	r27, r7
    9d18:	89 83       	std	Y+1, r24	; 0x01
    9d1a:	9a 83       	std	Y+2, r25	; 0x02
    9d1c:	ab 83       	std	Y+3, r26	; 0x03
    9d1e:	bc 83       	std	Y+4, r27	; 0x04
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
    9d20:	13 30       	cpi	r17, 0x03	; 3
    9d22:	c9 f4       	brne	.+50     	; 0x9d56 <f_mkfs+0x2d8>
		n_rsv += n;
    9d24:	2e 85       	ldd	r18, Y+14	; 0x0e
    9d26:	3f 85       	ldd	r19, Y+15	; 0x0f
    9d28:	48 89       	ldd	r20, Y+16	; 0x10
    9d2a:	59 89       	ldd	r21, Y+17	; 0x11
    9d2c:	28 0f       	add	r18, r24
    9d2e:	39 1f       	adc	r19, r25
    9d30:	4a 1f       	adc	r20, r26
    9d32:	5b 1f       	adc	r21, r27
    9d34:	2e 87       	std	Y+14, r18	; 0x0e
    9d36:	3f 87       	std	Y+15, r19	; 0x0f
    9d38:	48 8b       	std	Y+16, r20	; 0x10
    9d3a:	59 8b       	std	Y+17, r21	; 0x11
		b_fat += n;
    9d3c:	4e 88       	ldd	r4, Y+22	; 0x16
    9d3e:	5f 88       	ldd	r5, Y+23	; 0x17
    9d40:	68 8c       	ldd	r6, Y+24	; 0x18
    9d42:	79 8c       	ldd	r7, Y+25	; 0x19
    9d44:	48 0e       	add	r4, r24
    9d46:	59 1e       	adc	r5, r25
    9d48:	6a 1e       	adc	r6, r26
    9d4a:	7b 1e       	adc	r7, r27
    9d4c:	4e 8a       	std	Y+22, r4	; 0x16
    9d4e:	5f 8a       	std	Y+23, r5	; 0x17
    9d50:	68 8e       	std	Y+24, r6	; 0x18
    9d52:	79 8e       	std	Y+25, r7	; 0x19
    9d54:	04 c0       	rjmp	.+8      	; 0x9d5e <f_mkfs+0x2e0>
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
    9d56:	c8 0e       	add	r12, r24
    9d58:	d9 1e       	adc	r13, r25
    9d5a:	ea 1e       	adc	r14, r26
    9d5c:	fb 1e       	adc	r15, r27
	}

	/* Determine number of cluster and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
    9d5e:	4d 80       	ldd	r4, Y+5	; 0x05
    9d60:	5e 80       	ldd	r5, Y+6	; 0x06
    9d62:	6f 80       	ldd	r6, Y+7	; 0x07
    9d64:	78 84       	ldd	r7, Y+8	; 0x08
    9d66:	c3 01       	movw	r24, r6
    9d68:	b2 01       	movw	r22, r4
    9d6a:	2e 85       	ldd	r18, Y+14	; 0x0e
    9d6c:	3f 85       	ldd	r19, Y+15	; 0x0f
    9d6e:	48 89       	ldd	r20, Y+16	; 0x10
    9d70:	59 89       	ldd	r21, Y+17	; 0x11
    9d72:	62 1b       	sub	r22, r18
    9d74:	73 0b       	sbc	r23, r19
    9d76:	84 0b       	sbc	r24, r20
    9d78:	95 0b       	sbc	r25, r21
    9d7a:	6c 19       	sub	r22, r12
    9d7c:	7d 09       	sbc	r23, r13
    9d7e:	8e 09       	sbc	r24, r14
    9d80:	9f 09       	sbc	r25, r15
    9d82:	2a 8d       	ldd	r18, Y+26	; 0x1a
    9d84:	3b 8d       	ldd	r19, Y+27	; 0x1b
    9d86:	4c 8d       	ldd	r20, Y+28	; 0x1c
    9d88:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9d8a:	62 1b       	sub	r22, r18
    9d8c:	73 0b       	sbc	r23, r19
    9d8e:	84 0b       	sbc	r24, r20
    9d90:	95 0b       	sbc	r25, r21
    9d92:	2e 8d       	ldd	r18, Y+30	; 0x1e
    9d94:	3f 8d       	ldd	r19, Y+31	; 0x1f
    9d96:	48 a1       	ldd	r20, Y+32	; 0x20
    9d98:	59 a1       	ldd	r21, Y+33	; 0x21
    9d9a:	0e 94 95 5c 	call	0xb92a	; 0xb92a <__udivmodsi4>
    9d9e:	2a 8b       	std	Y+18, r18	; 0x12
    9da0:	3b 8b       	std	Y+19, r19	; 0x13
    9da2:	4c 8b       	std	Y+20, r20	; 0x14
    9da4:	5d 8b       	std	Y+21, r21	; 0x15
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
    9da6:	12 30       	cpi	r17, 0x02	; 2
    9da8:	49 f4       	brne	.+18     	; 0x9dbc <f_mkfs+0x33e>
    9daa:	26 3f       	cpi	r18, 0xF6	; 246
    9dac:	8f e0       	ldi	r24, 0x0F	; 15
    9dae:	38 07       	cpc	r19, r24
    9db0:	80 e0       	ldi	r24, 0x00	; 0
    9db2:	48 07       	cpc	r20, r24
    9db4:	80 e0       	ldi	r24, 0x00	; 0
    9db6:	58 07       	cpc	r21, r24
    9db8:	80 f4       	brcc	.+32     	; 0x9dda <f_mkfs+0x35c>
    9dba:	9e c2       	rjmp	.+1340   	; 0xa2f8 <f_mkfs+0x87a>
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
    9dbc:	13 30       	cpi	r17, 0x03	; 3
    9dbe:	69 f4       	brne	.+26     	; 0x9dda <f_mkfs+0x35c>
    9dc0:	2a 89       	ldd	r18, Y+18	; 0x12
    9dc2:	3b 89       	ldd	r19, Y+19	; 0x13
    9dc4:	4c 89       	ldd	r20, Y+20	; 0x14
    9dc6:	5d 89       	ldd	r21, Y+21	; 0x15
    9dc8:	26 3f       	cpi	r18, 0xF6	; 246
    9dca:	8f ef       	ldi	r24, 0xFF	; 255
    9dcc:	38 07       	cpc	r19, r24
    9dce:	80 e0       	ldi	r24, 0x00	; 0
    9dd0:	48 07       	cpc	r20, r24
    9dd2:	80 e0       	ldi	r24, 0x00	; 0
    9dd4:	58 07       	cpc	r21, r24
    9dd6:	08 f4       	brcc	.+2      	; 0x9dda <f_mkfs+0x35c>
    9dd8:	8f c2       	rjmp	.+1310   	; 0xa2f8 <f_mkfs+0x87a>
		return FR_MKFS_ABORTED;

	/* Create partition table if required */
	if (sfd) {
    9dda:	88 20       	and	r8, r8
    9ddc:	09 f0       	breq	.+2      	; 0x9de0 <f_mkfs+0x362>
    9dde:	93 c0       	rjmp	.+294    	; 0x9f06 <f_mkfs+0x488>
		md = 0xF0;
	} else {
		DWORD n_disk = b_vol + n_vol;
    9de0:	2a 85       	ldd	r18, Y+10	; 0x0a
    9de2:	3b 85       	ldd	r19, Y+11	; 0x0b
    9de4:	4c 85       	ldd	r20, Y+12	; 0x0c
    9de6:	5d 85       	ldd	r21, Y+13	; 0x0d
    9de8:	42 0e       	add	r4, r18
    9dea:	53 1e       	adc	r5, r19
    9dec:	64 1e       	adc	r6, r20
    9dee:	75 1e       	adc	r7, r21

		mem_set(fs->win, 0, SS(fs));
    9df0:	c5 01       	movw	r24, r10
    9df2:	c2 96       	adiw	r24, 0x32	; 50
    9df4:	60 e0       	ldi	r22, 0x00	; 0
    9df6:	70 e0       	ldi	r23, 0x00	; 0
    9df8:	40 e0       	ldi	r20, 0x00	; 0
    9dfa:	52 e0       	ldi	r21, 0x02	; 2
    9dfc:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <mem_set>
		tbl = fs->win+MBR_Table;
		ST_DWORD(tbl, 0x00010180);			/* Partition start in CHS */
    9e00:	f5 01       	movw	r30, r10
    9e02:	e0 51       	subi	r30, 0x10	; 16
    9e04:	fe 4f       	sbci	r31, 0xFE	; 254
    9e06:	80 e8       	ldi	r24, 0x80	; 128
    9e08:	91 e0       	ldi	r25, 0x01	; 1
    9e0a:	a1 e0       	ldi	r26, 0x01	; 1
    9e0c:	b0 e0       	ldi	r27, 0x00	; 0
    9e0e:	80 83       	st	Z, r24
    9e10:	91 83       	std	Z+1, r25	; 0x01
    9e12:	a2 83       	std	Z+2, r26	; 0x02
    9e14:	b3 83       	std	Z+3, r27	; 0x03
    9e16:	76 ef       	ldi	r23, 0xF6	; 246
    9e18:	87 2e       	mov	r8, r23
    9e1a:	71 e0       	ldi	r23, 0x01	; 1
    9e1c:	97 2e       	mov	r9, r23
    9e1e:	8a 0c       	add	r8, r10
    9e20:	9b 1c       	adc	r9, r11
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    9e22:	30 e0       	ldi	r19, 0x00	; 0
    9e24:	43 16       	cp	r4, r19
    9e26:	34 e0       	ldi	r19, 0x04	; 4
    9e28:	53 06       	cpc	r5, r19
    9e2a:	3b ef       	ldi	r19, 0xFB	; 251
    9e2c:	63 06       	cpc	r6, r19
    9e2e:	30 e0       	ldi	r19, 0x00	; 0
    9e30:	73 06       	cpc	r7, r19
    9e32:	b8 f4       	brcc	.+46     	; 0x9e62 <f_mkfs+0x3e4>
			n_disk = n_disk / 63 / 255;
    9e34:	c3 01       	movw	r24, r6
    9e36:	b2 01       	movw	r22, r4
    9e38:	21 ec       	ldi	r18, 0xC1	; 193
    9e3a:	3e e3       	ldi	r19, 0x3E	; 62
    9e3c:	40 e0       	ldi	r20, 0x00	; 0
    9e3e:	50 e0       	ldi	r21, 0x00	; 0
    9e40:	0e 94 95 5c 	call	0xb92a	; 0xb92a <__udivmodsi4>
			tbl[7] = (BYTE)n_disk;
    9e44:	f5 01       	movw	r30, r10
    9e46:	e9 50       	subi	r30, 0x09	; 9
    9e48:	fe 4f       	sbci	r31, 0xFE	; 254
    9e4a:	20 83       	st	Z, r18
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    9e4c:	62 e0       	ldi	r22, 0x02	; 2
    9e4e:	56 95       	lsr	r21
    9e50:	47 95       	ror	r20
    9e52:	37 95       	ror	r19
    9e54:	27 95       	ror	r18
    9e56:	6a 95       	dec	r22
    9e58:	d1 f7       	brne	.-12     	; 0x9e4e <f_mkfs+0x3d0>
    9e5a:	2f 63       	ori	r18, 0x3F	; 63
    9e5c:	d4 01       	movw	r26, r8
    9e5e:	2c 93       	st	X, r18
    9e60:	05 c0       	rjmp	.+10     	; 0x9e6c <f_mkfs+0x3ee>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    9e62:	8f ef       	ldi	r24, 0xFF	; 255
    9e64:	9f ef       	ldi	r25, 0xFF	; 255
    9e66:	f4 01       	movw	r30, r8
    9e68:	91 83       	std	Z+1, r25	; 0x01
    9e6a:	80 83       	st	Z, r24
		}
		tbl[5] = 254;
    9e6c:	f5 01       	movw	r30, r10
    9e6e:	eb 50       	subi	r30, 0x0B	; 11
    9e70:	fe 4f       	sbci	r31, 0xFE	; 254
    9e72:	8e ef       	ldi	r24, 0xFE	; 254
    9e74:	80 83       	st	Z, r24
		if (fmt != FS_FAT32)				/* System ID */
    9e76:	13 30       	cpi	r17, 0x03	; 3
    9e78:	99 f0       	breq	.+38     	; 0x9ea0 <f_mkfs+0x422>
			tbl[4] = (n_vol < 0x10000) ? 0x04 : 0x06;
    9e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    9e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    9e7e:	af 81       	ldd	r26, Y+7	; 0x07
    9e80:	b8 85       	ldd	r27, Y+8	; 0x08
    9e82:	80 30       	cpi	r24, 0x00	; 0
    9e84:	f0 e0       	ldi	r31, 0x00	; 0
    9e86:	9f 07       	cpc	r25, r31
    9e88:	f1 e0       	ldi	r31, 0x01	; 1
    9e8a:	af 07       	cpc	r26, r31
    9e8c:	f0 e0       	ldi	r31, 0x00	; 0
    9e8e:	bf 07       	cpc	r27, r31
    9e90:	10 f4       	brcc	.+4      	; 0x9e96 <f_mkfs+0x418>
    9e92:	84 e0       	ldi	r24, 0x04	; 4
    9e94:	01 c0       	rjmp	.+2      	; 0x9e98 <f_mkfs+0x41a>
    9e96:	86 e0       	ldi	r24, 0x06	; 6
    9e98:	f5 01       	movw	r30, r10
    9e9a:	ec 50       	subi	r30, 0x0C	; 12
    9e9c:	fe 4f       	sbci	r31, 0xFE	; 254
    9e9e:	04 c0       	rjmp	.+8      	; 0x9ea8 <f_mkfs+0x42a>
		else
			tbl[4] = 0x0c;
    9ea0:	f5 01       	movw	r30, r10
    9ea2:	ec 50       	subi	r30, 0x0C	; 12
    9ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    9ea6:	8c e0       	ldi	r24, 0x0C	; 12
    9ea8:	80 83       	st	Z, r24
		ST_DWORD(tbl+8, 63);				/* Partition start in LBA */
    9eaa:	f5 01       	movw	r30, r10
    9eac:	e8 50       	subi	r30, 0x08	; 8
    9eae:	fe 4f       	sbci	r31, 0xFE	; 254
    9eb0:	8f e3       	ldi	r24, 0x3F	; 63
    9eb2:	90 e0       	ldi	r25, 0x00	; 0
    9eb4:	a0 e0       	ldi	r26, 0x00	; 0
    9eb6:	b0 e0       	ldi	r27, 0x00	; 0
    9eb8:	80 83       	st	Z, r24
    9eba:	91 83       	std	Z+1, r25	; 0x01
    9ebc:	a2 83       	std	Z+2, r26	; 0x02
    9ebe:	b3 83       	std	Z+3, r27	; 0x03
		ST_DWORD(tbl+12, n_vol);			/* Partition size in LBA */
    9ec0:	f5 01       	movw	r30, r10
    9ec2:	e4 50       	subi	r30, 0x04	; 4
    9ec4:	fe 4f       	sbci	r31, 0xFE	; 254
    9ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    9ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    9eca:	af 81       	ldd	r26, Y+7	; 0x07
    9ecc:	b8 85       	ldd	r27, Y+8	; 0x08
    9ece:	80 83       	st	Z, r24
    9ed0:	91 83       	std	Z+1, r25	; 0x01
    9ed2:	a2 83       	std	Z+2, r26	; 0x02
    9ed4:	b3 83       	std	Z+3, r27	; 0x03
		ST_WORD(tbl+64, 0xAA55);			/* Signature */
    9ed6:	f5 01       	movw	r30, r10
    9ed8:	e0 5d       	subi	r30, 0xD0	; 208
    9eda:	fd 4f       	sbci	r31, 0xFD	; 253
    9edc:	85 e5       	ldi	r24, 0x55	; 85
    9ede:	9a ea       	ldi	r25, 0xAA	; 170
    9ee0:	91 83       	std	Z+1, r25	; 0x01
    9ee2:	80 83       	st	Z, r24
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    9ee4:	b5 01       	movw	r22, r10
    9ee6:	6e 5c       	subi	r22, 0xCE	; 206
    9ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    9eea:	89 85       	ldd	r24, Y+9	; 0x09
    9eec:	20 e0       	ldi	r18, 0x00	; 0
    9eee:	30 e0       	ldi	r19, 0x00	; 0
    9ef0:	40 e0       	ldi	r20, 0x00	; 0
    9ef2:	50 e0       	ldi	r21, 0x00	; 0
    9ef4:	01 e0       	ldi	r16, 0x01	; 1
    9ef6:	0e 94 e1 53 	call	0xa7c2	; 0xa7c2 <disk_write>
    9efa:	00 97       	sbiw	r24, 0x00	; 0
    9efc:	09 f0       	breq	.+2      	; 0x9f00 <f_mkfs+0x482>
    9efe:	ff c1       	rjmp	.+1022   	; 0xa2fe <f_mkfs+0x880>
			return FR_DISK_ERR;
		md = 0xF8;
    9f00:	48 ef       	ldi	r20, 0xF8	; 248
    9f02:	44 2e       	mov	r4, r20
    9f04:	02 c0       	rjmp	.+4      	; 0x9f0a <f_mkfs+0x48c>
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
		return FR_MKFS_ABORTED;

	/* Create partition table if required */
	if (sfd) {
		md = 0xF0;
    9f06:	30 ef       	ldi	r19, 0xF0	; 240
    9f08:	43 2e       	mov	r4, r19
			return FR_DISK_ERR;
		md = 0xF8;
	}

	/* Create volume boot record */
	tbl = fs->win;							/* Clear sector */
    9f0a:	22 e3       	ldi	r18, 0x32	; 50
    9f0c:	82 2e       	mov	r8, r18
    9f0e:	91 2c       	mov	r9, r1
    9f10:	8a 0c       	add	r8, r10
    9f12:	9b 1c       	adc	r9, r11
	mem_set(tbl, 0, SS(fs));
    9f14:	c4 01       	movw	r24, r8
    9f16:	60 e0       	ldi	r22, 0x00	; 0
    9f18:	70 e0       	ldi	r23, 0x00	; 0
    9f1a:	40 e0       	ldi	r20, 0x00	; 0
    9f1c:	52 e0       	ldi	r21, 0x02	; 2
    9f1e:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <mem_set>
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot code, OEM name */
    9f22:	c4 01       	movw	r24, r8
    9f24:	64 e1       	ldi	r22, 0x14	; 20
    9f26:	71 e0       	ldi	r23, 0x01	; 1
    9f28:	4b e0       	ldi	r20, 0x0B	; 11
    9f2a:	50 e0       	ldi	r21, 0x00	; 0
    9f2c:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <mem_cpy>
	i = SS(fs);								/* Sector size */
	ST_WORD(tbl+BPB_BytsPerSec, i);
    9f30:	80 e0       	ldi	r24, 0x00	; 0
    9f32:	92 e0       	ldi	r25, 0x02	; 2
    9f34:	d5 01       	movw	r26, r10
    9f36:	de 96       	adiw	r26, 0x3e	; 62
    9f38:	9c 93       	st	X, r25
    9f3a:	8e 93       	st	-X, r24
    9f3c:	dd 97       	sbiw	r26, 0x3d	; 61
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
    9f3e:	df 96       	adiw	r26, 0x3f	; 63
    9f40:	2c 92       	st	X, r2
    9f42:	df 97       	sbiw	r26, 0x3f	; 63
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
    9f44:	f5 01       	movw	r30, r10
    9f46:	e0 5c       	subi	r30, 0xC0	; 192
    9f48:	ff 4f       	sbci	r31, 0xFF	; 255
    9f4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    9f4c:	7f 84       	ldd	r7, Y+15	; 0x0f
    9f4e:	71 82       	std	Z+1, r7	; 0x01
    9f50:	60 82       	st	Z, r6
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
    9f52:	f5 01       	movw	r30, r10
    9f54:	ee 5b       	subi	r30, 0xBE	; 190
    9f56:	ff 4f       	sbci	r31, 0xFF	; 255
    9f58:	81 e0       	ldi	r24, 0x01	; 1
    9f5a:	80 83       	st	Z, r24
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of rootdir entries */
    9f5c:	13 30       	cpi	r17, 0x03	; 3
    9f5e:	19 f4       	brne	.+6      	; 0x9f66 <f_mkfs+0x4e8>
    9f60:	80 e0       	ldi	r24, 0x00	; 0
    9f62:	90 e0       	ldi	r25, 0x00	; 0
    9f64:	02 c0       	rjmp	.+4      	; 0x9f6a <f_mkfs+0x4ec>
    9f66:	80 e0       	ldi	r24, 0x00	; 0
    9f68:	92 e0       	ldi	r25, 0x02	; 2
	ST_WORD(tbl+BPB_RootEntCnt, i);
    9f6a:	f5 01       	movw	r30, r10
    9f6c:	ed 5b       	subi	r30, 0xBD	; 189
    9f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    9f70:	91 83       	std	Z+1, r25	; 0x01
    9f72:	80 83       	st	Z, r24
	if (n_vol < 0x10000) {					/* Number of total sectors */
    9f74:	8d 81       	ldd	r24, Y+5	; 0x05
    9f76:	9e 81       	ldd	r25, Y+6	; 0x06
    9f78:	af 81       	ldd	r26, Y+7	; 0x07
    9f7a:	b8 85       	ldd	r27, Y+8	; 0x08
    9f7c:	80 30       	cpi	r24, 0x00	; 0
    9f7e:	20 e0       	ldi	r18, 0x00	; 0
    9f80:	92 07       	cpc	r25, r18
    9f82:	21 e0       	ldi	r18, 0x01	; 1
    9f84:	a2 07       	cpc	r26, r18
    9f86:	20 e0       	ldi	r18, 0x00	; 0
    9f88:	b2 07       	cpc	r27, r18
    9f8a:	30 f4       	brcc	.+12     	; 0x9f98 <f_mkfs+0x51a>
		ST_WORD(tbl+BPB_TotSec16, n_vol);
    9f8c:	f5 01       	movw	r30, r10
    9f8e:	eb 5b       	subi	r30, 0xBB	; 187
    9f90:	ff 4f       	sbci	r31, 0xFF	; 255
    9f92:	91 83       	std	Z+1, r25	; 0x01
    9f94:	80 83       	st	Z, r24
    9f96:	07 c0       	rjmp	.+14     	; 0x9fa6 <f_mkfs+0x528>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_vol);
    9f98:	f5 01       	movw	r30, r10
    9f9a:	ee 5a       	subi	r30, 0xAE	; 174
    9f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    9f9e:	80 83       	st	Z, r24
    9fa0:	91 83       	std	Z+1, r25	; 0x01
    9fa2:	a2 83       	std	Z+2, r26	; 0x02
    9fa4:	b3 83       	std	Z+3, r27	; 0x03
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
    9fa6:	f5 01       	movw	r30, r10
    9fa8:	e9 5b       	subi	r30, 0xB9	; 185
    9faa:	ff 4f       	sbci	r31, 0xFF	; 255
    9fac:	40 82       	st	Z, r4
	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
    9fae:	f5 01       	movw	r30, r10
    9fb0:	e6 5b       	subi	r30, 0xB6	; 182
    9fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    9fb4:	8f e3       	ldi	r24, 0x3F	; 63
    9fb6:	90 e0       	ldi	r25, 0x00	; 0
    9fb8:	91 83       	std	Z+1, r25	; 0x01
    9fba:	80 83       	st	Z, r24
	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
    9fbc:	f5 01       	movw	r30, r10
    9fbe:	e4 5b       	subi	r30, 0xB4	; 180
    9fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    9fc2:	8f ef       	ldi	r24, 0xFF	; 255
    9fc4:	90 e0       	ldi	r25, 0x00	; 0
    9fc6:	91 83       	std	Z+1, r25	; 0x01
    9fc8:	80 83       	st	Z, r24
	ST_DWORD(tbl+BPB_HiddSec, b_vol);		/* Hidden sectors */
    9fca:	f5 01       	movw	r30, r10
    9fcc:	e2 5b       	subi	r30, 0xB2	; 178
    9fce:	ff 4f       	sbci	r31, 0xFF	; 255
    9fd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    9fd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    9fd4:	ac 85       	ldd	r26, Y+12	; 0x0c
    9fd6:	bd 85       	ldd	r27, Y+13	; 0x0d
    9fd8:	80 83       	st	Z, r24
    9fda:	91 83       	std	Z+1, r25	; 0x01
    9fdc:	a2 83       	std	Z+2, r26	; 0x02
    9fde:	b3 83       	std	Z+3, r27	; 0x03
	n = get_fattime();						/* Use current time as VSN */
    9fe0:	0e 94 61 23 	call	0x46c2	; 0x46c2 <get_fattime>
    9fe4:	69 83       	std	Y+1, r22	; 0x01
    9fe6:	7a 83       	std	Y+2, r23	; 0x02
    9fe8:	8b 83       	std	Y+3, r24	; 0x03
    9fea:	9c 83       	std	Y+4, r25	; 0x04
    9fec:	d5 01       	movw	r26, r10
    9fee:	aa 5a       	subi	r26, 0xAA	; 170
    9ff0:	bf 4f       	sbci	r27, 0xFF	; 255
	if (fmt == FS_FAT32) {
    9ff2:	13 30       	cpi	r17, 0x03	; 3
    9ff4:	a9 f5       	brne	.+106    	; 0xa060 <f_mkfs+0x5e2>
		ST_DWORD(tbl+BS_VolID32, n);		/* VSN */
    9ff6:	f5 01       	movw	r30, r10
    9ff8:	eb 58       	subi	r30, 0x8B	; 139
    9ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    9ffc:	60 83       	st	Z, r22
    9ffe:	71 83       	std	Z+1, r23	; 0x01
    a000:	82 83       	std	Z+2, r24	; 0x02
    a002:	93 83       	std	Z+3, r25	; 0x03
		ST_DWORD(tbl+BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
    a004:	cd 92       	st	X+, r12
    a006:	dd 92       	st	X+, r13
    a008:	ed 92       	st	X+, r14
    a00a:	fc 92       	st	X, r15
    a00c:	13 97       	sbiw	r26, 0x03	; 3
		ST_DWORD(tbl+BPB_RootClus, 2);		/* Root directory start cluster (2) */
    a00e:	f5 01       	movw	r30, r10
    a010:	e2 5a       	subi	r30, 0xA2	; 162
    a012:	ff 4f       	sbci	r31, 0xFF	; 255
    a014:	82 e0       	ldi	r24, 0x02	; 2
    a016:	90 e0       	ldi	r25, 0x00	; 0
    a018:	a0 e0       	ldi	r26, 0x00	; 0
    a01a:	b0 e0       	ldi	r27, 0x00	; 0
    a01c:	80 83       	st	Z, r24
    a01e:	91 83       	std	Z+1, r25	; 0x01
    a020:	a2 83       	std	Z+2, r26	; 0x02
    a022:	b3 83       	std	Z+3, r27	; 0x03
		ST_WORD(tbl+BPB_FSInfo, 1);			/* FSInfo record offset (VBR+1) */
    a024:	f5 01       	movw	r30, r10
    a026:	ee 59       	subi	r30, 0x9E	; 158
    a028:	ff 4f       	sbci	r31, 0xFF	; 255
    a02a:	81 e0       	ldi	r24, 0x01	; 1
    a02c:	90 e0       	ldi	r25, 0x00	; 0
    a02e:	91 83       	std	Z+1, r25	; 0x01
    a030:	80 83       	st	Z, r24
		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
    a032:	f5 01       	movw	r30, r10
    a034:	ec 59       	subi	r30, 0x9C	; 156
    a036:	ff 4f       	sbci	r31, 0xFF	; 255
    a038:	86 e0       	ldi	r24, 0x06	; 6
    a03a:	90 e0       	ldi	r25, 0x00	; 0
    a03c:	91 83       	std	Z+1, r25	; 0x01
    a03e:	80 83       	st	Z, r24
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
    a040:	f5 01       	movw	r30, r10
    a042:	ee 58       	subi	r30, 0x8E	; 142
    a044:	ff 4f       	sbci	r31, 0xFF	; 255
    a046:	80 e8       	ldi	r24, 0x80	; 128
    a048:	80 83       	st	Z, r24
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
    a04a:	f5 01       	movw	r30, r10
    a04c:	ec 58       	subi	r30, 0x8C	; 140
    a04e:	ff 4f       	sbci	r31, 0xFF	; 255
    a050:	89 e2       	ldi	r24, 0x29	; 41
    a052:	80 83       	st	Z, r24
		mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
    a054:	c5 01       	movw	r24, r10
    a056:	87 58       	subi	r24, 0x87	; 135
    a058:	9f 4f       	sbci	r25, 0xFF	; 255
    a05a:	60 e2       	ldi	r22, 0x20	; 32
    a05c:	71 e0       	ldi	r23, 0x01	; 1
    a05e:	18 c0       	rjmp	.+48     	; 0xa090 <f_mkfs+0x612>
	} else {
		ST_DWORD(tbl+BS_VolID, n);			/* VSN */
    a060:	f5 01       	movw	r30, r10
    a062:	e7 5a       	subi	r30, 0xA7	; 167
    a064:	ff 4f       	sbci	r31, 0xFF	; 255
    a066:	60 83       	st	Z, r22
    a068:	71 83       	std	Z+1, r23	; 0x01
    a06a:	82 83       	std	Z+2, r24	; 0x02
    a06c:	93 83       	std	Z+3, r25	; 0x03
		ST_WORD(tbl+BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
    a06e:	f5 01       	movw	r30, r10
    a070:	e8 5b       	subi	r30, 0xB8	; 184
    a072:	ff 4f       	sbci	r31, 0xFF	; 255
    a074:	d1 82       	std	Z+1, r13	; 0x01
    a076:	c0 82       	st	Z, r12
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
    a078:	80 e8       	ldi	r24, 0x80	; 128
    a07a:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
    a07c:	f5 01       	movw	r30, r10
    a07e:	e8 5a       	subi	r30, 0xA8	; 168
    a080:	ff 4f       	sbci	r31, 0xFF	; 255
    a082:	89 e2       	ldi	r24, 0x29	; 41
    a084:	80 83       	st	Z, r24
		mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
    a086:	c5 01       	movw	r24, r10
    a088:	83 5a       	subi	r24, 0xA3	; 163
    a08a:	9f 4f       	sbci	r25, 0xFF	; 255
    a08c:	64 e3       	ldi	r22, 0x34	; 52
    a08e:	71 e0       	ldi	r23, 0x01	; 1
    a090:	43 e1       	ldi	r20, 0x13	; 19
    a092:	50 e0       	ldi	r21, 0x00	; 0
    a094:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <mem_cpy>
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
    a098:	d5 01       	movw	r26, r10
    a09a:	a0 5d       	subi	r26, 0xD0	; 208
    a09c:	bd 4f       	sbci	r27, 0xFD	; 253
    a09e:	bf 87       	std	Y+15, r27	; 0x0f
    a0a0:	ae 87       	std	Y+14, r26	; 0x0e
    a0a2:	85 e5       	ldi	r24, 0x55	; 85
    a0a4:	9a ea       	ldi	r25, 0xAA	; 170
    a0a6:	8d 93       	st	X+, r24
    a0a8:	9c 93       	st	X, r25
	if (disk_write(drv, tbl, b_vol, 1) != RES_OK)/* Write original (VBR) */
    a0aa:	89 85       	ldd	r24, Y+9	; 0x09
    a0ac:	b4 01       	movw	r22, r8
    a0ae:	2a 85       	ldd	r18, Y+10	; 0x0a
    a0b0:	3b 85       	ldd	r19, Y+11	; 0x0b
    a0b2:	4c 85       	ldd	r20, Y+12	; 0x0c
    a0b4:	5d 85       	ldd	r21, Y+13	; 0x0d
    a0b6:	01 e0       	ldi	r16, 0x01	; 1
    a0b8:	0e 94 e1 53 	call	0xa7c2	; 0xa7c2 <disk_write>
    a0bc:	00 97       	sbiw	r24, 0x00	; 0
    a0be:	09 f0       	breq	.+2      	; 0xa0c2 <f_mkfs+0x644>
    a0c0:	1e c1       	rjmp	.+572    	; 0xa2fe <f_mkfs+0x880>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)					/* Write backup (VBR+6) */
    a0c2:	13 30       	cpi	r17, 0x03	; 3
    a0c4:	61 f4       	brne	.+24     	; 0xa0de <f_mkfs+0x660>
		disk_write(drv, tbl, b_vol + 6, 1);
    a0c6:	2a 85       	ldd	r18, Y+10	; 0x0a
    a0c8:	3b 85       	ldd	r19, Y+11	; 0x0b
    a0ca:	4c 85       	ldd	r20, Y+12	; 0x0c
    a0cc:	5d 85       	ldd	r21, Y+13	; 0x0d
    a0ce:	2a 5f       	subi	r18, 0xFA	; 250
    a0d0:	3f 4f       	sbci	r19, 0xFF	; 255
    a0d2:	4f 4f       	sbci	r20, 0xFF	; 255
    a0d4:	5f 4f       	sbci	r21, 0xFF	; 255
    a0d6:	89 85       	ldd	r24, Y+9	; 0x09
    a0d8:	b4 01       	movw	r22, r8
    a0da:	0e 94 e1 53 	call	0xa7c2	; 0xa7c2 <disk_write>

	/* Initialize FAT area */
	wsect = b_fat;
	for (i = 0; i < N_FATS; i++) {
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
    a0de:	c4 01       	movw	r24, r8
    a0e0:	60 e0       	ldi	r22, 0x00	; 0
    a0e2:	70 e0       	ldi	r23, 0x00	; 0
    a0e4:	40 e0       	ldi	r20, 0x00	; 0
    a0e6:	52 e0       	ldi	r21, 0x02	; 2
    a0e8:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <mem_set>
		n = md;								/* Media descriptor byte */
    a0ec:	24 2d       	mov	r18, r4
    a0ee:	30 e0       	ldi	r19, 0x00	; 0
    a0f0:	40 e0       	ldi	r20, 0x00	; 0
    a0f2:	50 e0       	ldi	r21, 0x00	; 0
		if (fmt != FS_FAT32) {
    a0f4:	13 30       	cpi	r17, 0x03	; 3
    a0f6:	c9 f0       	breq	.+50     	; 0xa12a <f_mkfs+0x6ac>
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    a0f8:	11 30       	cpi	r17, 0x01	; 1
    a0fa:	29 f0       	breq	.+10     	; 0xa106 <f_mkfs+0x688>
    a0fc:	80 e0       	ldi	r24, 0x00	; 0
    a0fe:	9f ef       	ldi	r25, 0xFF	; 255
    a100:	af ef       	ldi	r26, 0xFF	; 255
    a102:	bf ef       	ldi	r27, 0xFF	; 255
    a104:	04 c0       	rjmp	.+8      	; 0xa10e <f_mkfs+0x690>
    a106:	80 e0       	ldi	r24, 0x00	; 0
    a108:	9f ef       	ldi	r25, 0xFF	; 255
    a10a:	af ef       	ldi	r26, 0xFF	; 255
    a10c:	b0 e0       	ldi	r27, 0x00	; 0
    a10e:	82 2b       	or	r24, r18
    a110:	93 2b       	or	r25, r19
    a112:	a4 2b       	or	r26, r20
    a114:	b5 2b       	or	r27, r21
    a116:	89 83       	std	Y+1, r24	; 0x01
    a118:	9a 83       	std	Y+2, r25	; 0x02
    a11a:	ab 83       	std	Y+3, r26	; 0x03
    a11c:	bc 83       	std	Y+4, r27	; 0x04
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
    a11e:	f5 01       	movw	r30, r10
    a120:	82 ab       	std	Z+50, r24	; 0x32
    a122:	93 ab       	std	Z+51, r25	; 0x33
    a124:	a4 ab       	std	Z+52, r26	; 0x34
    a126:	b5 ab       	std	Z+53, r27	; 0x35
    a128:	1f c0       	rjmp	.+62     	; 0xa168 <f_mkfs+0x6ea>
		} else {
			n |= 0xFFFFFF00;
    a12a:	3f 6f       	ori	r19, 0xFF	; 255
    a12c:	4f 6f       	ori	r20, 0xFF	; 255
    a12e:	5f 6f       	ori	r21, 0xFF	; 255
    a130:	29 83       	std	Y+1, r18	; 0x01
    a132:	3a 83       	std	Y+2, r19	; 0x02
    a134:	4b 83       	std	Y+3, r20	; 0x03
    a136:	5c 83       	std	Y+4, r21	; 0x04
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
    a138:	d5 01       	movw	r26, r10
    a13a:	d2 96       	adiw	r26, 0x32	; 50
    a13c:	2d 93       	st	X+, r18
    a13e:	3d 93       	st	X+, r19
    a140:	4d 93       	st	X+, r20
    a142:	5c 93       	st	X, r21
    a144:	d5 97       	sbiw	r26, 0x35	; 53
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    a146:	8f ef       	ldi	r24, 0xFF	; 255
    a148:	9f ef       	ldi	r25, 0xFF	; 255
    a14a:	af ef       	ldi	r26, 0xFF	; 255
    a14c:	bf ef       	ldi	r27, 0xFF	; 255
    a14e:	f5 01       	movw	r30, r10
    a150:	86 ab       	std	Z+54, r24	; 0x36
    a152:	97 ab       	std	Z+55, r25	; 0x37
    a154:	a0 af       	std	Z+56, r26	; 0x38
    a156:	b1 af       	std	Z+57, r27	; 0x39
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    a158:	8f ef       	ldi	r24, 0xFF	; 255
    a15a:	9f ef       	ldi	r25, 0xFF	; 255
    a15c:	af ef       	ldi	r26, 0xFF	; 255
    a15e:	bf e0       	ldi	r27, 0x0F	; 15
    a160:	82 af       	std	Z+58, r24	; 0x3a
    a162:	93 af       	std	Z+59, r25	; 0x3b
    a164:	a4 af       	std	Z+60, r26	; 0x3c
    a166:	b5 af       	std	Z+61, r27	; 0x3d
		}
		if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
    a168:	89 85       	ldd	r24, Y+9	; 0x09
    a16a:	b4 01       	movw	r22, r8
    a16c:	2e 89       	ldd	r18, Y+22	; 0x16
    a16e:	3f 89       	ldd	r19, Y+23	; 0x17
    a170:	48 8d       	ldd	r20, Y+24	; 0x18
    a172:	59 8d       	ldd	r21, Y+25	; 0x19
    a174:	01 e0       	ldi	r16, 0x01	; 1
    a176:	0e 94 e1 53 	call	0xa7c2	; 0xa7c2 <disk_write>
    a17a:	00 97       	sbiw	r24, 0x00	; 0
    a17c:	09 f0       	breq	.+2      	; 0xa180 <f_mkfs+0x702>
    a17e:	bf c0       	rjmp	.+382    	; 0xa2fe <f_mkfs+0x880>
    a180:	4e 88       	ldd	r4, Y+22	; 0x16
    a182:	5f 88       	ldd	r5, Y+23	; 0x17
    a184:	68 8c       	ldd	r6, Y+24	; 0x18
    a186:	79 8c       	ldd	r7, Y+25	; 0x19
    a188:	08 94       	sec
    a18a:	41 1c       	adc	r4, r1
    a18c:	51 1c       	adc	r5, r1
    a18e:	61 1c       	adc	r6, r1
    a190:	71 1c       	adc	r7, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
    a192:	c4 01       	movw	r24, r8
    a194:	60 e0       	ldi	r22, 0x00	; 0
    a196:	70 e0       	ldi	r23, 0x00	; 0
    a198:	40 e0       	ldi	r20, 0x00	; 0
    a19a:	52 e0       	ldi	r21, 0x02	; 2
    a19c:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <mem_set>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector write */
    a1a0:	81 e0       	ldi	r24, 0x01	; 1
    a1a2:	90 e0       	ldi	r25, 0x00	; 0
    a1a4:	a0 e0       	ldi	r26, 0x00	; 0
    a1a6:	b0 e0       	ldi	r27, 0x00	; 0
    a1a8:	16 c0       	rjmp	.+44     	; 0xa1d6 <f_mkfs+0x758>
			if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
    a1aa:	89 85       	ldd	r24, Y+9	; 0x09
    a1ac:	b4 01       	movw	r22, r8
    a1ae:	a3 01       	movw	r20, r6
    a1b0:	92 01       	movw	r18, r4
    a1b2:	01 e0       	ldi	r16, 0x01	; 1
    a1b4:	0e 94 e1 53 	call	0xa7c2	; 0xa7c2 <disk_write>
    a1b8:	00 97       	sbiw	r24, 0x00	; 0
    a1ba:	09 f0       	breq	.+2      	; 0xa1be <f_mkfs+0x740>
    a1bc:	a0 c0       	rjmp	.+320    	; 0xa2fe <f_mkfs+0x880>
    a1be:	08 94       	sec
    a1c0:	41 1c       	adc	r4, r1
    a1c2:	51 1c       	adc	r5, r1
    a1c4:	61 1c       	adc	r6, r1
    a1c6:	71 1c       	adc	r7, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector write */
    a1c8:	89 81       	ldd	r24, Y+1	; 0x01
    a1ca:	9a 81       	ldd	r25, Y+2	; 0x02
    a1cc:	ab 81       	ldd	r26, Y+3	; 0x03
    a1ce:	bc 81       	ldd	r27, Y+4	; 0x04
    a1d0:	01 96       	adiw	r24, 0x01	; 1
    a1d2:	a1 1d       	adc	r26, r1
    a1d4:	b1 1d       	adc	r27, r1
    a1d6:	89 83       	std	Y+1, r24	; 0x01
    a1d8:	9a 83       	std	Y+2, r25	; 0x02
    a1da:	ab 83       	std	Y+3, r26	; 0x03
    a1dc:	bc 83       	std	Y+4, r27	; 0x04
    a1de:	89 81       	ldd	r24, Y+1	; 0x01
    a1e0:	9a 81       	ldd	r25, Y+2	; 0x02
    a1e2:	ab 81       	ldd	r26, Y+3	; 0x03
    a1e4:	bc 81       	ldd	r27, Y+4	; 0x04
    a1e6:	8c 15       	cp	r24, r12
    a1e8:	9d 05       	cpc	r25, r13
    a1ea:	ae 05       	cpc	r26, r14
    a1ec:	bf 05       	cpc	r27, r15
    a1ee:	e8 f2       	brcs	.-70     	; 0xa1aa <f_mkfs+0x72c>
				return FR_DISK_ERR;
		}
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : n_dir;
    a1f0:	13 30       	cpi	r17, 0x03	; 3
    a1f2:	11 f0       	breq	.+4      	; 0xa1f8 <f_mkfs+0x77a>
    a1f4:	2a 8c       	ldd	r2, Y+26	; 0x1a
    a1f6:	3b 8c       	ldd	r3, Y+27	; 0x1b
    a1f8:	a3 01       	movw	r20, r6
    a1fa:	92 01       	movw	r18, r4
    a1fc:	02 c0       	rjmp	.+4      	; 0xa202 <f_mkfs+0x784>
	do {
		if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
    a1fe:	a7 01       	movw	r20, r14
    a200:	96 01       	movw	r18, r12
    a202:	69 01       	movw	r12, r18
    a204:	7a 01       	movw	r14, r20
    a206:	08 94       	sec
    a208:	c1 1c       	adc	r12, r1
    a20a:	d1 1c       	adc	r13, r1
    a20c:	e1 1c       	adc	r14, r1
    a20e:	f1 1c       	adc	r15, r1
    a210:	89 85       	ldd	r24, Y+9	; 0x09
    a212:	b4 01       	movw	r22, r8
    a214:	01 e0       	ldi	r16, 0x01	; 1
    a216:	0e 94 e1 53 	call	0xa7c2	; 0xa7c2 <disk_write>
    a21a:	00 97       	sbiw	r24, 0x00	; 0
    a21c:	09 f0       	breq	.+2      	; 0xa220 <f_mkfs+0x7a2>
    a21e:	6f c0       	rjmp	.+222    	; 0xa2fe <f_mkfs+0x880>
			return FR_DISK_ERR;
	} while (--i);
    a220:	08 94       	sec
    a222:	21 08       	sbc	r2, r1
    a224:	31 08       	sbc	r3, r1
    a226:	21 14       	cp	r2, r1
    a228:	31 04       	cpc	r3, r1
    a22a:	49 f7       	brne	.-46     	; 0xa1fe <f_mkfs+0x780>
		disk_ioctl(drv, CTRL_ERASE_SECTOR, eb);
	}
#endif

	/* Create FSInfo if needed */
	if (fmt == FS_FAT32) {
    a22c:	13 30       	cpi	r17, 0x03	; 3
    a22e:	09 f0       	breq	.+2      	; 0xa232 <f_mkfs+0x7b4>
    a230:	4a c0       	rjmp	.+148    	; 0xa2c6 <f_mkfs+0x848>
		ST_WORD(tbl+BS_55AA, 0xAA55);
    a232:	85 e5       	ldi	r24, 0x55	; 85
    a234:	9a ea       	ldi	r25, 0xAA	; 170
    a236:	ae 85       	ldd	r26, Y+14	; 0x0e
    a238:	bf 85       	ldd	r27, Y+15	; 0x0f
    a23a:	8d 93       	st	X+, r24
    a23c:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    a23e:	82 e5       	ldi	r24, 0x52	; 82
    a240:	92 e5       	ldi	r25, 0x52	; 82
    a242:	a1 e6       	ldi	r26, 0x61	; 97
    a244:	b1 e4       	ldi	r27, 0x41	; 65
    a246:	f5 01       	movw	r30, r10
    a248:	82 ab       	std	Z+50, r24	; 0x32
    a24a:	93 ab       	std	Z+51, r25	; 0x33
    a24c:	a4 ab       	std	Z+52, r26	; 0x34
    a24e:	b5 ab       	std	Z+53, r27	; 0x35
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    a250:	ea 5e       	subi	r30, 0xEA	; 234
    a252:	fd 4f       	sbci	r31, 0xFD	; 253
    a254:	82 e7       	ldi	r24, 0x72	; 114
    a256:	92 e7       	ldi	r25, 0x72	; 114
    a258:	a1 e4       	ldi	r26, 0x41	; 65
    a25a:	b1 e6       	ldi	r27, 0x61	; 97
    a25c:	80 83       	st	Z, r24
    a25e:	91 83       	std	Z+1, r25	; 0x01
    a260:	a2 83       	std	Z+2, r26	; 0x02
    a262:	b3 83       	std	Z+3, r27	; 0x03
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
    a264:	f5 01       	movw	r30, r10
    a266:	e6 5e       	subi	r30, 0xE6	; 230
    a268:	fd 4f       	sbci	r31, 0xFD	; 253
    a26a:	8a 89       	ldd	r24, Y+18	; 0x12
    a26c:	9b 89       	ldd	r25, Y+19	; 0x13
    a26e:	ac 89       	ldd	r26, Y+20	; 0x14
    a270:	bd 89       	ldd	r27, Y+21	; 0x15
    a272:	01 97       	sbiw	r24, 0x01	; 1
    a274:	a1 09       	sbc	r26, r1
    a276:	b1 09       	sbc	r27, r1
    a278:	80 83       	st	Z, r24
    a27a:	91 83       	std	Z+1, r25	; 0x01
    a27c:	a2 83       	std	Z+2, r26	; 0x02
    a27e:	b3 83       	std	Z+3, r27	; 0x03
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
    a280:	f5 01       	movw	r30, r10
    a282:	e2 5e       	subi	r30, 0xE2	; 226
    a284:	fd 4f       	sbci	r31, 0xFD	; 253
    a286:	8f ef       	ldi	r24, 0xFF	; 255
    a288:	9f ef       	ldi	r25, 0xFF	; 255
    a28a:	af ef       	ldi	r26, 0xFF	; 255
    a28c:	bf ef       	ldi	r27, 0xFF	; 255
    a28e:	80 83       	st	Z, r24
    a290:	91 83       	std	Z+1, r25	; 0x01
    a292:	a2 83       	std	Z+2, r26	; 0x02
    a294:	b3 83       	std	Z+3, r27	; 0x03
		disk_write(drv, tbl, b_vol + 1, 1);	/* Write original (VBR+1) */
    a296:	2a 85       	ldd	r18, Y+10	; 0x0a
    a298:	3b 85       	ldd	r19, Y+11	; 0x0b
    a29a:	4c 85       	ldd	r20, Y+12	; 0x0c
    a29c:	5d 85       	ldd	r21, Y+13	; 0x0d
    a29e:	2f 5f       	subi	r18, 0xFF	; 255
    a2a0:	3f 4f       	sbci	r19, 0xFF	; 255
    a2a2:	4f 4f       	sbci	r20, 0xFF	; 255
    a2a4:	5f 4f       	sbci	r21, 0xFF	; 255
    a2a6:	89 85       	ldd	r24, Y+9	; 0x09
    a2a8:	b4 01       	movw	r22, r8
    a2aa:	0e 94 e1 53 	call	0xa7c2	; 0xa7c2 <disk_write>
		disk_write(drv, tbl, b_vol + 7, 1);	/* Write backup (VBR+7) */
    a2ae:	2a 85       	ldd	r18, Y+10	; 0x0a
    a2b0:	3b 85       	ldd	r19, Y+11	; 0x0b
    a2b2:	4c 85       	ldd	r20, Y+12	; 0x0c
    a2b4:	5d 85       	ldd	r21, Y+13	; 0x0d
    a2b6:	29 5f       	subi	r18, 0xF9	; 249
    a2b8:	3f 4f       	sbci	r19, 0xFF	; 255
    a2ba:	4f 4f       	sbci	r20, 0xFF	; 255
    a2bc:	5f 4f       	sbci	r21, 0xFF	; 255
    a2be:	89 85       	ldd	r24, Y+9	; 0x09
    a2c0:	b4 01       	movw	r22, r8
    a2c2:	0e 94 e1 53 	call	0xa7c2	; 0xa7c2 <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)0) == RES_OK) ? FR_OK : FR_DISK_ERR;
    a2c6:	89 85       	ldd	r24, Y+9	; 0x09
    a2c8:	60 e0       	ldi	r22, 0x00	; 0
    a2ca:	40 e0       	ldi	r20, 0x00	; 0
    a2cc:	50 e0       	ldi	r21, 0x00	; 0
    a2ce:	0e 94 57 54 	call	0xa8ae	; 0xa8ae <disk_ioctl>
    a2d2:	21 e0       	ldi	r18, 0x01	; 1
    a2d4:	30 e0       	ldi	r19, 0x00	; 0
    a2d6:	00 97       	sbiw	r24, 0x00	; 0
    a2d8:	a1 f4       	brne	.+40     	; 0xa302 <f_mkfs+0x884>
    a2da:	20 e0       	ldi	r18, 0x00	; 0
    a2dc:	30 e0       	ldi	r19, 0x00	; 0
    a2de:	11 c0       	rjmp	.+34     	; 0xa302 <f_mkfs+0x884>
	FATFS *fs;
	DSTATUS stat;


	/* Check mounted drive and clear work area */
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
    a2e0:	2b e0       	ldi	r18, 0x0B	; 11
    a2e2:	30 e0       	ldi	r19, 0x00	; 0
    a2e4:	0e c0       	rjmp	.+28     	; 0xa302 <f_mkfs+0x884>
	fs = FatFs[drv];
	if (!fs) return FR_NOT_ENABLED;
    a2e6:	2c e0       	ldi	r18, 0x0C	; 12
    a2e8:	30 e0       	ldi	r19, 0x00	; 0
    a2ea:	0b c0       	rjmp	.+22     	; 0xa302 <f_mkfs+0x884>
	fs->fs_type = 0;
	drv = LD2PD(drv);

	/* Get disk statics */
	stat = disk_initialize(drv);
	if (stat & STA_NOINIT) return FR_NOT_READY;
    a2ec:	23 e0       	ldi	r18, 0x03	; 3
    a2ee:	30 e0       	ldi	r19, 0x00	; 0
    a2f0:	08 c0       	rjmp	.+16     	; 0xa302 <f_mkfs+0x884>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    a2f2:	2a e0       	ldi	r18, 0x0A	; 10
    a2f4:	30 e0       	ldi	r19, 0x00	; 0
    a2f6:	05 c0       	rjmp	.+10     	; 0xa302 <f_mkfs+0x884>

	/* Determine number of cluster and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
		return FR_MKFS_ABORTED;
    a2f8:	2e e0       	ldi	r18, 0x0E	; 14
    a2fa:	30 e0       	ldi	r19, 0x00	; 0
    a2fc:	02 c0       	rjmp	.+4      	; 0xa302 <f_mkfs+0x884>

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : n_dir;
	do {
		if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
			return FR_DISK_ERR;
    a2fe:	21 e0       	ldi	r18, 0x01	; 1
    a300:	30 e0       	ldi	r19, 0x00	; 0
		disk_write(drv, tbl, b_vol + 1, 1);	/* Write original (VBR+1) */
		disk_write(drv, tbl, b_vol + 7, 1);	/* Write backup (VBR+7) */
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)0) == RES_OK) ? FR_OK : FR_DISK_ERR;
}
    a302:	c9 01       	movw	r24, r18
    a304:	a1 96       	adiw	r28, 0x21	; 33
    a306:	e2 e1       	ldi	r30, 0x12	; 18
    a308:	0c 94 ee 5c 	jmp	0xb9dc	; 0xb9dc <__epilogue_restores__>
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    a30c:	69 01       	movw	r12, r18
    a30e:	7a 01       	movw	r14, r20
    a310:	92 e0       	ldi	r25, 0x02	; 2
    a312:	cc 0c       	add	r12, r12
    a314:	dd 1c       	adc	r13, r13
    a316:	ee 1c       	adc	r14, r14
    a318:	ff 1c       	adc	r15, r15
    a31a:	9a 95       	dec	r25
    a31c:	d1 f7       	brne	.-12     	; 0xa312 <f_mkfs+0x894>
    a31e:	27 e0       	ldi	r18, 0x07	; 7
    a320:	32 e0       	ldi	r19, 0x02	; 2
    a322:	40 e0       	ldi	r20, 0x00	; 0
    a324:	50 e0       	ldi	r21, 0x00	; 0
    a326:	c2 0e       	add	r12, r18
    a328:	d3 1e       	adc	r13, r19
    a32a:	e4 1e       	adc	r14, r20
    a32c:	f5 1e       	adc	r15, r21
    a32e:	89 e0       	ldi	r24, 0x09	; 9
    a330:	f6 94       	lsr	r15
    a332:	e7 94       	ror	r14
    a334:	d7 94       	ror	r13
    a336:	c7 94       	ror	r12
    a338:	8a 95       	dec	r24
    a33a:	d1 f7       	brne	.-12     	; 0xa330 <f_mkfs+0x8b2>

	/* Pre-compute number of clusters and FAT syb-type */
	n_clst = n_vol / au;
	fmt = FS_FAT12;
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
    a33c:	13 e0       	ldi	r17, 0x03	; 3

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
		n_dir = 0;
    a33e:	1a 8e       	std	Y+26, r1	; 0x1a
    a340:	1b 8e       	std	Y+27, r1	; 0x1b
    a342:	1c 8e       	std	Y+28, r1	; 0x1c
    a344:	1d 8e       	std	Y+29, r1	; 0x1d
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
    a346:	80 e2       	ldi	r24, 0x20	; 32
    a348:	90 e0       	ldi	r25, 0x00	; 0
    a34a:	a0 e0       	ldi	r26, 0x00	; 0
    a34c:	b0 e0       	ldi	r27, 0x00	; 0
    a34e:	6b cc       	rjmp	.-1834   	; 0x9c26 <f_mkfs+0x1a8>
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
    a350:	da 01       	movw	r26, r20
    a352:	c9 01       	movw	r24, r18
    a354:	02 96       	adiw	r24, 0x02	; 2
    a356:	a1 1d       	adc	r26, r1
    a358:	b1 1d       	adc	r27, r1
    a35a:	88 0f       	add	r24, r24
    a35c:	99 1f       	adc	r25, r25
    a35e:	aa 1f       	adc	r26, r26
    a360:	bb 1f       	adc	r27, r27
	if (au > 128) au = 128;

	/* Pre-compute number of clusters and FAT syb-type */
	n_clst = n_vol / au;
	fmt = FS_FAT12;
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
    a362:	12 e0       	ldi	r17, 0x02	; 2
    a364:	43 cc       	rjmp	.-1914   	; 0x9bec <f_mkfs+0x16e>

0000a366 <rcvr_spi>:
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    a366:	8f ef       	ldi	r24, 0xFF	; 255
    a368:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    a36a:	0d b4       	in	r0, 0x2d	; 45
    a36c:	07 fe       	sbrs	r0, 7
    a36e:	fd cf       	rjmp	.-6      	; 0xa36a <rcvr_spi+0x4>
	return SPDR;
    a370:	8e b5       	in	r24, 0x2e	; 46
}
    a372:	08 95       	ret

0000a374 <wait_ready>:
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    a374:	82 e3       	ldi	r24, 0x32	; 50
    a376:	80 93 94 02 	sts	0x0294, r24
	rcvr_spi();
    a37a:	0e 94 b3 51 	call	0xa366	; 0xa366 <rcvr_spi>
	do
		if (rcvr_spi() == 0xFF) return 1;
    a37e:	0e 94 b3 51 	call	0xa366	; 0xa366 <rcvr_spi>
    a382:	8f 3f       	cpi	r24, 0xFF	; 255
    a384:	39 f0       	breq	.+14     	; 0xa394 <wait_ready+0x20>
	while (Timer2);
    a386:	80 91 94 02 	lds	r24, 0x0294
    a38a:	88 23       	and	r24, r24
    a38c:	c1 f7       	brne	.-16     	; 0xa37e <wait_ready+0xa>

	return 0;
    a38e:	20 e0       	ldi	r18, 0x00	; 0
    a390:	30 e0       	ldi	r19, 0x00	; 0
    a392:	02 c0       	rjmp	.+4      	; 0xa398 <wait_ready+0x24>
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		if (rcvr_spi() == 0xFF) return 1;
    a394:	21 e0       	ldi	r18, 0x01	; 1
    a396:	30 e0       	ldi	r19, 0x00	; 0
	while (Timer2);

	return 0;
}
    a398:	c9 01       	movw	r24, r18
    a39a:	08 95       	ret

0000a39c <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    a39c:	28 9a       	sbi	0x05, 0	; 5
	rcvr_spi();
    a39e:	0e 94 b3 51 	call	0xa366	; 0xa366 <rcvr_spi>
}
    a3a2:	08 95       	ret

0000a3a4 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
    a3a4:	28 98       	cbi	0x05, 0	; 5
	if (!wait_ready()) {
    a3a6:	0e 94 ba 51 	call	0xa374	; 0xa374 <wait_ready>
    a3aa:	00 97       	sbiw	r24, 0x00	; 0
    a3ac:	29 f4       	brne	.+10     	; 0xa3b8 <select+0x14>
		deselect();
    a3ae:	0e 94 ce 51 	call	0xa39c	; 0xa39c <deselect>
		return 0;
    a3b2:	20 e0       	ldi	r18, 0x00	; 0
    a3b4:	30 e0       	ldi	r19, 0x00	; 0
    a3b6:	02 c0       	rjmp	.+4      	; 0xa3bc <select+0x18>
	}
	return 1;
    a3b8:	21 e0       	ldi	r18, 0x01	; 1
    a3ba:	30 e0       	ldi	r19, 0x00	; 0
}
    a3bc:	c9 01       	movw	r24, r18
    a3be:	08 95       	ret

0000a3c0 <power_off>:


static
void power_off (void)
{
   SELECT();            /* Wait for card ready */
    a3c0:	41 98       	cbi	0x08, 1	; 8
   wait_ready();
    a3c2:	0e 94 ba 51 	call	0xa374	; 0xa374 <wait_ready>


static
void release_spi (void)
{
	DESELECT();
    a3c6:	41 9a       	sbi	0x08, 1	; 8
	rcvr_spi();
    a3c8:	0e 94 b3 51 	call	0xa366	; 0xa366 <rcvr_spi>
void power_off (void)
{
   SELECT();            /* Wait for card ready */
   wait_ready();
   release_spi();
   Stat |= STA_NOINIT;      /* Set STA_NOINIT */
    a3cc:	80 91 81 01 	lds	r24, 0x0181
    a3d0:	81 60       	ori	r24, 0x01	; 1
    a3d2:	80 93 81 01 	sts	0x0181, r24
}
    a3d6:	08 95       	ret

0000a3d8 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    a3d8:	0f 93       	push	r16
    a3da:	1f 93       	push	r17
    a3dc:	cf 93       	push	r28
    a3de:	df 93       	push	r29
    a3e0:	ec 01       	movw	r28, r24
    a3e2:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    a3e4:	84 e1       	ldi	r24, 0x14	; 20
    a3e6:	80 93 93 02 	sts	0x0293, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
    a3ea:	0e 94 b3 51 	call	0xa366	; 0xa366 <rcvr_spi>
	} while ((token == 0xFF) && Timer1);
    a3ee:	8f 3f       	cpi	r24, 0xFF	; 255
    a3f0:	29 f4       	brne	.+10     	; 0xa3fc <rcvr_datablock+0x24>
    a3f2:	80 91 93 02 	lds	r24, 0x0293
    a3f6:	88 23       	and	r24, r24
    a3f8:	c1 f7       	brne	.-16     	; 0xa3ea <rcvr_datablock+0x12>
    a3fa:	27 c0       	rjmp	.+78     	; 0xa44a <rcvr_datablock+0x72>
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
    a3fc:	8e 3f       	cpi	r24, 0xFE	; 254
    a3fe:	29 f5       	brne	.+74     	; 0xa44a <rcvr_datablock+0x72>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
    a400:	8f ef       	ldi	r24, 0xFF	; 255
    a402:	8e bd       	out	0x2e, r24	; 46
    a404:	0d b4       	in	r0, 0x2d	; 45
    a406:	07 fe       	sbrs	r0, 7
    a408:	fd cf       	rjmp	.-6      	; 0xa404 <rcvr_datablock+0x2c>
    a40a:	9e b5       	in	r25, 0x2e	; 46
    a40c:	98 83       	st	Y, r25
		rcvr_spi_m(buff++);
    a40e:	8e bd       	out	0x2e, r24	; 46
    a410:	0d b4       	in	r0, 0x2d	; 45
    a412:	07 fe       	sbrs	r0, 7
    a414:	fd cf       	rjmp	.-6      	; 0xa410 <rcvr_datablock+0x38>
    a416:	9e b5       	in	r25, 0x2e	; 46
    a418:	99 83       	std	Y+1, r25	; 0x01
		rcvr_spi_m(buff++);
    a41a:	8e bd       	out	0x2e, r24	; 46
    a41c:	0d b4       	in	r0, 0x2d	; 45
    a41e:	07 fe       	sbrs	r0, 7
    a420:	fd cf       	rjmp	.-6      	; 0xa41c <rcvr_datablock+0x44>
    a422:	9e b5       	in	r25, 0x2e	; 46
    a424:	9a 83       	std	Y+2, r25	; 0x02
		rcvr_spi_m(buff++);
    a426:	8e bd       	out	0x2e, r24	; 46
    a428:	0d b4       	in	r0, 0x2d	; 45
    a42a:	07 fe       	sbrs	r0, 7
    a42c:	fd cf       	rjmp	.-6      	; 0xa428 <rcvr_datablock+0x50>
    a42e:	9e b5       	in	r25, 0x2e	; 46
    a430:	9b 83       	std	Y+3, r25	; 0x03
	} while (btr -= 4);
    a432:	04 50       	subi	r16, 0x04	; 4
    a434:	10 40       	sbci	r17, 0x00	; 0
    a436:	11 f0       	breq	.+4      	; 0xa43c <rcvr_datablock+0x64>
/*-----------------------------------------------------------------------*/
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static
int rcvr_datablock (
    a438:	24 96       	adiw	r28, 0x04	; 4
    a43a:	e3 cf       	rjmp	.-58     	; 0xa402 <rcvr_datablock+0x2a>
		rcvr_spi_m(buff++);
		rcvr_spi_m(buff++);
		rcvr_spi_m(buff++);
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
    a43c:	0e 94 b3 51 	call	0xa366	; 0xa366 <rcvr_spi>
	rcvr_spi();
    a440:	0e 94 b3 51 	call	0xa366	; 0xa366 <rcvr_spi>

	return 1;						/* Return with success */
    a444:	21 e0       	ldi	r18, 0x01	; 1
    a446:	30 e0       	ldi	r19, 0x00	; 0
    a448:	02 c0       	rjmp	.+4      	; 0xa44e <rcvr_datablock+0x76>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
    a44a:	20 e0       	ldi	r18, 0x00	; 0
    a44c:	30 e0       	ldi	r19, 0x00	; 0
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return 1;						/* Return with success */
}
    a44e:	c9 01       	movw	r24, r18
    a450:	df 91       	pop	r29
    a452:	cf 91       	pop	r28
    a454:	1f 91       	pop	r17
    a456:	0f 91       	pop	r16
    a458:	08 95       	ret

0000a45a <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    a45a:	a1 e0       	ldi	r26, 0x01	; 1
    a45c:	b0 e0       	ldi	r27, 0x00	; 0
    a45e:	e3 e3       	ldi	r30, 0x33	; 51
    a460:	f2 e5       	ldi	r31, 0x52	; 82
    a462:	0c 94 e0 5c 	jmp	0xb9c0	; 0xb9c0 <__prologue_saves__+0x1c>
    a466:	8c 01       	movw	r16, r24
	BYTE resp, wc;


	if (!wait_ready()) return 0;
    a468:	69 83       	std	Y+1, r22	; 0x01
    a46a:	0e 94 ba 51 	call	0xa374	; 0xa374 <wait_ready>
    a46e:	69 81       	ldd	r22, Y+1	; 0x01
    a470:	00 97       	sbiw	r24, 0x00	; 0
    a472:	49 f1       	breq	.+82     	; 0xa4c6 <xmit_datablock+0x6c>

	xmit_spi(token);					/* Xmit data token */
    a474:	6e bd       	out	0x2e, r22	; 46
    a476:	0d b4       	in	r0, 0x2d	; 45
    a478:	07 fe       	sbrs	r0, 7
    a47a:	fd cf       	rjmp	.-6      	; 0xa476 <xmit_datablock+0x1c>
	if (token != 0xFD) {	/* Is data token */
    a47c:	6d 3f       	cpi	r22, 0xFD	; 253
    a47e:	31 f1       	breq	.+76     	; 0xa4cc <xmit_datablock+0x72>
    a480:	80 e0       	ldi	r24, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
    a482:	f8 01       	movw	r30, r16
    a484:	90 81       	ld	r25, Z
    a486:	9e bd       	out	0x2e, r25	; 46
    a488:	0d b4       	in	r0, 0x2d	; 45
    a48a:	07 fe       	sbrs	r0, 7
    a48c:	fd cf       	rjmp	.-6      	; 0xa488 <xmit_datablock+0x2e>
			xmit_spi(*buff++);
    a48e:	f8 01       	movw	r30, r16
    a490:	91 81       	ldd	r25, Z+1	; 0x01
    a492:	9e bd       	out	0x2e, r25	; 46
    a494:	0d b4       	in	r0, 0x2d	; 45
    a496:	07 fe       	sbrs	r0, 7
    a498:	fd cf       	rjmp	.-6      	; 0xa494 <xmit_datablock+0x3a>
		} while (--wc);
    a49a:	81 50       	subi	r24, 0x01	; 1
    a49c:	19 f0       	breq	.+6      	; 0xa4a4 <xmit_datablock+0x4a>
/*-----------------------------------------------------------------------*/
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (
    a49e:	0e 5f       	subi	r16, 0xFE	; 254
    a4a0:	1f 4f       	sbci	r17, 0xFF	; 255
    a4a2:	ef cf       	rjmp	.-34     	; 0xa482 <xmit_datablock+0x28>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
    a4a4:	8f ef       	ldi	r24, 0xFF	; 255
    a4a6:	8e bd       	out	0x2e, r24	; 46
    a4a8:	0d b4       	in	r0, 0x2d	; 45
    a4aa:	07 fe       	sbrs	r0, 7
    a4ac:	fd cf       	rjmp	.-6      	; 0xa4a8 <xmit_datablock+0x4e>
		xmit_spi(0xFF);
    a4ae:	8f ef       	ldi	r24, 0xFF	; 255
    a4b0:	8e bd       	out	0x2e, r24	; 46
    a4b2:	0d b4       	in	r0, 0x2d	; 45
    a4b4:	07 fe       	sbrs	r0, 7
    a4b6:	fd cf       	rjmp	.-6      	; 0xa4b2 <xmit_datablock+0x58>
		resp = rcvr_spi();				/* Reveive data response */
    a4b8:	0e 94 b3 51 	call	0xa366	; 0xa366 <rcvr_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    a4bc:	8f 71       	andi	r24, 0x1F	; 31
/*-----------------------------------------------------------------------*/
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (
    a4be:	21 e0       	ldi	r18, 0x01	; 1
    a4c0:	30 e0       	ldi	r19, 0x00	; 0
    a4c2:	85 30       	cpi	r24, 0x05	; 5
    a4c4:	29 f0       	breq	.+10     	; 0xa4d0 <xmit_datablock+0x76>
)
{
	BYTE resp, wc;


	if (!wait_ready()) return 0;
    a4c6:	20 e0       	ldi	r18, 0x00	; 0
    a4c8:	30 e0       	ldi	r19, 0x00	; 0
    a4ca:	02 c0       	rjmp	.+4      	; 0xa4d0 <xmit_datablock+0x76>
		resp = rcvr_spi();				/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    a4cc:	21 e0       	ldi	r18, 0x01	; 1
    a4ce:	30 e0       	ldi	r19, 0x00	; 0
}
    a4d0:	c9 01       	movw	r24, r18
    a4d2:	21 96       	adiw	r28, 0x01	; 1
    a4d4:	e4 e0       	ldi	r30, 0x04	; 4
    a4d6:	0c 94 fc 5c 	jmp	0xb9f8	; 0xb9f8 <__epilogue_restores__+0x1c>

0000a4da <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    a4da:	a1 e0       	ldi	r26, 0x01	; 1
    a4dc:	b0 e0       	ldi	r27, 0x00	; 0
    a4de:	e3 e7       	ldi	r30, 0x73	; 115
    a4e0:	f2 e5       	ldi	r31, 0x52	; 82
    a4e2:	0c 94 de 5c 	jmp	0xb9bc	; 0xb9bc <__prologue_saves__+0x18>
    a4e6:	28 2f       	mov	r18, r24
    a4e8:	7a 01       	movw	r14, r20
    a4ea:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    a4ec:	87 ff       	sbrs	r24, 7
    a4ee:	0d c0       	rjmp	.+26     	; 0xa50a <send_cmd+0x30>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    a4f0:	87 e3       	ldi	r24, 0x37	; 55
    a4f2:	40 e0       	ldi	r20, 0x00	; 0
    a4f4:	50 e0       	ldi	r21, 0x00	; 0
    a4f6:	60 e0       	ldi	r22, 0x00	; 0
    a4f8:	70 e0       	ldi	r23, 0x00	; 0
    a4fa:	29 83       	std	Y+1, r18	; 0x01
    a4fc:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
		if (res > 1) return res;
    a500:	29 81       	ldd	r18, Y+1	; 0x01
    a502:	82 30       	cpi	r24, 0x02	; 2
    a504:	08 f0       	brcs	.+2      	; 0xa508 <send_cmd+0x2e>
    a506:	44 c0       	rjmp	.+136    	; 0xa590 <send_cmd+0xb6>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    a508:	2f 77       	andi	r18, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
    a50a:	29 83       	std	Y+1, r18	; 0x01
    a50c:	0e 94 ce 51 	call	0xa39c	; 0xa39c <deselect>
	if (!select()) return 0xFF;
    a510:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <select>
    a514:	29 81       	ldd	r18, Y+1	; 0x01
    a516:	00 97       	sbiw	r24, 0x00	; 0
    a518:	d1 f1       	breq	.+116    	; 0xa58e <send_cmd+0xb4>

	/* Send command packet */
	xmit_spi(0x40 | cmd);				/* Start + Command index */
    a51a:	82 2f       	mov	r24, r18
    a51c:	80 64       	ori	r24, 0x40	; 64
    a51e:	8e bd       	out	0x2e, r24	; 46
    a520:	0d b4       	in	r0, 0x2d	; 45
    a522:	07 fe       	sbrs	r0, 7
    a524:	fd cf       	rjmp	.-6      	; 0xa520 <send_cmd+0x46>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    a526:	81 2f       	mov	r24, r17
    a528:	99 27       	eor	r25, r25
    a52a:	aa 27       	eor	r26, r26
    a52c:	bb 27       	eor	r27, r27
    a52e:	8e bd       	out	0x2e, r24	; 46
    a530:	0d b4       	in	r0, 0x2d	; 45
    a532:	07 fe       	sbrs	r0, 7
    a534:	fd cf       	rjmp	.-6      	; 0xa530 <send_cmd+0x56>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    a536:	c8 01       	movw	r24, r16
    a538:	aa 27       	eor	r26, r26
    a53a:	bb 27       	eor	r27, r27
    a53c:	8e bd       	out	0x2e, r24	; 46
    a53e:	0d b4       	in	r0, 0x2d	; 45
    a540:	07 fe       	sbrs	r0, 7
    a542:	fd cf       	rjmp	.-6      	; 0xa53e <send_cmd+0x64>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    a544:	bb 27       	eor	r27, r27
    a546:	a1 2f       	mov	r26, r17
    a548:	90 2f       	mov	r25, r16
    a54a:	8f 2d       	mov	r24, r15
    a54c:	8e bd       	out	0x2e, r24	; 46
    a54e:	0d b4       	in	r0, 0x2d	; 45
    a550:	07 fe       	sbrs	r0, 7
    a552:	fd cf       	rjmp	.-6      	; 0xa54e <send_cmd+0x74>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    a554:	ee bc       	out	0x2e, r14	; 46
    a556:	0d b4       	in	r0, 0x2d	; 45
    a558:	07 fe       	sbrs	r0, 7
    a55a:	fd cf       	rjmp	.-6      	; 0xa556 <send_cmd+0x7c>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    a55c:	22 23       	and	r18, r18
    a55e:	21 f0       	breq	.+8      	; 0xa568 <send_cmd+0x8e>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    a560:	28 30       	cpi	r18, 0x08	; 8
    a562:	21 f0       	breq	.+8      	; 0xa56c <send_cmd+0x92>
	xmit_spi(0x40 | cmd);				/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    a564:	81 e0       	ldi	r24, 0x01	; 1
    a566:	03 c0       	rjmp	.+6      	; 0xa56e <send_cmd+0x94>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    a568:	85 e9       	ldi	r24, 0x95	; 149
    a56a:	01 c0       	rjmp	.+2      	; 0xa56e <send_cmd+0x94>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    a56c:	87 e8       	ldi	r24, 0x87	; 135
	xmit_spi(n);
    a56e:	8e bd       	out	0x2e, r24	; 46
    a570:	0d b4       	in	r0, 0x2d	; 45
    a572:	07 fe       	sbrs	r0, 7
    a574:	fd cf       	rjmp	.-6      	; 0xa570 <send_cmd+0x96>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
    a576:	2c 30       	cpi	r18, 0x0C	; 12
    a578:	11 f4       	brne	.+4      	; 0xa57e <send_cmd+0xa4>
    a57a:	0e 94 b3 51 	call	0xa366	; 0xa366 <rcvr_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    a57e:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
    a580:	0e 94 b3 51 	call	0xa366	; 0xa366 <rcvr_spi>
	while ((res & 0x80) && --n);
    a584:	87 ff       	sbrs	r24, 7
    a586:	04 c0       	rjmp	.+8      	; 0xa590 <send_cmd+0xb6>
    a588:	11 50       	subi	r17, 0x01	; 1
    a58a:	d1 f7       	brne	.-12     	; 0xa580 <send_cmd+0xa6>
    a58c:	01 c0       	rjmp	.+2      	; 0xa590 <send_cmd+0xb6>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
    a58e:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    a590:	21 96       	adiw	r28, 0x01	; 1
    a592:	e6 e0       	ldi	r30, 0x06	; 6
    a594:	0c 94 fa 5c 	jmp	0xb9f4	; 0xb9f4 <__epilogue_restores__+0x18>

0000a598 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    a598:	a4 e0       	ldi	r26, 0x04	; 4
    a59a:	b0 e0       	ldi	r27, 0x00	; 0
    a59c:	e2 ed       	ldi	r30, 0xD2	; 210
    a59e:	f2 e5       	ldi	r31, 0x52	; 82
    a5a0:	0c 94 dc 5c 	jmp	0xb9b8	; 0xb9b8 <__prologue_saves__+0x14>
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    a5a4:	88 23       	and	r24, r24
    a5a6:	09 f0       	breq	.+2      	; 0xa5aa <disk_initialize+0x12>
    a5a8:	a9 c0       	rjmp	.+338    	; 0xa6fc <disk_initialize+0x164>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    a5aa:	80 91 81 01 	lds	r24, 0x0181
    a5ae:	81 fd       	sbrc	r24, 1
    a5b0:	a2 c0       	rjmp	.+324    	; 0xa6f6 <disk_initialize+0x15e>

static
void power_on (void)
{
#if (defined SD_PWR_PIN | defined SD_PWR_PORT)
   DDRC|=(1<<SD_PWR_PIN);          // Turns on PWR pin as output
    a5b2:	38 9a       	sbi	0x07, 0	; 7
   SD_PWR_PORT|=(1<<SD_PWR_PIN);   // Drives PWR pin high
    a5b4:	40 9a       	sbi	0x08, 0	; 8
#endif

   DDRC|=(1<<SD_CS_PIN);          // Turns on CS pin as output
    a5b6:	39 9a       	sbi	0x07, 1	; 7
   DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)| (1<<DD_SS);
    a5b8:	80 eb       	ldi	r24, 0xB0	; 176
    a5ba:	84 b9       	out	0x04, r24	; 4
   SPCR = (1<<SPE)|(1<<MSTR); /* Initialize SPI port (Mode 0) */
    a5bc:	80 e5       	ldi	r24, 0x50	; 80
    a5be:	8c bd       	out	0x2c, r24	; 44

	if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on */
	FCLK_SLOW();
    a5c0:	82 e5       	ldi	r24, 0x52	; 82
    a5c2:	8c bd       	out	0x2c, r24	; 44
    a5c4:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
    a5c6:	0e 94 b3 51 	call	0xa366	; 0xa366 <rcvr_spi>
    a5ca:	11 50       	subi	r17, 0x01	; 1
    a5cc:	e1 f7       	brne	.-8      	; 0xa5c6 <disk_initialize+0x2e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    a5ce:	80 e0       	ldi	r24, 0x00	; 0
    a5d0:	40 e0       	ldi	r20, 0x00	; 0
    a5d2:	50 e0       	ldi	r21, 0x00	; 0
    a5d4:	60 e0       	ldi	r22, 0x00	; 0
    a5d6:	70 e0       	ldi	r23, 0x00	; 0
    a5d8:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
    a5dc:	81 30       	cpi	r24, 0x01	; 1
    a5de:	09 f0       	breq	.+2      	; 0xa5e2 <disk_initialize+0x4a>
    a5e0:	79 c0       	rjmp	.+242    	; 0xa6d4 <disk_initialize+0x13c>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    a5e2:	84 e6       	ldi	r24, 0x64	; 100
    a5e4:	80 93 93 02 	sts	0x0293, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    a5e8:	88 e0       	ldi	r24, 0x08	; 8
    a5ea:	4a ea       	ldi	r20, 0xAA	; 170
    a5ec:	51 e0       	ldi	r21, 0x01	; 1
    a5ee:	60 e0       	ldi	r22, 0x00	; 0
    a5f0:	70 e0       	ldi	r23, 0x00	; 0
    a5f2:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
    a5f6:	81 30       	cpi	r24, 0x01	; 1
    a5f8:	09 f0       	breq	.+2      	; 0xa5fc <disk_initialize+0x64>
    a5fa:	41 c0       	rjmp	.+130    	; 0xa67e <disk_initialize+0xe6>
    a5fc:	8e 01       	movw	r16, r28
    a5fe:	0f 5f       	subi	r16, 0xFF	; 255
    a600:	1f 4f       	sbci	r17, 0xFF	; 255

/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
    a602:	45 e0       	ldi	r20, 0x05	; 5
    a604:	e4 2e       	mov	r14, r20
    a606:	f1 2c       	mov	r15, r1
    a608:	ec 0e       	add	r14, r28
    a60a:	fd 1e       	adc	r15, r29
    a60c:	68 01       	movw	r12, r16

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    a60e:	0e 94 b3 51 	call	0xa366	; 0xa366 <rcvr_spi>
    a612:	f6 01       	movw	r30, r12
    a614:	81 93       	st	Z+, r24
    a616:	6f 01       	movw	r12, r30
    a618:	ee 15       	cp	r30, r14
    a61a:	ff 05       	cpc	r31, r15
    a61c:	c1 f7       	brne	.-16     	; 0xa60e <disk_initialize+0x76>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    a61e:	8b 81       	ldd	r24, Y+3	; 0x03
    a620:	81 30       	cpi	r24, 0x01	; 1
    a622:	09 f0       	breq	.+2      	; 0xa626 <disk_initialize+0x8e>
    a624:	57 c0       	rjmp	.+174    	; 0xa6d4 <disk_initialize+0x13c>
    a626:	8c 81       	ldd	r24, Y+4	; 0x04
    a628:	8a 3a       	cpi	r24, 0xAA	; 170
    a62a:	09 f0       	breq	.+2      	; 0xa62e <disk_initialize+0x96>
    a62c:	53 c0       	rjmp	.+166    	; 0xa6d4 <disk_initialize+0x13c>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    a62e:	80 91 93 02 	lds	r24, 0x0293
    a632:	88 23       	and	r24, r24
    a634:	49 f0       	breq	.+18     	; 0xa648 <disk_initialize+0xb0>
    a636:	89 ea       	ldi	r24, 0xA9	; 169
    a638:	40 e0       	ldi	r20, 0x00	; 0
    a63a:	50 e0       	ldi	r21, 0x00	; 0
    a63c:	60 e0       	ldi	r22, 0x00	; 0
    a63e:	70 e4       	ldi	r23, 0x40	; 64
    a640:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
    a644:	88 23       	and	r24, r24
    a646:	99 f7       	brne	.-26     	; 0xa62e <disk_initialize+0x96>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    a648:	80 91 93 02 	lds	r24, 0x0293
    a64c:	88 23       	and	r24, r24
    a64e:	09 f4       	brne	.+2      	; 0xa652 <disk_initialize+0xba>
    a650:	41 c0       	rjmp	.+130    	; 0xa6d4 <disk_initialize+0x13c>
    a652:	8a e3       	ldi	r24, 0x3A	; 58
    a654:	40 e0       	ldi	r20, 0x00	; 0
    a656:	50 e0       	ldi	r21, 0x00	; 0
    a658:	60 e0       	ldi	r22, 0x00	; 0
    a65a:	70 e0       	ldi	r23, 0x00	; 0
    a65c:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
    a660:	88 23       	and	r24, r24
    a662:	c1 f5       	brne	.+112    	; 0xa6d4 <disk_initialize+0x13c>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    a664:	0e 94 b3 51 	call	0xa366	; 0xa366 <rcvr_spi>
    a668:	f8 01       	movw	r30, r16
    a66a:	81 93       	st	Z+, r24
    a66c:	8f 01       	movw	r16, r30
    a66e:	ee 15       	cp	r30, r14
    a670:	ff 05       	cpc	r31, r15
    a672:	c1 f7       	brne	.-16     	; 0xa664 <disk_initialize+0xcc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    a674:	89 81       	ldd	r24, Y+1	; 0x01
    a676:	86 ff       	sbrs	r24, 6
    a678:	2b c0       	rjmp	.+86     	; 0xa6d0 <disk_initialize+0x138>
    a67a:	0c e0       	ldi	r16, 0x0C	; 12
    a67c:	2c c0       	rjmp	.+88     	; 0xa6d6 <disk_initialize+0x13e>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    a67e:	89 ea       	ldi	r24, 0xA9	; 169
    a680:	40 e0       	ldi	r20, 0x00	; 0
    a682:	50 e0       	ldi	r21, 0x00	; 0
    a684:	60 e0       	ldi	r22, 0x00	; 0
    a686:	70 e0       	ldi	r23, 0x00	; 0
    a688:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
    a68c:	82 30       	cpi	r24, 0x02	; 2
    a68e:	18 f4       	brcc	.+6      	; 0xa696 <disk_initialize+0xfe>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    a690:	02 e0       	ldi	r16, 0x02	; 2
    a692:	19 ea       	ldi	r17, 0xA9	; 169
    a694:	02 c0       	rjmp	.+4      	; 0xa69a <disk_initialize+0x102>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    a696:	01 e0       	ldi	r16, 0x01	; 1
    a698:	11 e0       	ldi	r17, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    a69a:	80 91 93 02 	lds	r24, 0x0293
    a69e:	88 23       	and	r24, r24
    a6a0:	49 f0       	breq	.+18     	; 0xa6b4 <disk_initialize+0x11c>
    a6a2:	81 2f       	mov	r24, r17
    a6a4:	40 e0       	ldi	r20, 0x00	; 0
    a6a6:	50 e0       	ldi	r21, 0x00	; 0
    a6a8:	60 e0       	ldi	r22, 0x00	; 0
    a6aa:	70 e0       	ldi	r23, 0x00	; 0
    a6ac:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
    a6b0:	88 23       	and	r24, r24
    a6b2:	99 f7       	brne	.-26     	; 0xa69a <disk_initialize+0x102>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    a6b4:	80 91 93 02 	lds	r24, 0x0293
    a6b8:	88 23       	and	r24, r24
    a6ba:	61 f0       	breq	.+24     	; 0xa6d4 <disk_initialize+0x13c>
    a6bc:	80 e1       	ldi	r24, 0x10	; 16
    a6be:	40 e0       	ldi	r20, 0x00	; 0
    a6c0:	52 e0       	ldi	r21, 0x02	; 2
    a6c2:	60 e0       	ldi	r22, 0x00	; 0
    a6c4:	70 e0       	ldi	r23, 0x00	; 0
    a6c6:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
    a6ca:	88 23       	and	r24, r24
    a6cc:	19 f4       	brne	.+6      	; 0xa6d4 <disk_initialize+0x13c>
    a6ce:	03 c0       	rjmp	.+6      	; 0xa6d6 <disk_initialize+0x13e>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    a6d0:	04 e0       	ldi	r16, 0x04	; 4
    a6d2:	01 c0       	rjmp	.+2      	; 0xa6d6 <disk_initialize+0x13e>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    a6d4:	00 e0       	ldi	r16, 0x00	; 0
		}
	}
	CardType = ty;
    a6d6:	00 93 95 02 	sts	0x0295, r16
	deselect();
    a6da:	0e 94 ce 51 	call	0xa39c	; 0xa39c <deselect>

	if (ty) {			/* Initialization succeded */
    a6de:	00 23       	and	r16, r16
    a6e0:	41 f0       	breq	.+16     	; 0xa6f2 <disk_initialize+0x15a>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    a6e2:	80 91 81 01 	lds	r24, 0x0181
    a6e6:	8e 7f       	andi	r24, 0xFE	; 254
    a6e8:	80 93 81 01 	sts	0x0181, r24
		FCLK_FAST();
    a6ec:	80 e5       	ldi	r24, 0x50	; 80
    a6ee:	8c bd       	out	0x2c, r24	; 44
    a6f0:	02 c0       	rjmp	.+4      	; 0xa6f6 <disk_initialize+0x15e>
	} else {			/* Initialization failed */
		power_off();
    a6f2:	0e 94 e0 51 	call	0xa3c0	; 0xa3c0 <power_off>
	}

	return Stat;
    a6f6:	80 91 81 01 	lds	r24, 0x0181
    a6fa:	01 c0       	rjmp	.+2      	; 0xa6fe <disk_initialize+0x166>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    a6fc:	81 e0       	ldi	r24, 0x01	; 1
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    a6fe:	24 96       	adiw	r28, 0x04	; 4
    a700:	e8 e0       	ldi	r30, 0x08	; 8
    a702:	0c 94 f8 5c 	jmp	0xb9f0	; 0xb9f0 <__epilogue_restores__+0x14>

0000a706 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    a706:	88 23       	and	r24, r24
    a708:	19 f4       	brne	.+6      	; 0xa710 <disk_status+0xa>
	return Stat;
    a70a:	80 91 81 01 	lds	r24, 0x0181
    a70e:	08 95       	ret

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    a710:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    a712:	08 95       	ret

0000a714 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    a714:	0f 93       	push	r16
    a716:	cf 93       	push	r28
    a718:	df 93       	push	r29
    a71a:	eb 01       	movw	r28, r22
    a71c:	ba 01       	movw	r22, r20
    a71e:	a9 01       	movw	r20, r18
	if (drv || !count) return RES_PARERR;
    a720:	88 23       	and	r24, r24
    a722:	09 f0       	breq	.+2      	; 0xa726 <disk_read+0x12>
    a724:	44 c0       	rjmp	.+136    	; 0xa7ae <disk_read+0x9a>
    a726:	00 23       	and	r16, r16
    a728:	09 f4       	brne	.+2      	; 0xa72c <disk_read+0x18>
    a72a:	41 c0       	rjmp	.+130    	; 0xa7ae <disk_read+0x9a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    a72c:	80 91 81 01 	lds	r24, 0x0181
    a730:	80 fd       	sbrc	r24, 0
    a732:	40 c0       	rjmp	.+128    	; 0xa7b4 <disk_read+0xa0>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    a734:	80 91 95 02 	lds	r24, 0x0295
    a738:	83 fd       	sbrc	r24, 3
    a73a:	07 c0       	rjmp	.+14     	; 0xa74a <disk_read+0x36>
    a73c:	e9 e0       	ldi	r30, 0x09	; 9
    a73e:	44 0f       	add	r20, r20
    a740:	55 1f       	adc	r21, r21
    a742:	66 1f       	adc	r22, r22
    a744:	77 1f       	adc	r23, r23
    a746:	ea 95       	dec	r30
    a748:	d1 f7       	brne	.-12     	; 0xa73e <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
    a74a:	01 30       	cpi	r16, 0x01	; 1
    a74c:	69 f4       	brne	.+26     	; 0xa768 <disk_read+0x54>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    a74e:	81 e1       	ldi	r24, 0x11	; 17
    a750:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
    a754:	88 23       	and	r24, r24
    a756:	11 f5       	brne	.+68     	; 0xa79c <disk_read+0x88>
			&& rcvr_datablock(buff, 512))
    a758:	ce 01       	movw	r24, r28
    a75a:	60 e0       	ldi	r22, 0x00	; 0
    a75c:	72 e0       	ldi	r23, 0x02	; 2
    a75e:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <rcvr_datablock>
    a762:	00 97       	sbiw	r24, 0x00	; 0
    a764:	d1 f4       	brne	.+52     	; 0xa79a <disk_read+0x86>
    a766:	1a c0       	rjmp	.+52     	; 0xa79c <disk_read+0x88>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    a768:	82 e1       	ldi	r24, 0x12	; 18
    a76a:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
    a76e:	88 23       	and	r24, r24
    a770:	a9 f4       	brne	.+42     	; 0xa79c <disk_read+0x88>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    a772:	ce 01       	movw	r24, r28
    a774:	60 e0       	ldi	r22, 0x00	; 0
    a776:	72 e0       	ldi	r23, 0x02	; 2
    a778:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <rcvr_datablock>
    a77c:	00 97       	sbiw	r24, 0x00	; 0
    a77e:	29 f0       	breq	.+10     	; 0xa78a <disk_read+0x76>
				buff += 512;
			} while (--count);
    a780:	01 50       	subi	r16, 0x01	; 1
    a782:	19 f0       	breq	.+6      	; 0xa78a <disk_read+0x76>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
    a784:	c0 50       	subi	r28, 0x00	; 0
    a786:	de 4f       	sbci	r29, 0xFE	; 254
    a788:	f4 cf       	rjmp	.-24     	; 0xa772 <disk_read+0x5e>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    a78a:	8c e0       	ldi	r24, 0x0C	; 12
    a78c:	40 e0       	ldi	r20, 0x00	; 0
    a78e:	50 e0       	ldi	r21, 0x00	; 0
    a790:	60 e0       	ldi	r22, 0x00	; 0
    a792:	70 e0       	ldi	r23, 0x00	; 0
    a794:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
    a798:	01 c0       	rjmp	.+2      	; 0xa79c <disk_read+0x88>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block read */
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
			&& rcvr_datablock(buff, 512))
			count = 0;
    a79a:	00 e0       	ldi	r16, 0x00	; 0
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
    a79c:	0e 94 ce 51 	call	0xa39c	; 0xa39c <deselect>

	return count ? RES_ERROR : RES_OK;
    a7a0:	21 e0       	ldi	r18, 0x01	; 1
    a7a2:	30 e0       	ldi	r19, 0x00	; 0
    a7a4:	00 23       	and	r16, r16
    a7a6:	41 f4       	brne	.+16     	; 0xa7b8 <disk_read+0xa4>
    a7a8:	20 e0       	ldi	r18, 0x00	; 0
    a7aa:	30 e0       	ldi	r19, 0x00	; 0
    a7ac:	05 c0       	rjmp	.+10     	; 0xa7b8 <disk_read+0xa4>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
    a7ae:	24 e0       	ldi	r18, 0x04	; 4
    a7b0:	30 e0       	ldi	r19, 0x00	; 0
    a7b2:	02 c0       	rjmp	.+4      	; 0xa7b8 <disk_read+0xa4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    a7b4:	23 e0       	ldi	r18, 0x03	; 3
    a7b6:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    a7b8:	c9 01       	movw	r24, r18
    a7ba:	df 91       	pop	r29
    a7bc:	cf 91       	pop	r28
    a7be:	0f 91       	pop	r16
    a7c0:	08 95       	ret

0000a7c2 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    a7c2:	cf 92       	push	r12
    a7c4:	df 92       	push	r13
    a7c6:	ef 92       	push	r14
    a7c8:	ff 92       	push	r15
    a7ca:	0f 93       	push	r16
    a7cc:	cf 93       	push	r28
    a7ce:	df 93       	push	r29
    a7d0:	eb 01       	movw	r28, r22
    a7d2:	69 01       	movw	r12, r18
    a7d4:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
    a7d6:	88 23       	and	r24, r24
    a7d8:	09 f0       	breq	.+2      	; 0xa7dc <disk_write+0x1a>
    a7da:	58 c0       	rjmp	.+176    	; 0xa88c <disk_write+0xca>
    a7dc:	00 23       	and	r16, r16
    a7de:	09 f4       	brne	.+2      	; 0xa7e2 <disk_write+0x20>
    a7e0:	55 c0       	rjmp	.+170    	; 0xa88c <disk_write+0xca>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    a7e2:	80 91 81 01 	lds	r24, 0x0181
    a7e6:	80 fd       	sbrc	r24, 0
    a7e8:	54 c0       	rjmp	.+168    	; 0xa892 <disk_write+0xd0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    a7ea:	80 91 81 01 	lds	r24, 0x0181
    a7ee:	82 fd       	sbrc	r24, 2
    a7f0:	53 c0       	rjmp	.+166    	; 0xa898 <disk_write+0xd6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    a7f2:	80 91 95 02 	lds	r24, 0x0295
    a7f6:	90 e0       	ldi	r25, 0x00	; 0
    a7f8:	83 fd       	sbrc	r24, 3
    a7fa:	07 c0       	rjmp	.+14     	; 0xa80a <disk_write+0x48>
    a7fc:	f9 e0       	ldi	r31, 0x09	; 9
    a7fe:	cc 0c       	add	r12, r12
    a800:	dd 1c       	adc	r13, r13
    a802:	ee 1c       	adc	r14, r14
    a804:	ff 1c       	adc	r15, r15
    a806:	fa 95       	dec	r31
    a808:	d1 f7       	brne	.-12     	; 0xa7fe <disk_write+0x3c>

	if (count == 1) {	/* Single block write */
    a80a:	01 30       	cpi	r16, 0x01	; 1
    a80c:	71 f4       	brne	.+28     	; 0xa82a <disk_write+0x68>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    a80e:	88 e1       	ldi	r24, 0x18	; 24
    a810:	b7 01       	movw	r22, r14
    a812:	a6 01       	movw	r20, r12
    a814:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
    a818:	88 23       	and	r24, r24
    a81a:	79 f5       	brne	.+94     	; 0xa87a <disk_write+0xb8>
			&& xmit_datablock(buff, 0xFE))
    a81c:	ce 01       	movw	r24, r28
    a81e:	6e ef       	ldi	r22, 0xFE	; 254
    a820:	0e 94 2d 52 	call	0xa45a	; 0xa45a <xmit_datablock>
    a824:	00 97       	sbiw	r24, 0x00	; 0
    a826:	31 f5       	brne	.+76     	; 0xa874 <disk_write+0xb2>
    a828:	28 c0       	rjmp	.+80     	; 0xa87a <disk_write+0xb8>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    a82a:	86 70       	andi	r24, 0x06	; 6
    a82c:	90 70       	andi	r25, 0x00	; 0
    a82e:	00 97       	sbiw	r24, 0x00	; 0
    a830:	39 f0       	breq	.+14     	; 0xa840 <disk_write+0x7e>
    a832:	40 2f       	mov	r20, r16
    a834:	50 e0       	ldi	r21, 0x00	; 0
    a836:	60 e0       	ldi	r22, 0x00	; 0
    a838:	70 e0       	ldi	r23, 0x00	; 0
    a83a:	87 e9       	ldi	r24, 0x97	; 151
    a83c:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    a840:	89 e1       	ldi	r24, 0x19	; 25
    a842:	b7 01       	movw	r22, r14
    a844:	a6 01       	movw	r20, r12
    a846:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
    a84a:	88 23       	and	r24, r24
    a84c:	b1 f4       	brne	.+44     	; 0xa87a <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    a84e:	ce 01       	movw	r24, r28
    a850:	6c ef       	ldi	r22, 0xFC	; 252
    a852:	0e 94 2d 52 	call	0xa45a	; 0xa45a <xmit_datablock>
    a856:	00 97       	sbiw	r24, 0x00	; 0
    a858:	29 f0       	breq	.+10     	; 0xa864 <disk_write+0xa2>
				buff += 512;
			} while (--count);
    a85a:	01 50       	subi	r16, 0x01	; 1
    a85c:	19 f0       	breq	.+6      	; 0xa864 <disk_write+0xa2>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
    a85e:	c0 50       	subi	r28, 0x00	; 0
    a860:	de 4f       	sbci	r29, 0xFE	; 254
    a862:	f5 cf       	rjmp	.-22     	; 0xa84e <disk_write+0x8c>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    a864:	80 e0       	ldi	r24, 0x00	; 0
    a866:	90 e0       	ldi	r25, 0x00	; 0
    a868:	6d ef       	ldi	r22, 0xFD	; 253
    a86a:	0e 94 2d 52 	call	0xa45a	; 0xa45a <xmit_datablock>
    a86e:	00 97       	sbiw	r24, 0x00	; 0
    a870:	19 f0       	breq	.+6      	; 0xa878 <disk_write+0xb6>
    a872:	03 c0       	rjmp	.+6      	; 0xa87a <disk_write+0xb8>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
    a874:	00 e0       	ldi	r16, 0x00	; 0
    a876:	01 c0       	rjmp	.+2      	; 0xa87a <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
    a878:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
    a87a:	0e 94 ce 51 	call	0xa39c	; 0xa39c <deselect>

	return count ? RES_ERROR : RES_OK;
    a87e:	21 e0       	ldi	r18, 0x01	; 1
    a880:	30 e0       	ldi	r19, 0x00	; 0
    a882:	00 23       	and	r16, r16
    a884:	59 f4       	brne	.+22     	; 0xa89c <disk_write+0xda>
    a886:	20 e0       	ldi	r18, 0x00	; 0
    a888:	30 e0       	ldi	r19, 0x00	; 0
    a88a:	08 c0       	rjmp	.+16     	; 0xa89c <disk_write+0xda>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
    a88c:	24 e0       	ldi	r18, 0x04	; 4
    a88e:	30 e0       	ldi	r19, 0x00	; 0
    a890:	05 c0       	rjmp	.+10     	; 0xa89c <disk_write+0xda>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    a892:	23 e0       	ldi	r18, 0x03	; 3
    a894:	30 e0       	ldi	r19, 0x00	; 0
    a896:	02 c0       	rjmp	.+4      	; 0xa89c <disk_write+0xda>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    a898:	22 e0       	ldi	r18, 0x02	; 2
    a89a:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    a89c:	c9 01       	movw	r24, r18
    a89e:	df 91       	pop	r29
    a8a0:	cf 91       	pop	r28
    a8a2:	0f 91       	pop	r16
    a8a4:	ff 90       	pop	r15
    a8a6:	ef 90       	pop	r14
    a8a8:	df 90       	pop	r13
    a8aa:	cf 90       	pop	r12
    a8ac:	08 95       	ret

0000a8ae <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    a8ae:	a0 e1       	ldi	r26, 0x10	; 16
    a8b0:	b0 e0       	ldi	r27, 0x00	; 0
    a8b2:	ed e5       	ldi	r30, 0x5D	; 93
    a8b4:	f4 e5       	ldi	r31, 0x54	; 84
    a8b6:	0c 94 de 5c 	jmp	0xb9bc	; 0xb9bc <__prologue_saves__+0x18>
    a8ba:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    a8bc:	88 23       	and	r24, r24
    a8be:	09 f0       	breq	.+2      	; 0xa8c2 <disk_ioctl+0x14>
    a8c0:	52 c1       	rjmp	.+676    	; 0xab66 <disk_ioctl+0x2b8>
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
    a8c2:	7a 01       	movw	r14, r20

	if (drv) return RES_PARERR;

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
    a8c4:	65 30       	cpi	r22, 0x05	; 5
    a8c6:	81 f4       	brne	.+32     	; 0xa8e8 <disk_ioctl+0x3a>
		switch (ptr[0]) {
    a8c8:	fa 01       	movw	r30, r20
    a8ca:	80 81       	ld	r24, Z
    a8cc:	88 23       	and	r24, r24
    a8ce:	21 f0       	breq	.+8      	; 0xa8d8 <disk_ioctl+0x2a>
    a8d0:	81 30       	cpi	r24, 0x01	; 1
    a8d2:	09 f0       	breq	.+2      	; 0xa8d6 <disk_ioctl+0x28>
    a8d4:	48 c1       	rjmp	.+656    	; 0xab66 <disk_ioctl+0x2b8>
    a8d6:	03 c0       	rjmp	.+6      	; 0xa8de <disk_ioctl+0x30>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
    a8d8:	0e 94 e0 51 	call	0xa3c0	; 0xa3c0 <power_off>
    a8dc:	02 c0       	rjmp	.+4      	; 0xa8e2 <disk_ioctl+0x34>
			res = RES_OK;
			break;
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
    a8de:	fa 01       	movw	r30, r20
    a8e0:	81 83       	std	Z+1, r24	; 0x01
			res = RES_OK;
    a8e2:	00 e0       	ldi	r16, 0x00	; 0
    a8e4:	10 e0       	ldi	r17, 0x00	; 0
			break;
    a8e6:	44 c1       	rjmp	.+648    	; 0xab70 <disk_ioctl+0x2c2>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    a8e8:	80 91 81 01 	lds	r24, 0x0181
    a8ec:	80 fd       	sbrc	r24, 0
    a8ee:	3e c1       	rjmp	.+636    	; 0xab6c <disk_ioctl+0x2be>

		switch (ctrl) {
    a8f0:	e6 2f       	mov	r30, r22
    a8f2:	f0 e0       	ldi	r31, 0x00	; 0
    a8f4:	ef 30       	cpi	r30, 0x0F	; 15
    a8f6:	f1 05       	cpc	r31, r1
    a8f8:	08 f0       	brcs	.+2      	; 0xa8fc <disk_ioctl+0x4e>
    a8fa:	2a c1       	rjmp	.+596    	; 0xab50 <disk_ioctl+0x2a2>
    a8fc:	e4 5b       	subi	r30, 0xB4	; 180
    a8fe:	ff 4f       	sbci	r31, 0xFF	; 255
    a900:	0c 94 09 5d 	jmp	0xba12	; 0xba12 <__tablejump2__>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
    a904:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <select>
    a908:	00 97       	sbiw	r24, 0x00	; 0
    a90a:	09 f4       	brne	.+2      	; 0xa90e <disk_ioctl+0x60>
    a90c:	24 c1       	rjmp	.+584    	; 0xab56 <disk_ioctl+0x2a8>
				deselect();
    a90e:	0e 94 ce 51 	call	0xa39c	; 0xa39c <deselect>
    a912:	24 c1       	rjmp	.+584    	; 0xab5c <disk_ioctl+0x2ae>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    a914:	89 e0       	ldi	r24, 0x09	; 9
    a916:	40 e0       	ldi	r20, 0x00	; 0
    a918:	50 e0       	ldi	r21, 0x00	; 0
    a91a:	60 e0       	ldi	r22, 0x00	; 0
    a91c:	70 e0       	ldi	r23, 0x00	; 0
    a91e:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
    a922:	88 23       	and	r24, r24
    a924:	09 f0       	breq	.+2      	; 0xa928 <disk_ioctl+0x7a>
    a926:	17 c1       	rjmp	.+558    	; 0xab56 <disk_ioctl+0x2a8>
    a928:	ce 01       	movw	r24, r28
    a92a:	01 96       	adiw	r24, 0x01	; 1
    a92c:	60 e1       	ldi	r22, 0x10	; 16
    a92e:	70 e0       	ldi	r23, 0x00	; 0
    a930:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <rcvr_datablock>
    a934:	00 97       	sbiw	r24, 0x00	; 0
    a936:	09 f4       	brne	.+2      	; 0xa93a <disk_ioctl+0x8c>
    a938:	0e c1       	rjmp	.+540    	; 0xab56 <disk_ioctl+0x2a8>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    a93a:	99 81       	ldd	r25, Y+1	; 0x01
    a93c:	92 95       	swap	r25
    a93e:	96 95       	lsr	r25
    a940:	96 95       	lsr	r25
    a942:	93 70       	andi	r25, 0x03	; 3
    a944:	5a 85       	ldd	r21, Y+10	; 0x0a
    a946:	49 85       	ldd	r20, Y+9	; 0x09
    a948:	91 30       	cpi	r25, 0x01	; 1
    a94a:	89 f4       	brne	.+34     	; 0xa96e <disk_ioctl+0xc0>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
    a94c:	85 2f       	mov	r24, r21
    a94e:	90 e0       	ldi	r25, 0x00	; 0
    a950:	01 96       	adiw	r24, 0x01	; 1
    a952:	34 2f       	mov	r19, r20
    a954:	20 e0       	ldi	r18, 0x00	; 0
    a956:	82 0f       	add	r24, r18
    a958:	93 1f       	adc	r25, r19
					*(DWORD*)buff = (DWORD)csize << 10;
    a95a:	a0 e0       	ldi	r26, 0x00	; 0
    a95c:	b0 e0       	ldi	r27, 0x00	; 0
    a95e:	7a e0       	ldi	r23, 0x0A	; 10
    a960:	88 0f       	add	r24, r24
    a962:	99 1f       	adc	r25, r25
    a964:	aa 1f       	adc	r26, r26
    a966:	bb 1f       	adc	r27, r27
    a968:	7a 95       	dec	r23
    a96a:	d1 f7       	brne	.-12     	; 0xa960 <disk_ioctl+0xb2>
    a96c:	b0 c0       	rjmp	.+352    	; 0xaace <disk_ioctl+0x220>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    a96e:	42 95       	swap	r20
    a970:	46 95       	lsr	r20
    a972:	46 95       	lsr	r20
    a974:	43 70       	andi	r20, 0x03	; 3
    a976:	88 85       	ldd	r24, Y+8	; 0x08
    a978:	90 e0       	ldi	r25, 0x00	; 0
    a97a:	88 0f       	add	r24, r24
    a97c:	99 1f       	adc	r25, r25
    a97e:	88 0f       	add	r24, r24
    a980:	99 1f       	adc	r25, r25
    a982:	84 0f       	add	r24, r20
    a984:	91 1d       	adc	r25, r1
    a986:	01 96       	adiw	r24, 0x01	; 1
    a988:	2f 81       	ldd	r18, Y+7	; 0x07
    a98a:	30 e0       	ldi	r19, 0x00	; 0
    a98c:	23 70       	andi	r18, 0x03	; 3
    a98e:	30 70       	andi	r19, 0x00	; 0
    a990:	32 2f       	mov	r19, r18
    a992:	22 27       	eor	r18, r18
    a994:	33 0f       	add	r19, r19
    a996:	33 0f       	add	r19, r19
    a998:	82 0f       	add	r24, r18
    a99a:	93 1f       	adc	r25, r19
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    a99c:	a0 e0       	ldi	r26, 0x00	; 0
    a99e:	b0 e0       	ldi	r27, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    a9a0:	2e 81       	ldd	r18, Y+6	; 0x06
    a9a2:	2f 70       	andi	r18, 0x0F	; 15
    a9a4:	4b 85       	ldd	r20, Y+11	; 0x0b
    a9a6:	44 1f       	adc	r20, r20
    a9a8:	44 27       	eor	r20, r20
    a9aa:	44 1f       	adc	r20, r20
    a9ac:	24 0f       	add	r18, r20
    a9ae:	2e 5f       	subi	r18, 0xFE	; 254
    a9b0:	35 2f       	mov	r19, r21
    a9b2:	33 70       	andi	r19, 0x03	; 3
    a9b4:	33 0f       	add	r19, r19
    a9b6:	23 0f       	add	r18, r19
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    a9b8:	30 e0       	ldi	r19, 0x00	; 0
    a9ba:	29 50       	subi	r18, 0x09	; 9
    a9bc:	30 40       	sbci	r19, 0x00	; 0
    a9be:	2c c0       	rjmp	.+88     	; 0xaa18 <disk_ioctl+0x16a>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    a9c0:	80 e0       	ldi	r24, 0x00	; 0
    a9c2:	92 e0       	ldi	r25, 0x02	; 2
    a9c4:	fa 01       	movw	r30, r20
    a9c6:	91 83       	std	Z+1, r25	; 0x01
    a9c8:	80 83       	st	Z, r24
    a9ca:	c8 c0       	rjmp	.+400    	; 0xab5c <disk_ioctl+0x2ae>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
    a9cc:	e0 90 95 02 	lds	r14, 0x0295
    a9d0:	e2 fe       	sbrs	r14, 2
    a9d2:	2a c0       	rjmp	.+84     	; 0xaa28 <disk_ioctl+0x17a>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    a9d4:	8d e8       	ldi	r24, 0x8D	; 141
    a9d6:	40 e0       	ldi	r20, 0x00	; 0
    a9d8:	50 e0       	ldi	r21, 0x00	; 0
    a9da:	60 e0       	ldi	r22, 0x00	; 0
    a9dc:	70 e0       	ldi	r23, 0x00	; 0
    a9de:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
    a9e2:	88 23       	and	r24, r24
    a9e4:	09 f0       	breq	.+2      	; 0xa9e8 <disk_ioctl+0x13a>
    a9e6:	b7 c0       	rjmp	.+366    	; 0xab56 <disk_ioctl+0x2a8>
					rcvr_spi();
    a9e8:	0e 94 b3 51 	call	0xa366	; 0xa366 <rcvr_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    a9ec:	ce 01       	movw	r24, r28
    a9ee:	01 96       	adiw	r24, 0x01	; 1
    a9f0:	60 e1       	ldi	r22, 0x10	; 16
    a9f2:	70 e0       	ldi	r23, 0x00	; 0
    a9f4:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <rcvr_datablock>
    a9f8:	00 97       	sbiw	r24, 0x00	; 0
    a9fa:	09 f4       	brne	.+2      	; 0xa9fe <disk_ioctl+0x150>
    a9fc:	ac c0       	rjmp	.+344    	; 0xab56 <disk_ioctl+0x2a8>
    a9fe:	30 e3       	ldi	r19, 0x30	; 48
    aa00:	e3 2e       	mov	r14, r19
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    aa02:	0e 94 b3 51 	call	0xa366	; 0xa366 <rcvr_spi>
    aa06:	ea 94       	dec	r14
    aa08:	e1 f7       	brne	.-8      	; 0xaa02 <disk_ioctl+0x154>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    aa0a:	2b 85       	ldd	r18, Y+11	; 0x0b
    aa0c:	22 95       	swap	r18
    aa0e:	2f 70       	andi	r18, 0x0F	; 15
    aa10:	80 e1       	ldi	r24, 0x10	; 16
    aa12:	90 e0       	ldi	r25, 0x00	; 0
    aa14:	a0 e0       	ldi	r26, 0x00	; 0
    aa16:	b0 e0       	ldi	r27, 0x00	; 0
    aa18:	04 c0       	rjmp	.+8      	; 0xaa22 <disk_ioctl+0x174>
    aa1a:	88 0f       	add	r24, r24
    aa1c:	99 1f       	adc	r25, r25
    aa1e:	aa 1f       	adc	r26, r26
    aa20:	bb 1f       	adc	r27, r27
    aa22:	2a 95       	dec	r18
    aa24:	d2 f7       	brpl	.-12     	; 0xaa1a <disk_ioctl+0x16c>
    aa26:	53 c0       	rjmp	.+166    	; 0xaace <disk_ioctl+0x220>
						res = RES_OK;
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    aa28:	89 e0       	ldi	r24, 0x09	; 9
    aa2a:	40 e0       	ldi	r20, 0x00	; 0
    aa2c:	50 e0       	ldi	r21, 0x00	; 0
    aa2e:	60 e0       	ldi	r22, 0x00	; 0
    aa30:	70 e0       	ldi	r23, 0x00	; 0
    aa32:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
    aa36:	88 23       	and	r24, r24
    aa38:	09 f0       	breq	.+2      	; 0xaa3c <disk_ioctl+0x18e>
    aa3a:	8d c0       	rjmp	.+282    	; 0xab56 <disk_ioctl+0x2a8>
    aa3c:	ce 01       	movw	r24, r28
    aa3e:	01 96       	adiw	r24, 0x01	; 1
    aa40:	60 e1       	ldi	r22, 0x10	; 16
    aa42:	70 e0       	ldi	r23, 0x00	; 0
    aa44:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <rcvr_datablock>
    aa48:	00 97       	sbiw	r24, 0x00	; 0
    aa4a:	09 f4       	brne	.+2      	; 0xaa4e <disk_ioctl+0x1a0>
    aa4c:	84 c0       	rjmp	.+264    	; 0xab56 <disk_ioctl+0x2a8>
    aa4e:	4b 85       	ldd	r20, Y+11	; 0x0b
    aa50:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDv1 */
    aa52:	e1 fe       	sbrs	r14, 1
    aa54:	1a c0       	rjmp	.+52     	; 0xaa8a <disk_ioctl+0x1dc>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    aa56:	88 1f       	adc	r24, r24
    aa58:	88 27       	eor	r24, r24
    aa5a:	88 1f       	adc	r24, r24
    aa5c:	90 e0       	ldi	r25, 0x00	; 0
    aa5e:	01 96       	adiw	r24, 0x01	; 1
    aa60:	50 e0       	ldi	r21, 0x00	; 0
    aa62:	4f 73       	andi	r20, 0x3F	; 63
    aa64:	50 70       	andi	r21, 0x00	; 0
    aa66:	44 0f       	add	r20, r20
    aa68:	55 1f       	adc	r21, r21
    aa6a:	84 0f       	add	r24, r20
    aa6c:	95 1f       	adc	r25, r21
    aa6e:	2e 85       	ldd	r18, Y+14	; 0x0e
    aa70:	22 95       	swap	r18
    aa72:	26 95       	lsr	r18
    aa74:	26 95       	lsr	r18
    aa76:	23 70       	andi	r18, 0x03	; 3
    aa78:	30 e0       	ldi	r19, 0x00	; 0
    aa7a:	21 50       	subi	r18, 0x01	; 1
    aa7c:	30 40       	sbci	r19, 0x00	; 0
    aa7e:	02 c0       	rjmp	.+4      	; 0xaa84 <disk_ioctl+0x1d6>
    aa80:	88 0f       	add	r24, r24
    aa82:	99 1f       	adc	r25, r25
    aa84:	2a 95       	dec	r18
    aa86:	e2 f7       	brpl	.-8      	; 0xaa80 <disk_ioctl+0x1d2>
    aa88:	20 c0       	rjmp	.+64     	; 0xaaca <disk_ioctl+0x21c>
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    aa8a:	28 2f       	mov	r18, r24
    aa8c:	30 e0       	ldi	r19, 0x00	; 0
    aa8e:	23 70       	andi	r18, 0x03	; 3
    aa90:	30 70       	andi	r19, 0x00	; 0
    aa92:	b3 e0       	ldi	r27, 0x03	; 3
    aa94:	22 0f       	add	r18, r18
    aa96:	33 1f       	adc	r19, r19
    aa98:	ba 95       	dec	r27
    aa9a:	e1 f7       	brne	.-8      	; 0xaa94 <disk_ioctl+0x1e6>
    aa9c:	82 95       	swap	r24
    aa9e:	86 95       	lsr	r24
    aaa0:	87 70       	andi	r24, 0x07	; 7
    aaa2:	28 0f       	add	r18, r24
    aaa4:	31 1d       	adc	r19, r1
    aaa6:	2f 5f       	subi	r18, 0xFF	; 255
    aaa8:	3f 4f       	sbci	r19, 0xFF	; 255
    aaaa:	50 e0       	ldi	r21, 0x00	; 0
    aaac:	4c 77       	andi	r20, 0x7C	; 124
    aaae:	50 70       	andi	r21, 0x00	; 0
    aab0:	55 95       	asr	r21
    aab2:	47 95       	ror	r20
    aab4:	55 95       	asr	r21
    aab6:	47 95       	ror	r20
    aab8:	4f 5f       	subi	r20, 0xFF	; 255
    aaba:	5f 4f       	sbci	r21, 0xFF	; 255
    aabc:	24 9f       	mul	r18, r20
    aabe:	c0 01       	movw	r24, r0
    aac0:	25 9f       	mul	r18, r21
    aac2:	90 0d       	add	r25, r0
    aac4:	34 9f       	mul	r19, r20
    aac6:	90 0d       	add	r25, r0
    aac8:	11 24       	eor	r1, r1
    aaca:	a0 e0       	ldi	r26, 0x00	; 0
    aacc:	b0 e0       	ldi	r27, 0x00	; 0
    aace:	f8 01       	movw	r30, r16
    aad0:	80 83       	st	Z, r24
    aad2:	91 83       	std	Z+1, r25	; 0x01
    aad4:	a2 83       	std	Z+2, r26	; 0x02
    aad6:	b3 83       	std	Z+3, r27	; 0x03
    aad8:	41 c0       	rjmp	.+130    	; 0xab5c <disk_ioctl+0x2ae>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    aada:	80 91 95 02 	lds	r24, 0x0295
    aade:	fa 01       	movw	r30, r20
    aae0:	80 83       	st	Z, r24
    aae2:	3c c0       	rjmp	.+120    	; 0xab5c <disk_ioctl+0x2ae>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    aae4:	89 e0       	ldi	r24, 0x09	; 9
    aae6:	01 c0       	rjmp	.+2      	; 0xaaea <disk_ioctl+0x23c>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    aae8:	8a e0       	ldi	r24, 0x0A	; 10
    aaea:	40 e0       	ldi	r20, 0x00	; 0
    aaec:	50 e0       	ldi	r21, 0x00	; 0
    aaee:	60 e0       	ldi	r22, 0x00	; 0
    aaf0:	70 e0       	ldi	r23, 0x00	; 0
    aaf2:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
    aaf6:	88 23       	and	r24, r24
    aaf8:	71 f5       	brne	.+92     	; 0xab56 <disk_ioctl+0x2a8>
				&& rcvr_datablock(ptr, 16))
    aafa:	c8 01       	movw	r24, r16
    aafc:	60 e1       	ldi	r22, 0x10	; 16
    aafe:	70 e0       	ldi	r23, 0x00	; 0
    ab00:	22 c0       	rjmp	.+68     	; 0xab46 <disk_ioctl+0x298>
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    ab02:	8a e3       	ldi	r24, 0x3A	; 58
    ab04:	40 e0       	ldi	r20, 0x00	; 0
    ab06:	50 e0       	ldi	r21, 0x00	; 0
    ab08:	60 e0       	ldi	r22, 0x00	; 0
    ab0a:	70 e0       	ldi	r23, 0x00	; 0
    ab0c:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
    ab10:	88 23       	and	r24, r24
    ab12:	09 f5       	brne	.+66     	; 0xab56 <disk_ioctl+0x2a8>

/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl (
    ab14:	0c 5f       	subi	r16, 0xFC	; 252
    ab16:	1f 4f       	sbci	r17, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    ab18:	0e 94 b3 51 	call	0xa366	; 0xa366 <rcvr_spi>
    ab1c:	f7 01       	movw	r30, r14
    ab1e:	81 93       	st	Z+, r24
    ab20:	7f 01       	movw	r14, r30
    ab22:	e0 17       	cp	r30, r16
    ab24:	f1 07       	cpc	r31, r17
    ab26:	c1 f7       	brne	.-16     	; 0xab18 <disk_ioctl+0x26a>
    ab28:	19 c0       	rjmp	.+50     	; 0xab5c <disk_ioctl+0x2ae>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    ab2a:	8d e8       	ldi	r24, 0x8D	; 141
    ab2c:	40 e0       	ldi	r20, 0x00	; 0
    ab2e:	50 e0       	ldi	r21, 0x00	; 0
    ab30:	60 e0       	ldi	r22, 0x00	; 0
    ab32:	70 e0       	ldi	r23, 0x00	; 0
    ab34:	0e 94 6d 52 	call	0xa4da	; 0xa4da <send_cmd>
    ab38:	88 23       	and	r24, r24
    ab3a:	69 f4       	brne	.+26     	; 0xab56 <disk_ioctl+0x2a8>
				rcvr_spi();
    ab3c:	0e 94 b3 51 	call	0xa366	; 0xa366 <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
    ab40:	c8 01       	movw	r24, r16
    ab42:	60 e4       	ldi	r22, 0x40	; 64
    ab44:	70 e0       	ldi	r23, 0x00	; 0
    ab46:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <rcvr_datablock>
    ab4a:	00 97       	sbiw	r24, 0x00	; 0
    ab4c:	39 f4       	brne	.+14     	; 0xab5c <disk_ioctl+0x2ae>
    ab4e:	03 c0       	rjmp	.+6      	; 0xab56 <disk_ioctl+0x2a8>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
    ab50:	04 e0       	ldi	r16, 0x04	; 4
    ab52:	10 e0       	ldi	r17, 0x00	; 0
    ab54:	05 c0       	rjmp	.+10     	; 0xab60 <disk_ioctl+0x2b2>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
    ab56:	01 e0       	ldi	r16, 0x01	; 1
    ab58:	10 e0       	ldi	r17, 0x00	; 0
    ab5a:	02 c0       	rjmp	.+4      	; 0xab60 <disk_ioctl+0x2b2>

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
					res = RES_OK;
    ab5c:	00 e0       	ldi	r16, 0x00	; 0
    ab5e:	10 e0       	ldi	r17, 0x00	; 0

		default:
			res = RES_PARERR;
		}

		deselect();
    ab60:	0e 94 ce 51 	call	0xa39c	; 0xa39c <deselect>
    ab64:	05 c0       	rjmp	.+10     	; 0xab70 <disk_ioctl+0x2c2>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
    ab66:	04 e0       	ldi	r16, 0x04	; 4
    ab68:	10 e0       	ldi	r17, 0x00	; 0
    ab6a:	02 c0       	rjmp	.+4      	; 0xab70 <disk_ioctl+0x2c2>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    ab6c:	03 e0       	ldi	r16, 0x03	; 3
    ab6e:	10 e0       	ldi	r17, 0x00	; 0

		deselect();
	}

	return res;
}
    ab70:	c8 01       	movw	r24, r16
    ab72:	60 96       	adiw	r28, 0x10	; 16
    ab74:	e6 e0       	ldi	r30, 0x06	; 6
    ab76:	0c 94 fa 5c 	jmp	0xb9f4	; 0xb9f4 <__epilogue_restores__+0x18>

0000ab7a <disk_timerproc>:

void disk_timerproc (void)
{
   BYTE n;

   n=Timer1;                  /* 100Hz decrement timer */
    ab7a:	80 91 93 02 	lds	r24, 0x0293
   if(n)
    ab7e:	88 23       	and	r24, r24
    ab80:	19 f0       	breq	.+6      	; 0xab88 <disk_timerproc+0xe>
      Timer1 = --n;
    ab82:	81 50       	subi	r24, 0x01	; 1
    ab84:	80 93 93 02 	sts	0x0293, r24
   n=Timer2;
    ab88:	80 91 94 02 	lds	r24, 0x0294
   if(n)
    ab8c:	88 23       	and	r24, r24
    ab8e:	19 f0       	breq	.+6      	; 0xab96 <disk_timerproc+0x1c>
      Timer2 = --n;
    ab90:	81 50       	subi	r24, 0x01	; 1
    ab92:	80 93 94 02 	sts	0x0294, r24
    ab96:	08 95       	ret

0000ab98 <rtc_gettime>:
#include <string.h>
#include <stdint.h>
#include "rtc.h"

int rtc_gettime (RTC *rtc)
{
    ab98:	fc 01       	movw	r30, r24
//   rtc->month = (buf[5] & 0x0F) + ((buf[5] >> 4) & 1) * 10;
//   rtc->year = 2000 + (buf[6] & 0x0F) + (buf[6] >> 4) * 10;


   //This code is just to provide some kind of a valid response.
   rtc->sec = 1;
    ab9a:	81 e0       	ldi	r24, 0x01	; 1
    ab9c:	87 83       	std	Z+7, r24	; 0x07
   rtc->min = 2;
    ab9e:	82 e0       	ldi	r24, 0x02	; 2
    aba0:	86 83       	std	Z+6, r24	; 0x06
   rtc->hour = 3;
    aba2:	83 e0       	ldi	r24, 0x03	; 3
    aba4:	85 83       	std	Z+5, r24	; 0x05
   rtc->mday = 4;
    aba6:	84 e0       	ldi	r24, 0x04	; 4
    aba8:	83 83       	std	Z+3, r24	; 0x03
   rtc->month = 5;
    abaa:	85 e0       	ldi	r24, 0x05	; 5
    abac:	82 83       	std	Z+2, r24	; 0x02
   rtc->year = 2006;
    abae:	86 ed       	ldi	r24, 0xD6	; 214
    abb0:	97 e0       	ldi	r25, 0x07	; 7
    abb2:	91 83       	std	Z+1, r25	; 0x01
    abb4:	80 83       	st	Z, r24


   return 1;
}
    abb6:	81 e0       	ldi	r24, 0x01	; 1
    abb8:	90 e0       	ldi	r25, 0x00	; 0
    abba:	08 95       	ret

0000abbc <rtc_settime>:
   buf[6] = (rtc->year - 2000) / 10 * 16 + (rtc->year - 2000) % 10;

/*This is where you would set the new time to the clock*/

   return 1;
}
    abbc:	81 e0       	ldi	r24, 0x01	; 1
    abbe:	90 e0       	ldi	r25, 0x00	; 0
    abc0:	08 95       	ret

0000abc2 <rtc_init>:
//      for (n = 8; n < 64; n += 8)
//         rtc_write(buf);
      return 0;
   }
   return 1;
} 
    abc2:	81 e0       	ldi	r24, 0x01	; 1
    abc4:	90 e0       	ldi	r25, 0x00	; 0
    abc6:	08 95       	ret

0000abc8 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
    abc8:	a0 e0       	ldi	r26, 0x00	; 0
    abca:	b0 e0       	ldi	r27, 0x00	; 0
    abcc:	ea ee       	ldi	r30, 0xEA	; 234
    abce:	f5 e5       	ldi	r31, 0x55	; 85
    abd0:	0c 94 dc 5c 	jmp	0xb9b8	; 0xb9b8 <__prologue_saves__+0x14>
    abd4:	9c 01       	movw	r18, r24
	const prog_uint16_t *p;
	WCHAR c, d;
	int i, n, li, hi;


	if (src <= 0x80) {	/* ASCII */
    abd6:	81 38       	cpi	r24, 0x81	; 129
    abd8:	91 05       	cpc	r25, r1
    abda:	08 f4       	brcc	.+2      	; 0xabde <ff_convert+0x16>
    abdc:	47 c0       	rjmp	.+142    	; 0xac6c <ff_convert+0xa4>
		c = src;
	} else {
		if (dir) {		/* OEMCP to unicode (Incremental search)*/
    abde:	61 15       	cp	r22, r1
    abe0:	71 05       	cpc	r23, r1
    abe2:	89 f0       	breq	.+34     	; 0xac06 <ff_convert+0x3e>
    abe4:	8e ee       	ldi	r24, 0xEE	; 238
    abe6:	96 e0       	ldi	r25, 0x06	; 6
			p = &uni2sjis[1];
			do {
				c = pgm_read_word(p);
    abe8:	fc 01       	movw	r30, r24
    abea:	45 91       	lpm	r20, Z+
    abec:	54 91       	lpm	r21, Z
				p += 2;
    abee:	04 96       	adiw	r24, 0x04	; 4
			} while (c && c != src);
    abf0:	41 15       	cp	r20, r1
    abf2:	51 05       	cpc	r21, r1
    abf4:	19 f0       	breq	.+6      	; 0xabfc <ff_convert+0x34>
    abf6:	42 17       	cp	r20, r18
    abf8:	53 07       	cpc	r21, r19
    abfa:	b1 f7       	brne	.-20     	; 0xabe8 <ff_convert+0x20>
			c = pgm_read_word(p - 3);
    abfc:	06 97       	sbiw	r24, 0x06	; 6
    abfe:	fc 01       	movw	r30, r24
    ac00:	25 91       	lpm	r18, Z+
    ac02:	34 91       	lpm	r19, Z
    ac04:	33 c0       	rjmp	.+102    	; 0xac6c <ff_convert+0xa4>


	if (src <= 0x80) {	/* ASCII */
		c = src;
	} else {
		if (dir) {		/* OEMCP to unicode (Incremental search)*/
    ac06:	6c e2       	ldi	r22, 0x2C	; 44
    ac08:	e6 2e       	mov	r14, r22
    ac0a:	6f e0       	ldi	r22, 0x0F	; 15
    ac0c:	f6 2e       	mov	r15, r22
    ac0e:	00 e0       	ldi	r16, 0x00	; 0
    ac10:	10 e0       	ldi	r17, 0x00	; 0
    ac12:	c0 e1       	ldi	r28, 0x10	; 16
    ac14:	d0 e0       	ldi	r29, 0x00	; 0
			} while (c && c != src);
			c = pgm_read_word(p - 3);
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
    ac16:	52 e0       	ldi	r21, 0x02	; 2
    ac18:	c5 2e       	mov	r12, r21
    ac1a:	d1 2c       	mov	r13, r1
    ac1c:	c7 01       	movw	r24, r14
    ac1e:	80 1b       	sub	r24, r16
    ac20:	91 0b       	sbc	r25, r17
    ac22:	b6 01       	movw	r22, r12
    ac24:	0e 94 82 5c 	call	0xb904	; 0xb904 <__divmodhi4>
    ac28:	60 0f       	add	r22, r16
    ac2a:	71 1f       	adc	r23, r17
				d = pgm_read_word(&uni2sjis[i * 2]);
    ac2c:	cb 01       	movw	r24, r22
    ac2e:	88 0f       	add	r24, r24
    ac30:	99 1f       	adc	r25, r25
    ac32:	88 0f       	add	r24, r24
    ac34:	99 1f       	adc	r25, r25
    ac36:	fc 01       	movw	r30, r24
    ac38:	e4 51       	subi	r30, 0x14	; 20
    ac3a:	f9 4f       	sbci	r31, 0xF9	; 249
    ac3c:	45 91       	lpm	r20, Z+
    ac3e:	54 91       	lpm	r21, Z
				if (src == d) break;
    ac40:	24 17       	cp	r18, r20
    ac42:	35 07       	cpc	r19, r21
    ac44:	49 f0       	breq	.+18     	; 0xac58 <ff_convert+0x90>
				if (src > d)
    ac46:	42 17       	cp	r20, r18
    ac48:	53 07       	cpc	r21, r19
    ac4a:	10 f0       	brcs	.+4      	; 0xac50 <ff_convert+0x88>
			} while (c && c != src);
			c = pgm_read_word(p - 3);
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
    ac4c:	7b 01       	movw	r14, r22
    ac4e:	01 c0       	rjmp	.+2      	; 0xac52 <ff_convert+0x8a>
    ac50:	8b 01       	movw	r16, r22
				p += 2;
			} while (c && c != src);
			c = pgm_read_word(p - 3);
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
    ac52:	21 97       	sbiw	r28, 0x01	; 1
    ac54:	19 f7       	brne	.-58     	; 0xac1c <ff_convert+0x54>
    ac56:	08 c0       	rjmp	.+16     	; 0xac68 <ff_convert+0xa0>
				if (src > d)
					li = i;
				else
					hi = i;
			}
			c = n ? pgm_read_word(&uni2sjis[i * 2 + 1]) : 0;
    ac58:	20 97       	sbiw	r28, 0x00	; 0
    ac5a:	31 f0       	breq	.+12     	; 0xac68 <ff_convert+0xa0>
    ac5c:	82 51       	subi	r24, 0x12	; 18
    ac5e:	99 4f       	sbci	r25, 0xF9	; 249
    ac60:	fc 01       	movw	r30, r24
    ac62:	25 91       	lpm	r18, Z+
    ac64:	34 91       	lpm	r19, Z
    ac66:	02 c0       	rjmp	.+4      	; 0xac6c <ff_convert+0xa4>
    ac68:	20 e0       	ldi	r18, 0x00	; 0
    ac6a:	30 e0       	ldi	r19, 0x00	; 0
		}
	}

	return c;
}
    ac6c:	c9 01       	movw	r24, r18
    ac6e:	cd b7       	in	r28, 0x3d	; 61
    ac70:	de b7       	in	r29, 0x3e	; 62
    ac72:	e8 e0       	ldi	r30, 0x08	; 8
    ac74:	0c 94 f8 5c 	jmp	0xb9f0	; 0xb9f0 <__epilogue_restores__+0x14>

0000ac78 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
    ac78:	ac 01       	movw	r20, r24
	int i;
	static const prog_uint16_t tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const prog_uint16_t tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };


	for (i = 0; pgm_read_word(&tbl_lower[i]) && chr != pgm_read_word(&tbl_lower[i]); i++) ;
    ac7a:	20 e0       	ldi	r18, 0x00	; 0
    ac7c:	30 e0       	ldi	r19, 0x00	; 0
    ac7e:	02 c0       	rjmp	.+4      	; 0xac84 <ff_wtoupper+0xc>
    ac80:	2f 5f       	subi	r18, 0xFF	; 255
    ac82:	3f 4f       	sbci	r19, 0xFF	; 255
    ac84:	f9 01       	movw	r30, r18
    ac86:	ee 0f       	add	r30, r30
    ac88:	ff 1f       	adc	r31, r31
    ac8a:	e4 50       	subi	r30, 0x04	; 4
    ac8c:	fa 4f       	sbci	r31, 0xFA	; 250
    ac8e:	85 91       	lpm	r24, Z+
    ac90:	94 91       	lpm	r25, Z
    ac92:	00 97       	sbiw	r24, 0x00	; 0
    ac94:	19 f0       	breq	.+6      	; 0xac9c <ff_wtoupper+0x24>
    ac96:	48 17       	cp	r20, r24
    ac98:	59 07       	cpc	r21, r25
    ac9a:	91 f7       	brne	.-28     	; 0xac80 <ff_wtoupper+0x8>

	return pgm_read_word(&tbl_lower[i]) ? pgm_read_word(&tbl_upper[i]) : chr;
    ac9c:	22 0f       	add	r18, r18
    ac9e:	33 1f       	adc	r19, r19
    aca0:	f9 01       	movw	r30, r18
    aca2:	e4 50       	subi	r30, 0x04	; 4
    aca4:	fa 4f       	sbci	r31, 0xFA	; 250
    aca6:	85 91       	lpm	r24, Z+
    aca8:	94 91       	lpm	r25, Z
    acaa:	00 97       	sbiw	r24, 0x00	; 0
    acac:	39 f0       	breq	.+14     	; 0xacbc <ff_wtoupper+0x44>
    acae:	24 5f       	subi	r18, 0xF4	; 244
    acb0:	3a 4f       	sbci	r19, 0xFA	; 250
    acb2:	f9 01       	movw	r30, r18
    acb4:	45 91       	lpm	r20, Z+
    acb6:	54 91       	lpm	r21, Z
    acb8:	ca 01       	movw	r24, r20
    acba:	08 95       	ret
    acbc:	ca 01       	movw	r24, r20
}
    acbe:	08 95       	ret

0000acc0 <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    acc0:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    acc2:	19 f4       	brne	.+6      	; 0xacca <xputc+0xa>
	ldi	r24, 13		;
    acc4:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    acc6:	01 d0       	rcall	.+2      	; 0xacca <xputc+0xa>
	ldi	r24, 10		;/
    acc8:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    acca:	ff 93       	push	r31
	push	ZL
    accc:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    acce:	e0 91 96 02 	lds	r30, 0x0296
	lds	ZH, xfunc_out+1	;/
    acd2:	f0 91 97 02 	lds	r31, 0x0297
	sbiw	ZL, 0
    acd6:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f
    acd8:	09 f0       	breq	.+2      	; 0xacdc <xputc+0x1c>
	icall
    acda:	09 95       	icall
2:	pop	ZL
    acdc:	ef 91       	pop	r30
	pop	ZH
    acde:	ff 91       	pop	r31
	ret
    ace0:	08 95       	ret

0000ace2 <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    ace2:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    ace4:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    ace6:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    ace8:	11 f0       	breq	.+4      	; 0xacee <xputs+0xc>
	rcall	xputc
    acea:	ea df       	rcall	.-44     	; 0xacc0 <xputc>
	rjmp	1b
    acec:	fb cf       	rjmp	.-10     	; 0xace4 <xputs+0x2>
2:	ret
    acee:	08 95       	ret

0000acf0 <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    acf0:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    acf2:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    acf4:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    acf6:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    acf8:	0c c0       	rjmp	.+24     	; 0xad12 <xitoa+0x22>
	neg	r20		;
    acfa:	41 95       	neg	r20
	sbrs	r25, 7		;
    acfc:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    acfe:	09 c0       	rjmp	.+18     	; 0xad12 <xitoa+0x22>
	ldi	r30, '-'	;
    ad00:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    ad02:	60 95       	com	r22
	com	r23		;
    ad04:	70 95       	com	r23
	com	r24		;
    ad06:	80 95       	com	r24
	com	r25		;
    ad08:	90 95       	com	r25
	adc	r22, r1		;
    ad0a:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    ad0c:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    ad0e:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    ad10:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    ad12:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    ad14:	02 c0       	rjmp	.+4      	; 0xad1a <xitoa+0x2a>
	neg	r18		;
    ad16:	21 95       	neg	r18
	ldi	r19, '0'	;/
    ad18:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    ad1a:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    ad1c:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    ad1e:	66 0f       	add	r22, r22
	rol	r23		;
    ad20:	77 1f       	adc	r23, r23
	rol	r24		;
    ad22:	88 1f       	adc	r24, r24
	rol	r25		;
    ad24:	99 1f       	adc	r25, r25
	rol	r26		;
    ad26:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    ad28:	a4 17       	cp	r26, r20
	brcs	3f		;
    ad2a:	10 f0       	brcs	.+4      	; 0xad30 <xitoa+0x40>
	sub	r26, r20	;
    ad2c:	a4 1b       	sub	r26, r20
	inc	r22		;
    ad2e:	63 95       	inc	r22
3:	dec	r21		;
    ad30:	5a 95       	dec	r21
	brne	2b		;/
    ad32:	a9 f7       	brne	.-22     	; 0xad1e <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    ad34:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    ad36:	08 f0       	brcs	.+2      	; 0xad3a <xitoa+0x4a>
	subi	r26, -7		;
    ad38:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    ad3a:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    ad3c:	af 93       	push	r26
	inc	r31		;/
    ad3e:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    ad40:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    ad42:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    ad44:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    ad46:	91 05       	cpc	r25, r1
	brne	1b		;/
    ad48:	41 f7       	brne	.-48     	; 0xad1a <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    ad4a:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    ad4c:	11 f4       	brne	.+4      	; 0xad52 <xitoa+0x62>
	push	r30		;
    ad4e:	ef 93       	push	r30
	inc	r31		;/
    ad50:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    ad52:	f2 17       	cp	r31, r18
	brcc	6f		;
    ad54:	18 f4       	brcc	.+6      	; 0xad5c <xitoa+0x6c>
	push	r19		;
    ad56:	3f 93       	push	r19
	inc	r31		;
    ad58:	f3 95       	inc	r31
	rjmp	5b		;/
    ad5a:	fb cf       	rjmp	.-10     	; 0xad52 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    ad5c:	8f 91       	pop	r24
	rcall	xputc		;
    ad5e:	b0 df       	rcall	.-160    	; 0xacc0 <xputc>
	dec	r31		;
    ad60:	fa 95       	dec	r31
	brne	6b		;/
    ad62:	e1 f7       	brne	.-8      	; 0xad5c <xitoa+0x6c>

	ret
    ad64:	08 95       	ret

0000ad66 <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    ad66:	df 93       	push	r29
	push	YL
    ad68:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    ad6a:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    ad6c:	de b7       	in	r29, 0x3e	; 62
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
#else
	adiw	YL, 5		;Y = pointer to arguments
    ad6e:	25 96       	adiw	r28, 0x05	; 5
#endif
	ld	ZL, Y+		;Z = pointer to format string
    ad70:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    ad72:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    ad74:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    ad76:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    ad78:	21 f0       	breq	.+8      	; 0xad82 <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    ad7a:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    ad7c:	29 f0       	breq	.+10     	; 0xad88 <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    ad7e:	a0 df       	rcall	.-192    	; 0xacc0 <xputc>
	rjmp	0b		;/
    ad80:	f9 cf       	rjmp	.-14     	; 0xad74 <xprintf+0xe>
90:	pop	YL
    ad82:	cf 91       	pop	r28
	pop	YH
    ad84:	df 91       	pop	r29
	ret
    ad86:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    ad88:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    ad8a:	e8 94       	clt
	_LPMI	r21		;Get flags
    ad8c:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    ad8e:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    ad90:	b1 f3       	breq	.-20     	; 0xad7e <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    ad92:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    ad94:	11 f4       	brne	.+4      	; 0xad9a <xprintf+0x34>
	set			;/
    ad96:	68 94       	set
22:	_LPMI	r21		;Get width
    ad98:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    ad9a:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    ad9c:	48 f4       	brcc	.+18     	; 0xadb0 <xprintf+0x4a>
	subi	r21, '0'	;
    ad9e:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    ada0:	80 f3       	brcs	.-32     	; 0xad82 <xprintf+0x1c>
	lsl	r18		;
    ada2:	22 0f       	add	r18, r18
	mov	r0, r18		;
    ada4:	02 2e       	mov	r0, r18
	lsl	r18		;
    ada6:	22 0f       	add	r18, r18
	lsl	r18		;
    ada8:	22 0f       	add	r18, r18
	add	r18, r0		;
    adaa:	20 0d       	add	r18, r0
	add	r18, r21	;
    adac:	25 0f       	add	r18, r21
	rjmp	22b		;/
    adae:	f4 cf       	rjmp	.-24     	; 0xad98 <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    adb0:	0e f4       	brtc	.+2      	; 0xadb4 <xprintf+0x4e>
	neg	r18		;
    adb2:	21 95       	neg	r18
25:	ld	r24, Y+		;
    adb4:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    adb6:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    adb8:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    adba:	09 f3       	breq	.-62     	; 0xad7e <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    adbc:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    adbe:	29 f1       	breq	.+74     	; 0xae0a <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    adc0:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    adc2:	59 f1       	breq	.+86     	; 0xae1a <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    adc4:	bc 01       	movw	r22, r24
	clr	r24		;
    adc6:	88 27       	eor	r24, r24
	clr	r25		;
    adc8:	99 27       	eor	r25, r25
	clt			;/
    adca:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    adcc:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    adce:	21 f4       	brne	.+8      	; 0xadd8 <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    add0:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    add2:	99 91       	ld	r25, Y+
	set			;
    add4:	68 94       	set
	_LPMI	r21		;/
    add6:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    add8:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    adda:	39 f4       	brne	.+14     	; 0xadea <xprintf+0x84>
	ldi	r20, -10	;
    addc:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    adde:	7e f0       	brts	.+30     	; 0xadfe <xprintf+0x98>
	sbrs	r23, 7		;
    ade0:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    ade2:	0d c0       	rjmp	.+26     	; 0xadfe <xprintf+0x98>
	ldi	r24, -1		;
    ade4:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    ade6:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    ade8:	0a c0       	rjmp	.+20     	; 0xadfe <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    adea:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    adec:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    adee:	39 f0       	breq	.+14     	; 0xadfe <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    adf0:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    adf2:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    adf4:	21 f0       	breq	.+8      	; 0xadfe <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    adf6:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    adf8:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    adfa:	09 f0       	breq	.+2      	; 0xadfe <xprintf+0x98>
	rjmp	90b		;abort
    adfc:	c2 cf       	rjmp	.-124    	; 0xad82 <xprintf+0x1c>
40:	push	ZH		;Output the value
    adfe:	ff 93       	push	r31
	push	ZL		;
    ae00:	ef 93       	push	r30
	rcall	xitoa		;
    ae02:	76 df       	rcall	.-276    	; 0xacf0 <xitoa>
42:	pop	ZL		;
    ae04:	ef 91       	pop	r30
	pop	ZH		;
    ae06:	ff 91       	pop	r31
	rjmp	0b		;/
    ae08:	b5 cf       	rjmp	.-150    	; 0xad74 <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    ae0a:	ff 93       	push	r31
	push	ZL
    ae0c:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    ae0e:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    ae10:	81 91       	ld	r24, Z+
	cpi	r24, 0
    ae12:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    ae14:	b9 f3       	breq	.-18     	; 0xae04 <xprintf+0x9e>
	rcall	xputc
    ae16:	54 df       	rcall	.-344    	; 0xacc0 <xputc>
	rjmp	51b
    ae18:	fb cf       	rjmp	.-10     	; 0xae10 <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    ae1a:	ff 93       	push	r31
	push	ZL
    ae1c:	ef 93       	push	r30
	rcall	xputs
    ae1e:	61 df       	rcall	.-318    	; 0xace2 <xputs>
	rjmp	42b
    ae20:	f1 cf       	rjmp	.-30     	; 0xae04 <xprintf+0x9e>

0000ae22 <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    ae22:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    ae24:	dc 01       	movw	r26, r24
	ld	ZL, X+
    ae26:	ed 91       	ld	r30, X+
	ld	ZH, X+
    ae28:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    ae2a:	22 27       	eor	r18, r18
	clr	r19		;
    ae2c:	33 27       	eor	r19, r19
	clr	r20		;
    ae2e:	44 27       	eor	r20, r20
	clr	r21		;/
    ae30:	55 27       	eor	r21, r21
	clt			;T = 0;
    ae32:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    ae34:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    ae36:	01 c0       	rjmp	.+2      	; 0xae3a <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    ae38:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    ae3a:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    ae3c:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    ae3e:	e1 f3       	breq	.-8      	; 0xae38 <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    ae40:	a8 f1       	brcs	.+106    	; 0xaeac <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    ae42:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    ae44:	11 f4       	brne	.+4      	; 0xae4a <xatoi+0x28>
	set			; continue;
    ae46:	68 94       	set
	rjmp	40b		;}
    ae48:	f7 cf       	rjmp	.-18     	; 0xae38 <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    ae4a:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    ae4c:	78 f5       	brcc	.+94     	; 0xaeac <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    ae4e:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    ae50:	68 f1       	brcs	.+90     	; 0xaeac <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    ae52:	71 f4       	brne	.+28     	; 0xae70 <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    ae54:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    ae56:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    ae58:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    ae5a:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    ae5c:	48 f1       	brcs	.+82     	; 0xaeb0 <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    ae5e:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    ae60:	11 f4       	brne	.+4      	; 0xae66 <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    ae62:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    ae64:	03 c0       	rjmp	.+6      	; 0xae6c <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    ae66:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    ae68:	19 f4       	brne	.+6      	; 0xae70 <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    ae6a:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    ae6c:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    ae6e:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    ae70:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    ae72:	f0 f0       	brcs	.+60     	; 0xaeb0 <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    ae74:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    ae76:	08 f0       	brcs	.+2      	; 0xae7a <xatoi+0x58>
	subi	r22, 0x20	;/
    ae78:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    ae7a:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    ae7c:	b8 f0       	brcs	.+46     	; 0xaeac <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    ae7e:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    ae80:	18 f0       	brcs	.+6      	; 0xae88 <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    ae82:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    ae84:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    ae86:	90 f0       	brcs	.+36     	; 0xaeac <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    ae88:	69 17       	cp	r22, r25
	brcc	70f		;/
    ae8a:	80 f4       	brcc	.+32     	; 0xaeac <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    ae8c:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    ae8e:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    ae90:	08 f4       	brcc	.+2      	; 0xae94 <xatoi+0x72>
	add	r23, r25	;
    ae92:	79 0f       	add	r23, r25
62:	lsr	r23		;
    ae94:	76 95       	lsr	r23
	ror	r21		;
    ae96:	57 95       	ror	r21
	ror	r20		;
    ae98:	47 95       	ror	r20
	ror	r19		;
    ae9a:	37 95       	ror	r19
	ror	r18		;
    ae9c:	27 95       	ror	r18
	dec	r24		;
    ae9e:	8a 95       	dec	r24
	brne	61b		;/
    aea0:	b9 f7       	brne	.-18     	; 0xae90 <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    aea2:	26 0f       	add	r18, r22
	adc	r19, r24	;
    aea4:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    aea6:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    aea8:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    aeaa:	e0 cf       	rjmp	.-64     	; 0xae6c <xatoi+0x4a>

70:	ldi	r24, 0
    aeac:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    aeae:	01 c0       	rjmp	.+2      	; 0xaeb2 <xatoi+0x90>
80:	ldi	r24, 1
    aeb0:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    aeb2:	4e f4       	brtc	.+18     	; 0xaec6 <xatoi+0xa4>
	clr	r22
    aeb4:	66 27       	eor	r22, r22
	com	r18
    aeb6:	20 95       	com	r18
	com	r19
    aeb8:	30 95       	com	r19
	com	r20
    aeba:	40 95       	com	r20
	com	r21
    aebc:	50 95       	com	r21
	adc	r18, r22
    aebe:	26 1f       	adc	r18, r22
	adc	r19, r22
    aec0:	36 1f       	adc	r19, r22
	adc	r20, r22
    aec2:	46 1f       	adc	r20, r22
	adc	r21, r22
    aec4:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    aec6:	fe 93       	st	-X, r31
	st	-X, ZL
    aec8:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    aeca:	d0 01       	movw	r26, r0
	st	X+, r18
    aecc:	2d 93       	st	X+, r18
	st	X+, r19
    aece:	3d 93       	st	X+, r19
	st	X+, r20
    aed0:	4d 93       	st	X+, r20
	st	X+, r21
    aed2:	5d 93       	st	X+, r21
	clr	r1
    aed4:	11 24       	eor	r1, r1
	ret
    aed6:	08 95       	ret

0000aed8 <_fpadd_parts>:
    aed8:	a0 e0       	ldi	r26, 0x00	; 0
    aeda:	b0 e0       	ldi	r27, 0x00	; 0
    aedc:	e2 e7       	ldi	r30, 0x72	; 114
    aede:	f7 e5       	ldi	r31, 0x57	; 87
    aee0:	0c 94 d6 5c 	jmp	0xb9ac	; 0xb9ac <__prologue_saves__+0x8>
    aee4:	fc 01       	movw	r30, r24
    aee6:	ea 01       	movw	r28, r20
    aee8:	80 81       	ld	r24, Z
    aeea:	82 30       	cpi	r24, 0x02	; 2
    aeec:	08 f4       	brcc	.+2      	; 0xaef0 <_fpadd_parts+0x18>
    aeee:	3a c1       	rjmp	.+628    	; 0xb164 <_fpadd_parts+0x28c>
    aef0:	db 01       	movw	r26, r22
    aef2:	9c 91       	ld	r25, X
    aef4:	92 30       	cpi	r25, 0x02	; 2
    aef6:	08 f4       	brcc	.+2      	; 0xaefa <_fpadd_parts+0x22>
    aef8:	32 c1       	rjmp	.+612    	; 0xb15e <_fpadd_parts+0x286>
    aefa:	84 30       	cpi	r24, 0x04	; 4
    aefc:	59 f4       	brne	.+22     	; 0xaf14 <_fpadd_parts+0x3c>
    aefe:	94 30       	cpi	r25, 0x04	; 4
    af00:	09 f0       	breq	.+2      	; 0xaf04 <_fpadd_parts+0x2c>
    af02:	30 c1       	rjmp	.+608    	; 0xb164 <_fpadd_parts+0x28c>
    af04:	91 81       	ldd	r25, Z+1	; 0x01
    af06:	11 96       	adiw	r26, 0x01	; 1
    af08:	8c 91       	ld	r24, X
    af0a:	11 97       	sbiw	r26, 0x01	; 1
    af0c:	98 17       	cp	r25, r24
    af0e:	09 f0       	breq	.+2      	; 0xaf12 <_fpadd_parts+0x3a>
    af10:	23 c1       	rjmp	.+582    	; 0xb158 <_fpadd_parts+0x280>
    af12:	28 c1       	rjmp	.+592    	; 0xb164 <_fpadd_parts+0x28c>
    af14:	94 30       	cpi	r25, 0x04	; 4
    af16:	09 f4       	brne	.+2      	; 0xaf1a <_fpadd_parts+0x42>
    af18:	22 c1       	rjmp	.+580    	; 0xb15e <_fpadd_parts+0x286>
    af1a:	92 30       	cpi	r25, 0x02	; 2
    af1c:	b1 f4       	brne	.+44     	; 0xaf4a <_fpadd_parts+0x72>
    af1e:	82 30       	cpi	r24, 0x02	; 2
    af20:	09 f0       	breq	.+2      	; 0xaf24 <_fpadd_parts+0x4c>
    af22:	20 c1       	rjmp	.+576    	; 0xb164 <_fpadd_parts+0x28c>
    af24:	ca 01       	movw	r24, r20
    af26:	af 01       	movw	r20, r30
    af28:	28 e0       	ldi	r18, 0x08	; 8
    af2a:	da 01       	movw	r26, r20
    af2c:	0d 90       	ld	r0, X+
    af2e:	ad 01       	movw	r20, r26
    af30:	dc 01       	movw	r26, r24
    af32:	0d 92       	st	X+, r0
    af34:	cd 01       	movw	r24, r26
    af36:	21 50       	subi	r18, 0x01	; 1
    af38:	c1 f7       	brne	.-16     	; 0xaf2a <_fpadd_parts+0x52>
    af3a:	db 01       	movw	r26, r22
    af3c:	11 96       	adiw	r26, 0x01	; 1
    af3e:	8c 91       	ld	r24, X
    af40:	11 97       	sbiw	r26, 0x01	; 1
    af42:	91 81       	ldd	r25, Z+1	; 0x01
    af44:	89 23       	and	r24, r25
    af46:	89 83       	std	Y+1, r24	; 0x01
    af48:	0c c1       	rjmp	.+536    	; 0xb162 <_fpadd_parts+0x28a>
    af4a:	82 30       	cpi	r24, 0x02	; 2
    af4c:	09 f4       	brne	.+2      	; 0xaf50 <_fpadd_parts+0x78>
    af4e:	07 c1       	rjmp	.+526    	; 0xb15e <_fpadd_parts+0x286>
    af50:	c2 80       	ldd	r12, Z+2	; 0x02
    af52:	d3 80       	ldd	r13, Z+3	; 0x03
    af54:	db 01       	movw	r26, r22
    af56:	12 96       	adiw	r26, 0x02	; 2
    af58:	6d 90       	ld	r6, X+
    af5a:	7c 90       	ld	r7, X
    af5c:	13 97       	sbiw	r26, 0x03	; 3
    af5e:	24 81       	ldd	r18, Z+4	; 0x04
    af60:	35 81       	ldd	r19, Z+5	; 0x05
    af62:	46 81       	ldd	r20, Z+6	; 0x06
    af64:	57 81       	ldd	r21, Z+7	; 0x07
    af66:	14 96       	adiw	r26, 0x04	; 4
    af68:	ed 90       	ld	r14, X+
    af6a:	fd 90       	ld	r15, X+
    af6c:	0d 91       	ld	r16, X+
    af6e:	1c 91       	ld	r17, X
    af70:	17 97       	sbiw	r26, 0x07	; 7
    af72:	c6 01       	movw	r24, r12
    af74:	86 19       	sub	r24, r6
    af76:	97 09       	sbc	r25, r7
    af78:	5c 01       	movw	r10, r24
    af7a:	97 ff       	sbrs	r25, 7
    af7c:	04 c0       	rjmp	.+8      	; 0xaf86 <_fpadd_parts+0xae>
    af7e:	aa 24       	eor	r10, r10
    af80:	bb 24       	eor	r11, r11
    af82:	a8 1a       	sub	r10, r24
    af84:	b9 0a       	sbc	r11, r25
    af86:	b0 e2       	ldi	r27, 0x20	; 32
    af88:	ab 16       	cp	r10, r27
    af8a:	b1 04       	cpc	r11, r1
    af8c:	0c f0       	brlt	.+2      	; 0xaf90 <_fpadd_parts+0xb8>
    af8e:	62 c0       	rjmp	.+196    	; 0xb054 <_fpadd_parts+0x17c>
    af90:	18 16       	cp	r1, r24
    af92:	19 06       	cpc	r1, r25
    af94:	6c f5       	brge	.+90     	; 0xaff0 <_fpadd_parts+0x118>
    af96:	37 01       	movw	r6, r14
    af98:	48 01       	movw	r8, r16
    af9a:	0a 2c       	mov	r0, r10
    af9c:	04 c0       	rjmp	.+8      	; 0xafa6 <_fpadd_parts+0xce>
    af9e:	96 94       	lsr	r9
    afa0:	87 94       	ror	r8
    afa2:	77 94       	ror	r7
    afa4:	67 94       	ror	r6
    afa6:	0a 94       	dec	r0
    afa8:	d2 f7       	brpl	.-12     	; 0xaf9e <_fpadd_parts+0xc6>
    afaa:	81 e0       	ldi	r24, 0x01	; 1
    afac:	90 e0       	ldi	r25, 0x00	; 0
    afae:	a0 e0       	ldi	r26, 0x00	; 0
    afb0:	b0 e0       	ldi	r27, 0x00	; 0
    afb2:	0a 2c       	mov	r0, r10
    afb4:	04 c0       	rjmp	.+8      	; 0xafbe <_fpadd_parts+0xe6>
    afb6:	88 0f       	add	r24, r24
    afb8:	99 1f       	adc	r25, r25
    afba:	aa 1f       	adc	r26, r26
    afbc:	bb 1f       	adc	r27, r27
    afbe:	0a 94       	dec	r0
    afc0:	d2 f7       	brpl	.-12     	; 0xafb6 <_fpadd_parts+0xde>
    afc2:	01 97       	sbiw	r24, 0x01	; 1
    afc4:	a1 09       	sbc	r26, r1
    afc6:	b1 09       	sbc	r27, r1
    afc8:	8e 21       	and	r24, r14
    afca:	9f 21       	and	r25, r15
    afcc:	a0 23       	and	r26, r16
    afce:	b1 23       	and	r27, r17
    afd0:	ee 24       	eor	r14, r14
    afd2:	ff 24       	eor	r15, r15
    afd4:	87 01       	movw	r16, r14
    afd6:	e3 94       	inc	r14
    afd8:	00 97       	sbiw	r24, 0x00	; 0
    afda:	a1 05       	cpc	r26, r1
    afdc:	b1 05       	cpc	r27, r1
    afde:	19 f4       	brne	.+6      	; 0xafe6 <_fpadd_parts+0x10e>
    afe0:	ee 24       	eor	r14, r14
    afe2:	ff 24       	eor	r15, r15
    afe4:	87 01       	movw	r16, r14
    afe6:	e6 28       	or	r14, r6
    afe8:	f7 28       	or	r15, r7
    afea:	08 29       	or	r16, r8
    afec:	19 29       	or	r17, r9
    afee:	3e c0       	rjmp	.+124    	; 0xb06c <_fpadd_parts+0x194>
    aff0:	00 97       	sbiw	r24, 0x00	; 0
    aff2:	e1 f1       	breq	.+120    	; 0xb06c <_fpadd_parts+0x194>
    aff4:	ca 0c       	add	r12, r10
    aff6:	db 1c       	adc	r13, r11
    aff8:	39 01       	movw	r6, r18
    affa:	4a 01       	movw	r8, r20
    affc:	0a 2c       	mov	r0, r10
    affe:	04 c0       	rjmp	.+8      	; 0xb008 <_fpadd_parts+0x130>
    b000:	96 94       	lsr	r9
    b002:	87 94       	ror	r8
    b004:	77 94       	ror	r7
    b006:	67 94       	ror	r6
    b008:	0a 94       	dec	r0
    b00a:	d2 f7       	brpl	.-12     	; 0xb000 <_fpadd_parts+0x128>
    b00c:	81 e0       	ldi	r24, 0x01	; 1
    b00e:	90 e0       	ldi	r25, 0x00	; 0
    b010:	a0 e0       	ldi	r26, 0x00	; 0
    b012:	b0 e0       	ldi	r27, 0x00	; 0
    b014:	0a 2c       	mov	r0, r10
    b016:	04 c0       	rjmp	.+8      	; 0xb020 <_fpadd_parts+0x148>
    b018:	88 0f       	add	r24, r24
    b01a:	99 1f       	adc	r25, r25
    b01c:	aa 1f       	adc	r26, r26
    b01e:	bb 1f       	adc	r27, r27
    b020:	0a 94       	dec	r0
    b022:	d2 f7       	brpl	.-12     	; 0xb018 <_fpadd_parts+0x140>
    b024:	01 97       	sbiw	r24, 0x01	; 1
    b026:	a1 09       	sbc	r26, r1
    b028:	b1 09       	sbc	r27, r1
    b02a:	82 23       	and	r24, r18
    b02c:	93 23       	and	r25, r19
    b02e:	a4 23       	and	r26, r20
    b030:	b5 23       	and	r27, r21
    b032:	21 e0       	ldi	r18, 0x01	; 1
    b034:	30 e0       	ldi	r19, 0x00	; 0
    b036:	40 e0       	ldi	r20, 0x00	; 0
    b038:	50 e0       	ldi	r21, 0x00	; 0
    b03a:	00 97       	sbiw	r24, 0x00	; 0
    b03c:	a1 05       	cpc	r26, r1
    b03e:	b1 05       	cpc	r27, r1
    b040:	21 f4       	brne	.+8      	; 0xb04a <_fpadd_parts+0x172>
    b042:	20 e0       	ldi	r18, 0x00	; 0
    b044:	30 e0       	ldi	r19, 0x00	; 0
    b046:	40 e0       	ldi	r20, 0x00	; 0
    b048:	50 e0       	ldi	r21, 0x00	; 0
    b04a:	26 29       	or	r18, r6
    b04c:	37 29       	or	r19, r7
    b04e:	48 29       	or	r20, r8
    b050:	59 29       	or	r21, r9
    b052:	0c c0       	rjmp	.+24     	; 0xb06c <_fpadd_parts+0x194>
    b054:	6c 14       	cp	r6, r12
    b056:	7d 04       	cpc	r7, r13
    b058:	24 f4       	brge	.+8      	; 0xb062 <_fpadd_parts+0x18a>
    b05a:	ee 24       	eor	r14, r14
    b05c:	ff 24       	eor	r15, r15
    b05e:	87 01       	movw	r16, r14
    b060:	05 c0       	rjmp	.+10     	; 0xb06c <_fpadd_parts+0x194>
    b062:	63 01       	movw	r12, r6
    b064:	20 e0       	ldi	r18, 0x00	; 0
    b066:	30 e0       	ldi	r19, 0x00	; 0
    b068:	40 e0       	ldi	r20, 0x00	; 0
    b06a:	50 e0       	ldi	r21, 0x00	; 0
    b06c:	81 81       	ldd	r24, Z+1	; 0x01
    b06e:	fb 01       	movw	r30, r22
    b070:	91 81       	ldd	r25, Z+1	; 0x01
    b072:	89 17       	cp	r24, r25
    b074:	09 f4       	brne	.+2      	; 0xb078 <_fpadd_parts+0x1a0>
    b076:	45 c0       	rjmp	.+138    	; 0xb102 <_fpadd_parts+0x22a>
    b078:	88 23       	and	r24, r24
    b07a:	49 f0       	breq	.+18     	; 0xb08e <_fpadd_parts+0x1b6>
    b07c:	d8 01       	movw	r26, r16
    b07e:	c7 01       	movw	r24, r14
    b080:	82 1b       	sub	r24, r18
    b082:	93 0b       	sbc	r25, r19
    b084:	a4 0b       	sbc	r26, r20
    b086:	b5 0b       	sbc	r27, r21
    b088:	9c 01       	movw	r18, r24
    b08a:	ad 01       	movw	r20, r26
    b08c:	04 c0       	rjmp	.+8      	; 0xb096 <_fpadd_parts+0x1be>
    b08e:	2e 19       	sub	r18, r14
    b090:	3f 09       	sbc	r19, r15
    b092:	40 0b       	sbc	r20, r16
    b094:	51 0b       	sbc	r21, r17
    b096:	57 fd       	sbrc	r21, 7
    b098:	04 c0       	rjmp	.+8      	; 0xb0a2 <_fpadd_parts+0x1ca>
    b09a:	19 82       	std	Y+1, r1	; 0x01
    b09c:	db 82       	std	Y+3, r13	; 0x03
    b09e:	ca 82       	std	Y+2, r12	; 0x02
    b0a0:	0b c0       	rjmp	.+22     	; 0xb0b8 <_fpadd_parts+0x1e0>
    b0a2:	81 e0       	ldi	r24, 0x01	; 1
    b0a4:	89 83       	std	Y+1, r24	; 0x01
    b0a6:	db 82       	std	Y+3, r13	; 0x03
    b0a8:	ca 82       	std	Y+2, r12	; 0x02
    b0aa:	50 95       	com	r21
    b0ac:	40 95       	com	r20
    b0ae:	30 95       	com	r19
    b0b0:	21 95       	neg	r18
    b0b2:	3f 4f       	sbci	r19, 0xFF	; 255
    b0b4:	4f 4f       	sbci	r20, 0xFF	; 255
    b0b6:	5f 4f       	sbci	r21, 0xFF	; 255
    b0b8:	2c 83       	std	Y+4, r18	; 0x04
    b0ba:	3d 83       	std	Y+5, r19	; 0x05
    b0bc:	4e 83       	std	Y+6, r20	; 0x06
    b0be:	5f 83       	std	Y+7, r21	; 0x07
    b0c0:	0d c0       	rjmp	.+26     	; 0xb0dc <_fpadd_parts+0x204>
    b0c2:	88 0f       	add	r24, r24
    b0c4:	99 1f       	adc	r25, r25
    b0c6:	aa 1f       	adc	r26, r26
    b0c8:	bb 1f       	adc	r27, r27
    b0ca:	8c 83       	std	Y+4, r24	; 0x04
    b0cc:	9d 83       	std	Y+5, r25	; 0x05
    b0ce:	ae 83       	std	Y+6, r26	; 0x06
    b0d0:	bf 83       	std	Y+7, r27	; 0x07
    b0d2:	8a 81       	ldd	r24, Y+2	; 0x02
    b0d4:	9b 81       	ldd	r25, Y+3	; 0x03
    b0d6:	01 97       	sbiw	r24, 0x01	; 1
    b0d8:	9b 83       	std	Y+3, r25	; 0x03
    b0da:	8a 83       	std	Y+2, r24	; 0x02
    b0dc:	8c 81       	ldd	r24, Y+4	; 0x04
    b0de:	9d 81       	ldd	r25, Y+5	; 0x05
    b0e0:	ae 81       	ldd	r26, Y+6	; 0x06
    b0e2:	bf 81       	ldd	r27, Y+7	; 0x07
    b0e4:	9c 01       	movw	r18, r24
    b0e6:	ad 01       	movw	r20, r26
    b0e8:	21 50       	subi	r18, 0x01	; 1
    b0ea:	30 40       	sbci	r19, 0x00	; 0
    b0ec:	40 40       	sbci	r20, 0x00	; 0
    b0ee:	50 40       	sbci	r21, 0x00	; 0
    b0f0:	2f 3f       	cpi	r18, 0xFF	; 255
    b0f2:	ef ef       	ldi	r30, 0xFF	; 255
    b0f4:	3e 07       	cpc	r19, r30
    b0f6:	ef ef       	ldi	r30, 0xFF	; 255
    b0f8:	4e 07       	cpc	r20, r30
    b0fa:	ef e3       	ldi	r30, 0x3F	; 63
    b0fc:	5e 07       	cpc	r21, r30
    b0fe:	08 f3       	brcs	.-62     	; 0xb0c2 <_fpadd_parts+0x1ea>
    b100:	0b c0       	rjmp	.+22     	; 0xb118 <_fpadd_parts+0x240>
    b102:	89 83       	std	Y+1, r24	; 0x01
    b104:	db 82       	std	Y+3, r13	; 0x03
    b106:	ca 82       	std	Y+2, r12	; 0x02
    b108:	2e 0d       	add	r18, r14
    b10a:	3f 1d       	adc	r19, r15
    b10c:	40 1f       	adc	r20, r16
    b10e:	51 1f       	adc	r21, r17
    b110:	2c 83       	std	Y+4, r18	; 0x04
    b112:	3d 83       	std	Y+5, r19	; 0x05
    b114:	4e 83       	std	Y+6, r20	; 0x06
    b116:	5f 83       	std	Y+7, r21	; 0x07
    b118:	83 e0       	ldi	r24, 0x03	; 3
    b11a:	88 83       	st	Y, r24
    b11c:	2c 81       	ldd	r18, Y+4	; 0x04
    b11e:	3d 81       	ldd	r19, Y+5	; 0x05
    b120:	4e 81       	ldd	r20, Y+6	; 0x06
    b122:	5f 81       	ldd	r21, Y+7	; 0x07
    b124:	57 ff       	sbrs	r21, 7
    b126:	1d c0       	rjmp	.+58     	; 0xb162 <_fpadd_parts+0x28a>
    b128:	da 01       	movw	r26, r20
    b12a:	c9 01       	movw	r24, r18
    b12c:	81 70       	andi	r24, 0x01	; 1
    b12e:	90 70       	andi	r25, 0x00	; 0
    b130:	a0 70       	andi	r26, 0x00	; 0
    b132:	b0 70       	andi	r27, 0x00	; 0
    b134:	56 95       	lsr	r21
    b136:	47 95       	ror	r20
    b138:	37 95       	ror	r19
    b13a:	27 95       	ror	r18
    b13c:	82 2b       	or	r24, r18
    b13e:	93 2b       	or	r25, r19
    b140:	a4 2b       	or	r26, r20
    b142:	b5 2b       	or	r27, r21
    b144:	8c 83       	std	Y+4, r24	; 0x04
    b146:	9d 83       	std	Y+5, r25	; 0x05
    b148:	ae 83       	std	Y+6, r26	; 0x06
    b14a:	bf 83       	std	Y+7, r27	; 0x07
    b14c:	8a 81       	ldd	r24, Y+2	; 0x02
    b14e:	9b 81       	ldd	r25, Y+3	; 0x03
    b150:	01 96       	adiw	r24, 0x01	; 1
    b152:	9b 83       	std	Y+3, r25	; 0x03
    b154:	8a 83       	std	Y+2, r24	; 0x02
    b156:	05 c0       	rjmp	.+10     	; 0xb162 <_fpadd_parts+0x28a>
    b158:	e2 e8       	ldi	r30, 0x82	; 130
    b15a:	f1 e0       	ldi	r31, 0x01	; 1
    b15c:	03 c0       	rjmp	.+6      	; 0xb164 <_fpadd_parts+0x28c>
    b15e:	fb 01       	movw	r30, r22
    b160:	01 c0       	rjmp	.+2      	; 0xb164 <_fpadd_parts+0x28c>
    b162:	fe 01       	movw	r30, r28
    b164:	cf 01       	movw	r24, r30
    b166:	cd b7       	in	r28, 0x3d	; 61
    b168:	de b7       	in	r29, 0x3e	; 62
    b16a:	ee e0       	ldi	r30, 0x0E	; 14
    b16c:	0c 94 f2 5c 	jmp	0xb9e4	; 0xb9e4 <__epilogue_restores__+0x8>

0000b170 <__addsf3>:
    b170:	a0 e2       	ldi	r26, 0x20	; 32
    b172:	b0 e0       	ldi	r27, 0x00	; 0
    b174:	ee eb       	ldi	r30, 0xBE	; 190
    b176:	f8 e5       	ldi	r31, 0x58	; 88
    b178:	0c 94 de 5c 	jmp	0xb9bc	; 0xb9bc <__prologue_saves__+0x18>
    b17c:	69 83       	std	Y+1, r22	; 0x01
    b17e:	7a 83       	std	Y+2, r23	; 0x02
    b180:	8b 83       	std	Y+3, r24	; 0x03
    b182:	9c 83       	std	Y+4, r25	; 0x04
    b184:	2d 83       	std	Y+5, r18	; 0x05
    b186:	3e 83       	std	Y+6, r19	; 0x06
    b188:	4f 83       	std	Y+7, r20	; 0x07
    b18a:	58 87       	std	Y+8, r21	; 0x08
    b18c:	89 e0       	ldi	r24, 0x09	; 9
    b18e:	e8 2e       	mov	r14, r24
    b190:	f1 2c       	mov	r15, r1
    b192:	ec 0e       	add	r14, r28
    b194:	fd 1e       	adc	r15, r29
    b196:	ce 01       	movw	r24, r28
    b198:	01 96       	adiw	r24, 0x01	; 1
    b19a:	b7 01       	movw	r22, r14
    b19c:	0e 94 e6 5b 	call	0xb7cc	; 0xb7cc <__unpack_f>
    b1a0:	8e 01       	movw	r16, r28
    b1a2:	0f 5e       	subi	r16, 0xEF	; 239
    b1a4:	1f 4f       	sbci	r17, 0xFF	; 255
    b1a6:	ce 01       	movw	r24, r28
    b1a8:	05 96       	adiw	r24, 0x05	; 5
    b1aa:	b8 01       	movw	r22, r16
    b1ac:	0e 94 e6 5b 	call	0xb7cc	; 0xb7cc <__unpack_f>
    b1b0:	c7 01       	movw	r24, r14
    b1b2:	b8 01       	movw	r22, r16
    b1b4:	ae 01       	movw	r20, r28
    b1b6:	47 5e       	subi	r20, 0xE7	; 231
    b1b8:	5f 4f       	sbci	r21, 0xFF	; 255
    b1ba:	0e 94 6c 57 	call	0xaed8	; 0xaed8 <_fpadd_parts>
    b1be:	0e 94 15 5b 	call	0xb62a	; 0xb62a <__pack_f>
    b1c2:	a0 96       	adiw	r28, 0x20	; 32
    b1c4:	e6 e0       	ldi	r30, 0x06	; 6
    b1c6:	0c 94 fa 5c 	jmp	0xb9f4	; 0xb9f4 <__epilogue_restores__+0x18>

0000b1ca <__subsf3>:
    b1ca:	a0 e2       	ldi	r26, 0x20	; 32
    b1cc:	b0 e0       	ldi	r27, 0x00	; 0
    b1ce:	eb ee       	ldi	r30, 0xEB	; 235
    b1d0:	f8 e5       	ldi	r31, 0x58	; 88
    b1d2:	0c 94 de 5c 	jmp	0xb9bc	; 0xb9bc <__prologue_saves__+0x18>
    b1d6:	69 83       	std	Y+1, r22	; 0x01
    b1d8:	7a 83       	std	Y+2, r23	; 0x02
    b1da:	8b 83       	std	Y+3, r24	; 0x03
    b1dc:	9c 83       	std	Y+4, r25	; 0x04
    b1de:	2d 83       	std	Y+5, r18	; 0x05
    b1e0:	3e 83       	std	Y+6, r19	; 0x06
    b1e2:	4f 83       	std	Y+7, r20	; 0x07
    b1e4:	58 87       	std	Y+8, r21	; 0x08
    b1e6:	8e 01       	movw	r16, r28
    b1e8:	07 5f       	subi	r16, 0xF7	; 247
    b1ea:	1f 4f       	sbci	r17, 0xFF	; 255
    b1ec:	ce 01       	movw	r24, r28
    b1ee:	01 96       	adiw	r24, 0x01	; 1
    b1f0:	b8 01       	movw	r22, r16
    b1f2:	0e 94 e6 5b 	call	0xb7cc	; 0xb7cc <__unpack_f>
    b1f6:	91 e1       	ldi	r25, 0x11	; 17
    b1f8:	e9 2e       	mov	r14, r25
    b1fa:	f1 2c       	mov	r15, r1
    b1fc:	ec 0e       	add	r14, r28
    b1fe:	fd 1e       	adc	r15, r29
    b200:	ce 01       	movw	r24, r28
    b202:	05 96       	adiw	r24, 0x05	; 5
    b204:	b7 01       	movw	r22, r14
    b206:	0e 94 e6 5b 	call	0xb7cc	; 0xb7cc <__unpack_f>
    b20a:	8a 89       	ldd	r24, Y+18	; 0x12
    b20c:	91 e0       	ldi	r25, 0x01	; 1
    b20e:	89 27       	eor	r24, r25
    b210:	8a 8b       	std	Y+18, r24	; 0x12
    b212:	c8 01       	movw	r24, r16
    b214:	b7 01       	movw	r22, r14
    b216:	ae 01       	movw	r20, r28
    b218:	47 5e       	subi	r20, 0xE7	; 231
    b21a:	5f 4f       	sbci	r21, 0xFF	; 255
    b21c:	0e 94 6c 57 	call	0xaed8	; 0xaed8 <_fpadd_parts>
    b220:	0e 94 15 5b 	call	0xb62a	; 0xb62a <__pack_f>
    b224:	a0 96       	adiw	r28, 0x20	; 32
    b226:	e6 e0       	ldi	r30, 0x06	; 6
    b228:	0c 94 fa 5c 	jmp	0xb9f4	; 0xb9f4 <__epilogue_restores__+0x18>

0000b22c <__mulsf3>:
    b22c:	a0 e2       	ldi	r26, 0x20	; 32
    b22e:	b0 e0       	ldi	r27, 0x00	; 0
    b230:	ec e1       	ldi	r30, 0x1C	; 28
    b232:	f9 e5       	ldi	r31, 0x59	; 89
    b234:	0c 94 d2 5c 	jmp	0xb9a4	; 0xb9a4 <__prologue_saves__>
    b238:	69 83       	std	Y+1, r22	; 0x01
    b23a:	7a 83       	std	Y+2, r23	; 0x02
    b23c:	8b 83       	std	Y+3, r24	; 0x03
    b23e:	9c 83       	std	Y+4, r25	; 0x04
    b240:	2d 83       	std	Y+5, r18	; 0x05
    b242:	3e 83       	std	Y+6, r19	; 0x06
    b244:	4f 83       	std	Y+7, r20	; 0x07
    b246:	58 87       	std	Y+8, r21	; 0x08
    b248:	ce 01       	movw	r24, r28
    b24a:	01 96       	adiw	r24, 0x01	; 1
    b24c:	be 01       	movw	r22, r28
    b24e:	67 5f       	subi	r22, 0xF7	; 247
    b250:	7f 4f       	sbci	r23, 0xFF	; 255
    b252:	0e 94 e6 5b 	call	0xb7cc	; 0xb7cc <__unpack_f>
    b256:	ce 01       	movw	r24, r28
    b258:	05 96       	adiw	r24, 0x05	; 5
    b25a:	be 01       	movw	r22, r28
    b25c:	6f 5e       	subi	r22, 0xEF	; 239
    b25e:	7f 4f       	sbci	r23, 0xFF	; 255
    b260:	0e 94 e6 5b 	call	0xb7cc	; 0xb7cc <__unpack_f>
    b264:	99 85       	ldd	r25, Y+9	; 0x09
    b266:	92 30       	cpi	r25, 0x02	; 2
    b268:	78 f0       	brcs	.+30     	; 0xb288 <__mulsf3+0x5c>
    b26a:	89 89       	ldd	r24, Y+17	; 0x11
    b26c:	82 30       	cpi	r24, 0x02	; 2
    b26e:	c0 f0       	brcs	.+48     	; 0xb2a0 <__mulsf3+0x74>
    b270:	94 30       	cpi	r25, 0x04	; 4
    b272:	19 f4       	brne	.+6      	; 0xb27a <__mulsf3+0x4e>
    b274:	82 30       	cpi	r24, 0x02	; 2
    b276:	41 f4       	brne	.+16     	; 0xb288 <__mulsf3+0x5c>
    b278:	ce c0       	rjmp	.+412    	; 0xb416 <__mulsf3+0x1ea>
    b27a:	84 30       	cpi	r24, 0x04	; 4
    b27c:	19 f4       	brne	.+6      	; 0xb284 <__mulsf3+0x58>
    b27e:	92 30       	cpi	r25, 0x02	; 2
    b280:	79 f4       	brne	.+30     	; 0xb2a0 <__mulsf3+0x74>
    b282:	c9 c0       	rjmp	.+402    	; 0xb416 <__mulsf3+0x1ea>
    b284:	92 30       	cpi	r25, 0x02	; 2
    b286:	51 f4       	brne	.+20     	; 0xb29c <__mulsf3+0x70>
    b288:	81 e0       	ldi	r24, 0x01	; 1
    b28a:	2a 85       	ldd	r18, Y+10	; 0x0a
    b28c:	9a 89       	ldd	r25, Y+18	; 0x12
    b28e:	29 17       	cp	r18, r25
    b290:	09 f4       	brne	.+2      	; 0xb294 <__mulsf3+0x68>
    b292:	80 e0       	ldi	r24, 0x00	; 0
    b294:	8a 87       	std	Y+10, r24	; 0x0a
    b296:	ce 01       	movw	r24, r28
    b298:	09 96       	adiw	r24, 0x09	; 9
    b29a:	bf c0       	rjmp	.+382    	; 0xb41a <__mulsf3+0x1ee>
    b29c:	82 30       	cpi	r24, 0x02	; 2
    b29e:	51 f4       	brne	.+20     	; 0xb2b4 <__mulsf3+0x88>
    b2a0:	81 e0       	ldi	r24, 0x01	; 1
    b2a2:	2a 85       	ldd	r18, Y+10	; 0x0a
    b2a4:	9a 89       	ldd	r25, Y+18	; 0x12
    b2a6:	29 17       	cp	r18, r25
    b2a8:	09 f4       	brne	.+2      	; 0xb2ac <__mulsf3+0x80>
    b2aa:	80 e0       	ldi	r24, 0x00	; 0
    b2ac:	8a 8b       	std	Y+18, r24	; 0x12
    b2ae:	ce 01       	movw	r24, r28
    b2b0:	41 96       	adiw	r24, 0x11	; 17
    b2b2:	b3 c0       	rjmp	.+358    	; 0xb41a <__mulsf3+0x1ee>
    b2b4:	6d 84       	ldd	r6, Y+13	; 0x0d
    b2b6:	7e 84       	ldd	r7, Y+14	; 0x0e
    b2b8:	8f 84       	ldd	r8, Y+15	; 0x0f
    b2ba:	98 88       	ldd	r9, Y+16	; 0x10
    b2bc:	ed 88       	ldd	r14, Y+21	; 0x15
    b2be:	fe 88       	ldd	r15, Y+22	; 0x16
    b2c0:	0f 89       	ldd	r16, Y+23	; 0x17
    b2c2:	18 8d       	ldd	r17, Y+24	; 0x18
    b2c4:	e0 e2       	ldi	r30, 0x20	; 32
    b2c6:	f0 e0       	ldi	r31, 0x00	; 0
    b2c8:	80 e0       	ldi	r24, 0x00	; 0
    b2ca:	90 e0       	ldi	r25, 0x00	; 0
    b2cc:	a0 e0       	ldi	r26, 0x00	; 0
    b2ce:	b0 e0       	ldi	r27, 0x00	; 0
    b2d0:	aa 24       	eor	r10, r10
    b2d2:	bb 24       	eor	r11, r11
    b2d4:	65 01       	movw	r12, r10
    b2d6:	20 e0       	ldi	r18, 0x00	; 0
    b2d8:	30 e0       	ldi	r19, 0x00	; 0
    b2da:	40 e0       	ldi	r20, 0x00	; 0
    b2dc:	50 e0       	ldi	r21, 0x00	; 0
    b2de:	b3 01       	movw	r22, r6
    b2e0:	61 70       	andi	r22, 0x01	; 1
    b2e2:	70 70       	andi	r23, 0x00	; 0
    b2e4:	61 15       	cp	r22, r1
    b2e6:	71 05       	cpc	r23, r1
    b2e8:	d9 f0       	breq	.+54     	; 0xb320 <__mulsf3+0xf4>
    b2ea:	2e 0d       	add	r18, r14
    b2ec:	3f 1d       	adc	r19, r15
    b2ee:	40 1f       	adc	r20, r16
    b2f0:	51 1f       	adc	r21, r17
    b2f2:	15 01       	movw	r2, r10
    b2f4:	26 01       	movw	r4, r12
    b2f6:	28 0e       	add	r2, r24
    b2f8:	39 1e       	adc	r3, r25
    b2fa:	4a 1e       	adc	r4, r26
    b2fc:	5b 1e       	adc	r5, r27
    b2fe:	81 e0       	ldi	r24, 0x01	; 1
    b300:	90 e0       	ldi	r25, 0x00	; 0
    b302:	a0 e0       	ldi	r26, 0x00	; 0
    b304:	b0 e0       	ldi	r27, 0x00	; 0
    b306:	2e 15       	cp	r18, r14
    b308:	3f 05       	cpc	r19, r15
    b30a:	40 07       	cpc	r20, r16
    b30c:	51 07       	cpc	r21, r17
    b30e:	20 f0       	brcs	.+8      	; 0xb318 <__mulsf3+0xec>
    b310:	80 e0       	ldi	r24, 0x00	; 0
    b312:	90 e0       	ldi	r25, 0x00	; 0
    b314:	a0 e0       	ldi	r26, 0x00	; 0
    b316:	b0 e0       	ldi	r27, 0x00	; 0
    b318:	82 0d       	add	r24, r2
    b31a:	93 1d       	adc	r25, r3
    b31c:	a4 1d       	adc	r26, r4
    b31e:	b5 1d       	adc	r27, r5
    b320:	aa 0c       	add	r10, r10
    b322:	bb 1c       	adc	r11, r11
    b324:	cc 1c       	adc	r12, r12
    b326:	dd 1c       	adc	r13, r13
    b328:	17 ff       	sbrs	r17, 7
    b32a:	09 c0       	rjmp	.+18     	; 0xb33e <__mulsf3+0x112>
    b32c:	61 e0       	ldi	r22, 0x01	; 1
    b32e:	26 2e       	mov	r2, r22
    b330:	31 2c       	mov	r3, r1
    b332:	41 2c       	mov	r4, r1
    b334:	51 2c       	mov	r5, r1
    b336:	a2 28       	or	r10, r2
    b338:	b3 28       	or	r11, r3
    b33a:	c4 28       	or	r12, r4
    b33c:	d5 28       	or	r13, r5
    b33e:	31 97       	sbiw	r30, 0x01	; 1
    b340:	49 f0       	breq	.+18     	; 0xb354 <__mulsf3+0x128>
    b342:	ee 0c       	add	r14, r14
    b344:	ff 1c       	adc	r15, r15
    b346:	00 1f       	adc	r16, r16
    b348:	11 1f       	adc	r17, r17
    b34a:	96 94       	lsr	r9
    b34c:	87 94       	ror	r8
    b34e:	77 94       	ror	r7
    b350:	67 94       	ror	r6
    b352:	c5 cf       	rjmp	.-118    	; 0xb2de <__mulsf3+0xb2>
    b354:	6b 89       	ldd	r22, Y+19	; 0x13
    b356:	7c 89       	ldd	r23, Y+20	; 0x14
    b358:	eb 85       	ldd	r30, Y+11	; 0x0b
    b35a:	fc 85       	ldd	r31, Y+12	; 0x0c
    b35c:	6e 0f       	add	r22, r30
    b35e:	7f 1f       	adc	r23, r31
    b360:	6e 5f       	subi	r22, 0xFE	; 254
    b362:	7f 4f       	sbci	r23, 0xFF	; 255
    b364:	7c 8f       	std	Y+28, r23	; 0x1c
    b366:	6b 8f       	std	Y+27, r22	; 0x1b
    b368:	61 e0       	ldi	r22, 0x01	; 1
    b36a:	ea 85       	ldd	r30, Y+10	; 0x0a
    b36c:	7a 89       	ldd	r23, Y+18	; 0x12
    b36e:	e7 17       	cp	r30, r23
    b370:	09 f4       	brne	.+2      	; 0xb374 <__mulsf3+0x148>
    b372:	60 e0       	ldi	r22, 0x00	; 0
    b374:	6a 8f       	std	Y+26, r22	; 0x1a
    b376:	6b 8d       	ldd	r22, Y+27	; 0x1b
    b378:	7c 8d       	ldd	r23, Y+28	; 0x1c
    b37a:	10 c0       	rjmp	.+32     	; 0xb39c <__mulsf3+0x170>
    b37c:	fc 01       	movw	r30, r24
    b37e:	e1 70       	andi	r30, 0x01	; 1
    b380:	f0 70       	andi	r31, 0x00	; 0
    b382:	30 97       	sbiw	r30, 0x00	; 0
    b384:	29 f0       	breq	.+10     	; 0xb390 <__mulsf3+0x164>
    b386:	56 95       	lsr	r21
    b388:	47 95       	ror	r20
    b38a:	37 95       	ror	r19
    b38c:	27 95       	ror	r18
    b38e:	50 68       	ori	r21, 0x80	; 128
    b390:	b6 95       	lsr	r27
    b392:	a7 95       	ror	r26
    b394:	97 95       	ror	r25
    b396:	87 95       	ror	r24
    b398:	6f 5f       	subi	r22, 0xFF	; 255
    b39a:	7f 4f       	sbci	r23, 0xFF	; 255
    b39c:	b7 fd       	sbrc	r27, 7
    b39e:	ee cf       	rjmp	.-36     	; 0xb37c <__mulsf3+0x150>
    b3a0:	0c c0       	rjmp	.+24     	; 0xb3ba <__mulsf3+0x18e>
    b3a2:	88 0f       	add	r24, r24
    b3a4:	99 1f       	adc	r25, r25
    b3a6:	aa 1f       	adc	r26, r26
    b3a8:	bb 1f       	adc	r27, r27
    b3aa:	57 fd       	sbrc	r21, 7
    b3ac:	81 60       	ori	r24, 0x01	; 1
    b3ae:	22 0f       	add	r18, r18
    b3b0:	33 1f       	adc	r19, r19
    b3b2:	44 1f       	adc	r20, r20
    b3b4:	55 1f       	adc	r21, r21
    b3b6:	61 50       	subi	r22, 0x01	; 1
    b3b8:	70 40       	sbci	r23, 0x00	; 0
    b3ba:	80 30       	cpi	r24, 0x00	; 0
    b3bc:	e0 e0       	ldi	r30, 0x00	; 0
    b3be:	9e 07       	cpc	r25, r30
    b3c0:	e0 e0       	ldi	r30, 0x00	; 0
    b3c2:	ae 07       	cpc	r26, r30
    b3c4:	e0 e4       	ldi	r30, 0x40	; 64
    b3c6:	be 07       	cpc	r27, r30
    b3c8:	60 f3       	brcs	.-40     	; 0xb3a2 <__mulsf3+0x176>
    b3ca:	6b 8f       	std	Y+27, r22	; 0x1b
    b3cc:	7c 8f       	std	Y+28, r23	; 0x1c
    b3ce:	6f e7       	ldi	r22, 0x7F	; 127
    b3d0:	e6 2e       	mov	r14, r22
    b3d2:	f1 2c       	mov	r15, r1
    b3d4:	01 2d       	mov	r16, r1
    b3d6:	11 2d       	mov	r17, r1
    b3d8:	e8 22       	and	r14, r24
    b3da:	f9 22       	and	r15, r25
    b3dc:	0a 23       	and	r16, r26
    b3de:	1b 23       	and	r17, r27
    b3e0:	60 e4       	ldi	r22, 0x40	; 64
    b3e2:	e6 16       	cp	r14, r22
    b3e4:	f1 04       	cpc	r15, r1
    b3e6:	01 05       	cpc	r16, r1
    b3e8:	11 05       	cpc	r17, r1
    b3ea:	61 f4       	brne	.+24     	; 0xb404 <__mulsf3+0x1d8>
    b3ec:	87 fd       	sbrc	r24, 7
    b3ee:	0a c0       	rjmp	.+20     	; 0xb404 <__mulsf3+0x1d8>
    b3f0:	21 15       	cp	r18, r1
    b3f2:	31 05       	cpc	r19, r1
    b3f4:	41 05       	cpc	r20, r1
    b3f6:	51 05       	cpc	r21, r1
    b3f8:	29 f0       	breq	.+10     	; 0xb404 <__mulsf3+0x1d8>
    b3fa:	80 5c       	subi	r24, 0xC0	; 192
    b3fc:	9f 4f       	sbci	r25, 0xFF	; 255
    b3fe:	af 4f       	sbci	r26, 0xFF	; 255
    b400:	bf 4f       	sbci	r27, 0xFF	; 255
    b402:	80 78       	andi	r24, 0x80	; 128
    b404:	8d 8f       	std	Y+29, r24	; 0x1d
    b406:	9e 8f       	std	Y+30, r25	; 0x1e
    b408:	af 8f       	std	Y+31, r26	; 0x1f
    b40a:	b8 a3       	std	Y+32, r27	; 0x20
    b40c:	83 e0       	ldi	r24, 0x03	; 3
    b40e:	89 8f       	std	Y+25, r24	; 0x19
    b410:	ce 01       	movw	r24, r28
    b412:	49 96       	adiw	r24, 0x19	; 25
    b414:	02 c0       	rjmp	.+4      	; 0xb41a <__mulsf3+0x1ee>
    b416:	82 e8       	ldi	r24, 0x82	; 130
    b418:	91 e0       	ldi	r25, 0x01	; 1
    b41a:	0e 94 15 5b 	call	0xb62a	; 0xb62a <__pack_f>
    b41e:	a0 96       	adiw	r28, 0x20	; 32
    b420:	e2 e1       	ldi	r30, 0x12	; 18
    b422:	0c 94 ee 5c 	jmp	0xb9dc	; 0xb9dc <__epilogue_restores__>

0000b426 <__divsf3>:
    b426:	a8 e1       	ldi	r26, 0x18	; 24
    b428:	b0 e0       	ldi	r27, 0x00	; 0
    b42a:	e9 e1       	ldi	r30, 0x19	; 25
    b42c:	fa e5       	ldi	r31, 0x5A	; 90
    b42e:	0c 94 da 5c 	jmp	0xb9b4	; 0xb9b4 <__prologue_saves__+0x10>
    b432:	69 83       	std	Y+1, r22	; 0x01
    b434:	7a 83       	std	Y+2, r23	; 0x02
    b436:	8b 83       	std	Y+3, r24	; 0x03
    b438:	9c 83       	std	Y+4, r25	; 0x04
    b43a:	2d 83       	std	Y+5, r18	; 0x05
    b43c:	3e 83       	std	Y+6, r19	; 0x06
    b43e:	4f 83       	std	Y+7, r20	; 0x07
    b440:	58 87       	std	Y+8, r21	; 0x08
    b442:	8e 01       	movw	r16, r28
    b444:	07 5f       	subi	r16, 0xF7	; 247
    b446:	1f 4f       	sbci	r17, 0xFF	; 255
    b448:	ce 01       	movw	r24, r28
    b44a:	01 96       	adiw	r24, 0x01	; 1
    b44c:	b8 01       	movw	r22, r16
    b44e:	0e 94 e6 5b 	call	0xb7cc	; 0xb7cc <__unpack_f>
    b452:	81 e1       	ldi	r24, 0x11	; 17
    b454:	e8 2e       	mov	r14, r24
    b456:	f1 2c       	mov	r15, r1
    b458:	ec 0e       	add	r14, r28
    b45a:	fd 1e       	adc	r15, r29
    b45c:	ce 01       	movw	r24, r28
    b45e:	05 96       	adiw	r24, 0x05	; 5
    b460:	b7 01       	movw	r22, r14
    b462:	0e 94 e6 5b 	call	0xb7cc	; 0xb7cc <__unpack_f>
    b466:	99 85       	ldd	r25, Y+9	; 0x09
    b468:	92 30       	cpi	r25, 0x02	; 2
    b46a:	08 f4       	brcc	.+2      	; 0xb46e <__divsf3+0x48>
    b46c:	84 c0       	rjmp	.+264    	; 0xb576 <__divsf3+0x150>
    b46e:	89 89       	ldd	r24, Y+17	; 0x11
    b470:	82 30       	cpi	r24, 0x02	; 2
    b472:	08 f4       	brcc	.+2      	; 0xb476 <__divsf3+0x50>
    b474:	7c c0       	rjmp	.+248    	; 0xb56e <__divsf3+0x148>
    b476:	2a 85       	ldd	r18, Y+10	; 0x0a
    b478:	3a 89       	ldd	r19, Y+18	; 0x12
    b47a:	23 27       	eor	r18, r19
    b47c:	2a 87       	std	Y+10, r18	; 0x0a
    b47e:	94 30       	cpi	r25, 0x04	; 4
    b480:	11 f0       	breq	.+4      	; 0xb486 <__divsf3+0x60>
    b482:	92 30       	cpi	r25, 0x02	; 2
    b484:	21 f4       	brne	.+8      	; 0xb48e <__divsf3+0x68>
    b486:	98 17       	cp	r25, r24
    b488:	09 f0       	breq	.+2      	; 0xb48c <__divsf3+0x66>
    b48a:	6d c0       	rjmp	.+218    	; 0xb566 <__divsf3+0x140>
    b48c:	72 c0       	rjmp	.+228    	; 0xb572 <__divsf3+0x14c>
    b48e:	84 30       	cpi	r24, 0x04	; 4
    b490:	39 f4       	brne	.+14     	; 0xb4a0 <__divsf3+0x7a>
    b492:	1d 86       	std	Y+13, r1	; 0x0d
    b494:	1e 86       	std	Y+14, r1	; 0x0e
    b496:	1f 86       	std	Y+15, r1	; 0x0f
    b498:	18 8a       	std	Y+16, r1	; 0x10
    b49a:	1c 86       	std	Y+12, r1	; 0x0c
    b49c:	1b 86       	std	Y+11, r1	; 0x0b
    b49e:	6b c0       	rjmp	.+214    	; 0xb576 <__divsf3+0x150>
    b4a0:	82 30       	cpi	r24, 0x02	; 2
    b4a2:	19 f4       	brne	.+6      	; 0xb4aa <__divsf3+0x84>
    b4a4:	84 e0       	ldi	r24, 0x04	; 4
    b4a6:	89 87       	std	Y+9, r24	; 0x09
    b4a8:	66 c0       	rjmp	.+204    	; 0xb576 <__divsf3+0x150>
    b4aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    b4ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    b4ae:	2b 89       	ldd	r18, Y+19	; 0x13
    b4b0:	3c 89       	ldd	r19, Y+20	; 0x14
    b4b2:	82 1b       	sub	r24, r18
    b4b4:	93 0b       	sbc	r25, r19
    b4b6:	9c 87       	std	Y+12, r25	; 0x0c
    b4b8:	8b 87       	std	Y+11, r24	; 0x0b
    b4ba:	2d 85       	ldd	r18, Y+13	; 0x0d
    b4bc:	3e 85       	ldd	r19, Y+14	; 0x0e
    b4be:	4f 85       	ldd	r20, Y+15	; 0x0f
    b4c0:	58 89       	ldd	r21, Y+16	; 0x10
    b4c2:	ed 88       	ldd	r14, Y+21	; 0x15
    b4c4:	fe 88       	ldd	r15, Y+22	; 0x16
    b4c6:	0f 89       	ldd	r16, Y+23	; 0x17
    b4c8:	18 8d       	ldd	r17, Y+24	; 0x18
    b4ca:	2e 15       	cp	r18, r14
    b4cc:	3f 05       	cpc	r19, r15
    b4ce:	40 07       	cpc	r20, r16
    b4d0:	51 07       	cpc	r21, r17
    b4d2:	38 f4       	brcc	.+14     	; 0xb4e2 <__divsf3+0xbc>
    b4d4:	22 0f       	add	r18, r18
    b4d6:	33 1f       	adc	r19, r19
    b4d8:	44 1f       	adc	r20, r20
    b4da:	55 1f       	adc	r21, r21
    b4dc:	01 97       	sbiw	r24, 0x01	; 1
    b4de:	9c 87       	std	Y+12, r25	; 0x0c
    b4e0:	8b 87       	std	Y+11, r24	; 0x0b
    b4e2:	6f e1       	ldi	r22, 0x1F	; 31
    b4e4:	70 e0       	ldi	r23, 0x00	; 0
    b4e6:	a1 2c       	mov	r10, r1
    b4e8:	b1 2c       	mov	r11, r1
    b4ea:	c1 2c       	mov	r12, r1
    b4ec:	a0 e4       	ldi	r26, 0x40	; 64
    b4ee:	da 2e       	mov	r13, r26
    b4f0:	80 e0       	ldi	r24, 0x00	; 0
    b4f2:	90 e0       	ldi	r25, 0x00	; 0
    b4f4:	a0 e0       	ldi	r26, 0x00	; 0
    b4f6:	b0 e0       	ldi	r27, 0x00	; 0
    b4f8:	2e 15       	cp	r18, r14
    b4fa:	3f 05       	cpc	r19, r15
    b4fc:	40 07       	cpc	r20, r16
    b4fe:	51 07       	cpc	r21, r17
    b500:	40 f0       	brcs	.+16     	; 0xb512 <__divsf3+0xec>
    b502:	8a 29       	or	r24, r10
    b504:	9b 29       	or	r25, r11
    b506:	ac 29       	or	r26, r12
    b508:	bd 29       	or	r27, r13
    b50a:	2e 19       	sub	r18, r14
    b50c:	3f 09       	sbc	r19, r15
    b50e:	40 0b       	sbc	r20, r16
    b510:	51 0b       	sbc	r21, r17
    b512:	d6 94       	lsr	r13
    b514:	c7 94       	ror	r12
    b516:	b7 94       	ror	r11
    b518:	a7 94       	ror	r10
    b51a:	22 0f       	add	r18, r18
    b51c:	33 1f       	adc	r19, r19
    b51e:	44 1f       	adc	r20, r20
    b520:	55 1f       	adc	r21, r21
    b522:	61 50       	subi	r22, 0x01	; 1
    b524:	70 40       	sbci	r23, 0x00	; 0
    b526:	41 f7       	brne	.-48     	; 0xb4f8 <__divsf3+0xd2>
    b528:	6f e7       	ldi	r22, 0x7F	; 127
    b52a:	e6 2e       	mov	r14, r22
    b52c:	f1 2c       	mov	r15, r1
    b52e:	01 2d       	mov	r16, r1
    b530:	11 2d       	mov	r17, r1
    b532:	e8 22       	and	r14, r24
    b534:	f9 22       	and	r15, r25
    b536:	0a 23       	and	r16, r26
    b538:	1b 23       	and	r17, r27
    b53a:	60 e4       	ldi	r22, 0x40	; 64
    b53c:	e6 16       	cp	r14, r22
    b53e:	f1 04       	cpc	r15, r1
    b540:	01 05       	cpc	r16, r1
    b542:	11 05       	cpc	r17, r1
    b544:	61 f4       	brne	.+24     	; 0xb55e <__divsf3+0x138>
    b546:	87 fd       	sbrc	r24, 7
    b548:	0a c0       	rjmp	.+20     	; 0xb55e <__divsf3+0x138>
    b54a:	21 15       	cp	r18, r1
    b54c:	31 05       	cpc	r19, r1
    b54e:	41 05       	cpc	r20, r1
    b550:	51 05       	cpc	r21, r1
    b552:	29 f0       	breq	.+10     	; 0xb55e <__divsf3+0x138>
    b554:	80 5c       	subi	r24, 0xC0	; 192
    b556:	9f 4f       	sbci	r25, 0xFF	; 255
    b558:	af 4f       	sbci	r26, 0xFF	; 255
    b55a:	bf 4f       	sbci	r27, 0xFF	; 255
    b55c:	80 78       	andi	r24, 0x80	; 128
    b55e:	8d 87       	std	Y+13, r24	; 0x0d
    b560:	9e 87       	std	Y+14, r25	; 0x0e
    b562:	af 87       	std	Y+15, r26	; 0x0f
    b564:	b8 8b       	std	Y+16, r27	; 0x10
    b566:	8e 01       	movw	r16, r28
    b568:	07 5f       	subi	r16, 0xF7	; 247
    b56a:	1f 4f       	sbci	r17, 0xFF	; 255
    b56c:	04 c0       	rjmp	.+8      	; 0xb576 <__divsf3+0x150>
    b56e:	87 01       	movw	r16, r14
    b570:	02 c0       	rjmp	.+4      	; 0xb576 <__divsf3+0x150>
    b572:	02 e8       	ldi	r16, 0x82	; 130
    b574:	11 e0       	ldi	r17, 0x01	; 1
    b576:	c8 01       	movw	r24, r16
    b578:	0e 94 15 5b 	call	0xb62a	; 0xb62a <__pack_f>
    b57c:	68 96       	adiw	r28, 0x18	; 24
    b57e:	ea e0       	ldi	r30, 0x0A	; 10
    b580:	0c 94 f6 5c 	jmp	0xb9ec	; 0xb9ec <__epilogue_restores__+0x10>

0000b584 <__fixsfsi>:
    b584:	ac e0       	ldi	r26, 0x0C	; 12
    b586:	b0 e0       	ldi	r27, 0x00	; 0
    b588:	e8 ec       	ldi	r30, 0xC8	; 200
    b58a:	fa e5       	ldi	r31, 0x5A	; 90
    b58c:	0c 94 e2 5c 	jmp	0xb9c4	; 0xb9c4 <__prologue_saves__+0x20>
    b590:	69 83       	std	Y+1, r22	; 0x01
    b592:	7a 83       	std	Y+2, r23	; 0x02
    b594:	8b 83       	std	Y+3, r24	; 0x03
    b596:	9c 83       	std	Y+4, r25	; 0x04
    b598:	ce 01       	movw	r24, r28
    b59a:	01 96       	adiw	r24, 0x01	; 1
    b59c:	be 01       	movw	r22, r28
    b59e:	6b 5f       	subi	r22, 0xFB	; 251
    b5a0:	7f 4f       	sbci	r23, 0xFF	; 255
    b5a2:	0e 94 e6 5b 	call	0xb7cc	; 0xb7cc <__unpack_f>
    b5a6:	8d 81       	ldd	r24, Y+5	; 0x05
    b5a8:	82 30       	cpi	r24, 0x02	; 2
    b5aa:	81 f1       	breq	.+96     	; 0xb60c <__fixsfsi+0x88>
    b5ac:	82 30       	cpi	r24, 0x02	; 2
    b5ae:	70 f1       	brcs	.+92     	; 0xb60c <__fixsfsi+0x88>
    b5b0:	84 30       	cpi	r24, 0x04	; 4
    b5b2:	21 f4       	brne	.+8      	; 0xb5bc <__fixsfsi+0x38>
    b5b4:	8e 81       	ldd	r24, Y+6	; 0x06
    b5b6:	88 23       	and	r24, r24
    b5b8:	71 f1       	breq	.+92     	; 0xb616 <__fixsfsi+0x92>
    b5ba:	0a c0       	rjmp	.+20     	; 0xb5d0 <__fixsfsi+0x4c>
    b5bc:	2f 81       	ldd	r18, Y+7	; 0x07
    b5be:	38 85       	ldd	r19, Y+8	; 0x08
    b5c0:	37 fd       	sbrc	r19, 7
    b5c2:	24 c0       	rjmp	.+72     	; 0xb60c <__fixsfsi+0x88>
    b5c4:	6e 81       	ldd	r22, Y+6	; 0x06
    b5c6:	2f 31       	cpi	r18, 0x1F	; 31
    b5c8:	31 05       	cpc	r19, r1
    b5ca:	3c f0       	brlt	.+14     	; 0xb5da <__fixsfsi+0x56>
    b5cc:	66 23       	and	r22, r22
    b5ce:	19 f1       	breq	.+70     	; 0xb616 <__fixsfsi+0x92>
    b5d0:	20 e0       	ldi	r18, 0x00	; 0
    b5d2:	30 e0       	ldi	r19, 0x00	; 0
    b5d4:	40 e0       	ldi	r20, 0x00	; 0
    b5d6:	50 e8       	ldi	r21, 0x80	; 128
    b5d8:	22 c0       	rjmp	.+68     	; 0xb61e <__fixsfsi+0x9a>
    b5da:	8e e1       	ldi	r24, 0x1E	; 30
    b5dc:	90 e0       	ldi	r25, 0x00	; 0
    b5de:	82 1b       	sub	r24, r18
    b5e0:	93 0b       	sbc	r25, r19
    b5e2:	29 85       	ldd	r18, Y+9	; 0x09
    b5e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    b5e6:	4b 85       	ldd	r20, Y+11	; 0x0b
    b5e8:	5c 85       	ldd	r21, Y+12	; 0x0c
    b5ea:	04 c0       	rjmp	.+8      	; 0xb5f4 <__fixsfsi+0x70>
    b5ec:	56 95       	lsr	r21
    b5ee:	47 95       	ror	r20
    b5f0:	37 95       	ror	r19
    b5f2:	27 95       	ror	r18
    b5f4:	8a 95       	dec	r24
    b5f6:	d2 f7       	brpl	.-12     	; 0xb5ec <__fixsfsi+0x68>
    b5f8:	66 23       	and	r22, r22
    b5fa:	89 f0       	breq	.+34     	; 0xb61e <__fixsfsi+0x9a>
    b5fc:	50 95       	com	r21
    b5fe:	40 95       	com	r20
    b600:	30 95       	com	r19
    b602:	21 95       	neg	r18
    b604:	3f 4f       	sbci	r19, 0xFF	; 255
    b606:	4f 4f       	sbci	r20, 0xFF	; 255
    b608:	5f 4f       	sbci	r21, 0xFF	; 255
    b60a:	09 c0       	rjmp	.+18     	; 0xb61e <__fixsfsi+0x9a>
    b60c:	20 e0       	ldi	r18, 0x00	; 0
    b60e:	30 e0       	ldi	r19, 0x00	; 0
    b610:	40 e0       	ldi	r20, 0x00	; 0
    b612:	50 e0       	ldi	r21, 0x00	; 0
    b614:	04 c0       	rjmp	.+8      	; 0xb61e <__fixsfsi+0x9a>
    b616:	2f ef       	ldi	r18, 0xFF	; 255
    b618:	3f ef       	ldi	r19, 0xFF	; 255
    b61a:	4f ef       	ldi	r20, 0xFF	; 255
    b61c:	5f e7       	ldi	r21, 0x7F	; 127
    b61e:	b9 01       	movw	r22, r18
    b620:	ca 01       	movw	r24, r20
    b622:	2c 96       	adiw	r28, 0x0c	; 12
    b624:	e2 e0       	ldi	r30, 0x02	; 2
    b626:	0c 94 fe 5c 	jmp	0xb9fc	; 0xb9fc <__epilogue_restores__+0x20>

0000b62a <__pack_f>:
    b62a:	ef 92       	push	r14
    b62c:	ff 92       	push	r15
    b62e:	0f 93       	push	r16
    b630:	1f 93       	push	r17
    b632:	cf 93       	push	r28
    b634:	df 93       	push	r29
    b636:	fc 01       	movw	r30, r24
    b638:	24 81       	ldd	r18, Z+4	; 0x04
    b63a:	35 81       	ldd	r19, Z+5	; 0x05
    b63c:	46 81       	ldd	r20, Z+6	; 0x06
    b63e:	57 81       	ldd	r21, Z+7	; 0x07
    b640:	61 81       	ldd	r22, Z+1	; 0x01
    b642:	80 81       	ld	r24, Z
    b644:	82 30       	cpi	r24, 0x02	; 2
    b646:	20 f4       	brcc	.+8      	; 0xb650 <__pack_f+0x26>
    b648:	40 61       	ori	r20, 0x10	; 16
    b64a:	ef ef       	ldi	r30, 0xFF	; 255
    b64c:	f0 e0       	ldi	r31, 0x00	; 0
    b64e:	a6 c0       	rjmp	.+332    	; 0xb79c <__pack_f+0x172>
    b650:	84 30       	cpi	r24, 0x04	; 4
    b652:	09 f4       	brne	.+2      	; 0xb656 <__pack_f+0x2c>
    b654:	9d c0       	rjmp	.+314    	; 0xb790 <__pack_f+0x166>
    b656:	82 30       	cpi	r24, 0x02	; 2
    b658:	09 f4       	brne	.+2      	; 0xb65c <__pack_f+0x32>
    b65a:	94 c0       	rjmp	.+296    	; 0xb784 <__pack_f+0x15a>
    b65c:	21 15       	cp	r18, r1
    b65e:	31 05       	cpc	r19, r1
    b660:	41 05       	cpc	r20, r1
    b662:	51 05       	cpc	r21, r1
    b664:	09 f4       	brne	.+2      	; 0xb668 <__pack_f+0x3e>
    b666:	91 c0       	rjmp	.+290    	; 0xb78a <__pack_f+0x160>
    b668:	02 80       	ldd	r0, Z+2	; 0x02
    b66a:	f3 81       	ldd	r31, Z+3	; 0x03
    b66c:	e0 2d       	mov	r30, r0
    b66e:	8f ef       	ldi	r24, 0xFF	; 255
    b670:	e2 38       	cpi	r30, 0x82	; 130
    b672:	f8 07       	cpc	r31, r24
    b674:	0c f0       	brlt	.+2      	; 0xb678 <__pack_f+0x4e>
    b676:	5c c0       	rjmp	.+184    	; 0xb730 <__pack_f+0x106>
    b678:	c2 e8       	ldi	r28, 0x82	; 130
    b67a:	df ef       	ldi	r29, 0xFF	; 255
    b67c:	ce 1b       	sub	r28, r30
    b67e:	df 0b       	sbc	r29, r31
    b680:	ca 31       	cpi	r28, 0x1A	; 26
    b682:	d1 05       	cpc	r29, r1
    b684:	74 f5       	brge	.+92     	; 0xb6e2 <__pack_f+0xb8>
    b686:	79 01       	movw	r14, r18
    b688:	8a 01       	movw	r16, r20
    b68a:	0c 2e       	mov	r0, r28
    b68c:	04 c0       	rjmp	.+8      	; 0xb696 <__pack_f+0x6c>
    b68e:	16 95       	lsr	r17
    b690:	07 95       	ror	r16
    b692:	f7 94       	ror	r15
    b694:	e7 94       	ror	r14
    b696:	0a 94       	dec	r0
    b698:	d2 f7       	brpl	.-12     	; 0xb68e <__pack_f+0x64>
    b69a:	81 e0       	ldi	r24, 0x01	; 1
    b69c:	90 e0       	ldi	r25, 0x00	; 0
    b69e:	a0 e0       	ldi	r26, 0x00	; 0
    b6a0:	b0 e0       	ldi	r27, 0x00	; 0
    b6a2:	0c 2e       	mov	r0, r28
    b6a4:	04 c0       	rjmp	.+8      	; 0xb6ae <__pack_f+0x84>
    b6a6:	88 0f       	add	r24, r24
    b6a8:	99 1f       	adc	r25, r25
    b6aa:	aa 1f       	adc	r26, r26
    b6ac:	bb 1f       	adc	r27, r27
    b6ae:	0a 94       	dec	r0
    b6b0:	d2 f7       	brpl	.-12     	; 0xb6a6 <__pack_f+0x7c>
    b6b2:	01 97       	sbiw	r24, 0x01	; 1
    b6b4:	a1 09       	sbc	r26, r1
    b6b6:	b1 09       	sbc	r27, r1
    b6b8:	82 23       	and	r24, r18
    b6ba:	93 23       	and	r25, r19
    b6bc:	a4 23       	and	r26, r20
    b6be:	b5 23       	and	r27, r21
    b6c0:	21 e0       	ldi	r18, 0x01	; 1
    b6c2:	30 e0       	ldi	r19, 0x00	; 0
    b6c4:	40 e0       	ldi	r20, 0x00	; 0
    b6c6:	50 e0       	ldi	r21, 0x00	; 0
    b6c8:	00 97       	sbiw	r24, 0x00	; 0
    b6ca:	a1 05       	cpc	r26, r1
    b6cc:	b1 05       	cpc	r27, r1
    b6ce:	21 f4       	brne	.+8      	; 0xb6d8 <__pack_f+0xae>
    b6d0:	20 e0       	ldi	r18, 0x00	; 0
    b6d2:	30 e0       	ldi	r19, 0x00	; 0
    b6d4:	40 e0       	ldi	r20, 0x00	; 0
    b6d6:	50 e0       	ldi	r21, 0x00	; 0
    b6d8:	2e 29       	or	r18, r14
    b6da:	3f 29       	or	r19, r15
    b6dc:	40 2b       	or	r20, r16
    b6de:	51 2b       	or	r21, r17
    b6e0:	04 c0       	rjmp	.+8      	; 0xb6ea <__pack_f+0xc0>
    b6e2:	20 e0       	ldi	r18, 0x00	; 0
    b6e4:	30 e0       	ldi	r19, 0x00	; 0
    b6e6:	40 e0       	ldi	r20, 0x00	; 0
    b6e8:	50 e0       	ldi	r21, 0x00	; 0
    b6ea:	da 01       	movw	r26, r20
    b6ec:	c9 01       	movw	r24, r18
    b6ee:	8f 77       	andi	r24, 0x7F	; 127
    b6f0:	90 70       	andi	r25, 0x00	; 0
    b6f2:	a0 70       	andi	r26, 0x00	; 0
    b6f4:	b0 70       	andi	r27, 0x00	; 0
    b6f6:	80 34       	cpi	r24, 0x40	; 64
    b6f8:	91 05       	cpc	r25, r1
    b6fa:	a1 05       	cpc	r26, r1
    b6fc:	b1 05       	cpc	r27, r1
    b6fe:	39 f4       	brne	.+14     	; 0xb70e <__pack_f+0xe4>
    b700:	27 ff       	sbrs	r18, 7
    b702:	09 c0       	rjmp	.+18     	; 0xb716 <__pack_f+0xec>
    b704:	20 5c       	subi	r18, 0xC0	; 192
    b706:	3f 4f       	sbci	r19, 0xFF	; 255
    b708:	4f 4f       	sbci	r20, 0xFF	; 255
    b70a:	5f 4f       	sbci	r21, 0xFF	; 255
    b70c:	04 c0       	rjmp	.+8      	; 0xb716 <__pack_f+0xec>
    b70e:	21 5c       	subi	r18, 0xC1	; 193
    b710:	3f 4f       	sbci	r19, 0xFF	; 255
    b712:	4f 4f       	sbci	r20, 0xFF	; 255
    b714:	5f 4f       	sbci	r21, 0xFF	; 255
    b716:	e1 e0       	ldi	r30, 0x01	; 1
    b718:	f0 e0       	ldi	r31, 0x00	; 0
    b71a:	20 30       	cpi	r18, 0x00	; 0
    b71c:	80 e0       	ldi	r24, 0x00	; 0
    b71e:	38 07       	cpc	r19, r24
    b720:	80 e0       	ldi	r24, 0x00	; 0
    b722:	48 07       	cpc	r20, r24
    b724:	80 e4       	ldi	r24, 0x40	; 64
    b726:	58 07       	cpc	r21, r24
    b728:	28 f5       	brcc	.+74     	; 0xb774 <__pack_f+0x14a>
    b72a:	e0 e0       	ldi	r30, 0x00	; 0
    b72c:	f0 e0       	ldi	r31, 0x00	; 0
    b72e:	22 c0       	rjmp	.+68     	; 0xb774 <__pack_f+0x14a>
    b730:	e0 38       	cpi	r30, 0x80	; 128
    b732:	f1 05       	cpc	r31, r1
    b734:	6c f5       	brge	.+90     	; 0xb790 <__pack_f+0x166>
    b736:	e1 58       	subi	r30, 0x81	; 129
    b738:	ff 4f       	sbci	r31, 0xFF	; 255
    b73a:	da 01       	movw	r26, r20
    b73c:	c9 01       	movw	r24, r18
    b73e:	8f 77       	andi	r24, 0x7F	; 127
    b740:	90 70       	andi	r25, 0x00	; 0
    b742:	a0 70       	andi	r26, 0x00	; 0
    b744:	b0 70       	andi	r27, 0x00	; 0
    b746:	80 34       	cpi	r24, 0x40	; 64
    b748:	91 05       	cpc	r25, r1
    b74a:	a1 05       	cpc	r26, r1
    b74c:	b1 05       	cpc	r27, r1
    b74e:	39 f4       	brne	.+14     	; 0xb75e <__pack_f+0x134>
    b750:	27 ff       	sbrs	r18, 7
    b752:	09 c0       	rjmp	.+18     	; 0xb766 <__pack_f+0x13c>
    b754:	20 5c       	subi	r18, 0xC0	; 192
    b756:	3f 4f       	sbci	r19, 0xFF	; 255
    b758:	4f 4f       	sbci	r20, 0xFF	; 255
    b75a:	5f 4f       	sbci	r21, 0xFF	; 255
    b75c:	04 c0       	rjmp	.+8      	; 0xb766 <__pack_f+0x13c>
    b75e:	21 5c       	subi	r18, 0xC1	; 193
    b760:	3f 4f       	sbci	r19, 0xFF	; 255
    b762:	4f 4f       	sbci	r20, 0xFF	; 255
    b764:	5f 4f       	sbci	r21, 0xFF	; 255
    b766:	57 ff       	sbrs	r21, 7
    b768:	05 c0       	rjmp	.+10     	; 0xb774 <__pack_f+0x14a>
    b76a:	56 95       	lsr	r21
    b76c:	47 95       	ror	r20
    b76e:	37 95       	ror	r19
    b770:	27 95       	ror	r18
    b772:	31 96       	adiw	r30, 0x01	; 1
    b774:	87 e0       	ldi	r24, 0x07	; 7
    b776:	56 95       	lsr	r21
    b778:	47 95       	ror	r20
    b77a:	37 95       	ror	r19
    b77c:	27 95       	ror	r18
    b77e:	8a 95       	dec	r24
    b780:	d1 f7       	brne	.-12     	; 0xb776 <__pack_f+0x14c>
    b782:	0c c0       	rjmp	.+24     	; 0xb79c <__pack_f+0x172>
    b784:	e0 e0       	ldi	r30, 0x00	; 0
    b786:	f0 e0       	ldi	r31, 0x00	; 0
    b788:	05 c0       	rjmp	.+10     	; 0xb794 <__pack_f+0x16a>
    b78a:	e0 e0       	ldi	r30, 0x00	; 0
    b78c:	f0 e0       	ldi	r31, 0x00	; 0
    b78e:	06 c0       	rjmp	.+12     	; 0xb79c <__pack_f+0x172>
    b790:	ef ef       	ldi	r30, 0xFF	; 255
    b792:	f0 e0       	ldi	r31, 0x00	; 0
    b794:	20 e0       	ldi	r18, 0x00	; 0
    b796:	30 e0       	ldi	r19, 0x00	; 0
    b798:	40 e0       	ldi	r20, 0x00	; 0
    b79a:	50 e0       	ldi	r21, 0x00	; 0
    b79c:	8e 2f       	mov	r24, r30
    b79e:	87 95       	ror	r24
    b7a0:	88 27       	eor	r24, r24
    b7a2:	87 95       	ror	r24
    b7a4:	94 2f       	mov	r25, r20
    b7a6:	9f 77       	andi	r25, 0x7F	; 127
    b7a8:	67 95       	ror	r22
    b7aa:	66 27       	eor	r22, r22
    b7ac:	67 95       	ror	r22
    b7ae:	e6 95       	lsr	r30
    b7b0:	e2 2e       	mov	r14, r18
    b7b2:	a9 2f       	mov	r26, r25
    b7b4:	a8 2b       	or	r26, r24
    b7b6:	fe 2f       	mov	r31, r30
    b7b8:	f6 2b       	or	r31, r22
    b7ba:	62 2f       	mov	r22, r18
    b7bc:	73 2f       	mov	r23, r19
    b7be:	8a 2f       	mov	r24, r26
    b7c0:	9f 2f       	mov	r25, r31
    b7c2:	cd b7       	in	r28, 0x3d	; 61
    b7c4:	de b7       	in	r29, 0x3e	; 62
    b7c6:	e6 e0       	ldi	r30, 0x06	; 6
    b7c8:	0c 94 fa 5c 	jmp	0xb9f4	; 0xb9f4 <__epilogue_restores__+0x18>

0000b7cc <__unpack_f>:
    b7cc:	dc 01       	movw	r26, r24
    b7ce:	fb 01       	movw	r30, r22
    b7d0:	2c 91       	ld	r18, X
    b7d2:	11 96       	adiw	r26, 0x01	; 1
    b7d4:	3c 91       	ld	r19, X
    b7d6:	11 97       	sbiw	r26, 0x01	; 1
    b7d8:	12 96       	adiw	r26, 0x02	; 2
    b7da:	8c 91       	ld	r24, X
    b7dc:	12 97       	sbiw	r26, 0x02	; 2
    b7de:	48 2f       	mov	r20, r24
    b7e0:	4f 77       	andi	r20, 0x7F	; 127
    b7e2:	50 e0       	ldi	r21, 0x00	; 0
    b7e4:	98 2f       	mov	r25, r24
    b7e6:	99 1f       	adc	r25, r25
    b7e8:	99 27       	eor	r25, r25
    b7ea:	99 1f       	adc	r25, r25
    b7ec:	13 96       	adiw	r26, 0x03	; 3
    b7ee:	6c 91       	ld	r22, X
    b7f0:	13 97       	sbiw	r26, 0x03	; 3
    b7f2:	86 2f       	mov	r24, r22
    b7f4:	88 0f       	add	r24, r24
    b7f6:	89 2b       	or	r24, r25
    b7f8:	90 e0       	ldi	r25, 0x00	; 0
    b7fa:	66 1f       	adc	r22, r22
    b7fc:	66 27       	eor	r22, r22
    b7fe:	66 1f       	adc	r22, r22
    b800:	61 83       	std	Z+1, r22	; 0x01
    b802:	00 97       	sbiw	r24, 0x00	; 0
    b804:	39 f5       	brne	.+78     	; 0xb854 <__unpack_f+0x88>
    b806:	21 15       	cp	r18, r1
    b808:	31 05       	cpc	r19, r1
    b80a:	41 05       	cpc	r20, r1
    b80c:	51 05       	cpc	r21, r1
    b80e:	11 f4       	brne	.+4      	; 0xb814 <__unpack_f+0x48>
    b810:	82 e0       	ldi	r24, 0x02	; 2
    b812:	29 c0       	rjmp	.+82     	; 0xb866 <__unpack_f+0x9a>
    b814:	82 e8       	ldi	r24, 0x82	; 130
    b816:	9f ef       	ldi	r25, 0xFF	; 255
    b818:	93 83       	std	Z+3, r25	; 0x03
    b81a:	82 83       	std	Z+2, r24	; 0x02
    b81c:	67 e0       	ldi	r22, 0x07	; 7
    b81e:	22 0f       	add	r18, r18
    b820:	33 1f       	adc	r19, r19
    b822:	44 1f       	adc	r20, r20
    b824:	55 1f       	adc	r21, r21
    b826:	6a 95       	dec	r22
    b828:	d1 f7       	brne	.-12     	; 0xb81e <__unpack_f+0x52>
    b82a:	83 e0       	ldi	r24, 0x03	; 3
    b82c:	80 83       	st	Z, r24
    b82e:	09 c0       	rjmp	.+18     	; 0xb842 <__unpack_f+0x76>
    b830:	22 0f       	add	r18, r18
    b832:	33 1f       	adc	r19, r19
    b834:	44 1f       	adc	r20, r20
    b836:	55 1f       	adc	r21, r21
    b838:	82 81       	ldd	r24, Z+2	; 0x02
    b83a:	93 81       	ldd	r25, Z+3	; 0x03
    b83c:	01 97       	sbiw	r24, 0x01	; 1
    b83e:	93 83       	std	Z+3, r25	; 0x03
    b840:	82 83       	std	Z+2, r24	; 0x02
    b842:	20 30       	cpi	r18, 0x00	; 0
    b844:	80 e0       	ldi	r24, 0x00	; 0
    b846:	38 07       	cpc	r19, r24
    b848:	80 e0       	ldi	r24, 0x00	; 0
    b84a:	48 07       	cpc	r20, r24
    b84c:	80 e4       	ldi	r24, 0x40	; 64
    b84e:	58 07       	cpc	r21, r24
    b850:	78 f3       	brcs	.-34     	; 0xb830 <__unpack_f+0x64>
    b852:	20 c0       	rjmp	.+64     	; 0xb894 <__unpack_f+0xc8>
    b854:	8f 3f       	cpi	r24, 0xFF	; 255
    b856:	91 05       	cpc	r25, r1
    b858:	79 f4       	brne	.+30     	; 0xb878 <__unpack_f+0xac>
    b85a:	21 15       	cp	r18, r1
    b85c:	31 05       	cpc	r19, r1
    b85e:	41 05       	cpc	r20, r1
    b860:	51 05       	cpc	r21, r1
    b862:	19 f4       	brne	.+6      	; 0xb86a <__unpack_f+0x9e>
    b864:	84 e0       	ldi	r24, 0x04	; 4
    b866:	80 83       	st	Z, r24
    b868:	08 95       	ret
    b86a:	44 ff       	sbrs	r20, 4
    b86c:	03 c0       	rjmp	.+6      	; 0xb874 <__unpack_f+0xa8>
    b86e:	81 e0       	ldi	r24, 0x01	; 1
    b870:	80 83       	st	Z, r24
    b872:	10 c0       	rjmp	.+32     	; 0xb894 <__unpack_f+0xc8>
    b874:	10 82       	st	Z, r1
    b876:	0e c0       	rjmp	.+28     	; 0xb894 <__unpack_f+0xc8>
    b878:	8f 57       	subi	r24, 0x7F	; 127
    b87a:	90 40       	sbci	r25, 0x00	; 0
    b87c:	93 83       	std	Z+3, r25	; 0x03
    b87e:	82 83       	std	Z+2, r24	; 0x02
    b880:	83 e0       	ldi	r24, 0x03	; 3
    b882:	80 83       	st	Z, r24
    b884:	87 e0       	ldi	r24, 0x07	; 7
    b886:	22 0f       	add	r18, r18
    b888:	33 1f       	adc	r19, r19
    b88a:	44 1f       	adc	r20, r20
    b88c:	55 1f       	adc	r21, r21
    b88e:	8a 95       	dec	r24
    b890:	d1 f7       	brne	.-12     	; 0xb886 <__unpack_f+0xba>
    b892:	50 64       	ori	r21, 0x40	; 64
    b894:	24 83       	std	Z+4, r18	; 0x04
    b896:	35 83       	std	Z+5, r19	; 0x05
    b898:	46 83       	std	Z+6, r20	; 0x06
    b89a:	57 83       	std	Z+7, r21	; 0x07
    b89c:	08 95       	ret

0000b89e <__mulsi3>:
    b89e:	62 9f       	mul	r22, r18
    b8a0:	d0 01       	movw	r26, r0
    b8a2:	73 9f       	mul	r23, r19
    b8a4:	f0 01       	movw	r30, r0
    b8a6:	82 9f       	mul	r24, r18
    b8a8:	e0 0d       	add	r30, r0
    b8aa:	f1 1d       	adc	r31, r1
    b8ac:	64 9f       	mul	r22, r20
    b8ae:	e0 0d       	add	r30, r0
    b8b0:	f1 1d       	adc	r31, r1
    b8b2:	92 9f       	mul	r25, r18
    b8b4:	f0 0d       	add	r31, r0
    b8b6:	83 9f       	mul	r24, r19
    b8b8:	f0 0d       	add	r31, r0
    b8ba:	74 9f       	mul	r23, r20
    b8bc:	f0 0d       	add	r31, r0
    b8be:	65 9f       	mul	r22, r21
    b8c0:	f0 0d       	add	r31, r0
    b8c2:	99 27       	eor	r25, r25
    b8c4:	72 9f       	mul	r23, r18
    b8c6:	b0 0d       	add	r27, r0
    b8c8:	e1 1d       	adc	r30, r1
    b8ca:	f9 1f       	adc	r31, r25
    b8cc:	63 9f       	mul	r22, r19
    b8ce:	b0 0d       	add	r27, r0
    b8d0:	e1 1d       	adc	r30, r1
    b8d2:	f9 1f       	adc	r31, r25
    b8d4:	bd 01       	movw	r22, r26
    b8d6:	cf 01       	movw	r24, r30
    b8d8:	11 24       	eor	r1, r1
    b8da:	08 95       	ret

0000b8dc <__udivmodhi4>:
    b8dc:	aa 1b       	sub	r26, r26
    b8de:	bb 1b       	sub	r27, r27
    b8e0:	51 e1       	ldi	r21, 0x11	; 17
    b8e2:	07 c0       	rjmp	.+14     	; 0xb8f2 <__udivmodhi4_ep>

0000b8e4 <__udivmodhi4_loop>:
    b8e4:	aa 1f       	adc	r26, r26
    b8e6:	bb 1f       	adc	r27, r27
    b8e8:	a6 17       	cp	r26, r22
    b8ea:	b7 07       	cpc	r27, r23
    b8ec:	10 f0       	brcs	.+4      	; 0xb8f2 <__udivmodhi4_ep>
    b8ee:	a6 1b       	sub	r26, r22
    b8f0:	b7 0b       	sbc	r27, r23

0000b8f2 <__udivmodhi4_ep>:
    b8f2:	88 1f       	adc	r24, r24
    b8f4:	99 1f       	adc	r25, r25
    b8f6:	5a 95       	dec	r21
    b8f8:	a9 f7       	brne	.-22     	; 0xb8e4 <__udivmodhi4_loop>
    b8fa:	80 95       	com	r24
    b8fc:	90 95       	com	r25
    b8fe:	bc 01       	movw	r22, r24
    b900:	cd 01       	movw	r24, r26
    b902:	08 95       	ret

0000b904 <__divmodhi4>:
    b904:	97 fb       	bst	r25, 7
    b906:	09 2e       	mov	r0, r25
    b908:	07 26       	eor	r0, r23
    b90a:	0a d0       	rcall	.+20     	; 0xb920 <__divmodhi4_neg1>
    b90c:	77 fd       	sbrc	r23, 7
    b90e:	04 d0       	rcall	.+8      	; 0xb918 <__divmodhi4_neg2>
    b910:	e5 df       	rcall	.-54     	; 0xb8dc <__udivmodhi4>
    b912:	06 d0       	rcall	.+12     	; 0xb920 <__divmodhi4_neg1>
    b914:	00 20       	and	r0, r0
    b916:	1a f4       	brpl	.+6      	; 0xb91e <__divmodhi4_exit>

0000b918 <__divmodhi4_neg2>:
    b918:	70 95       	com	r23
    b91a:	61 95       	neg	r22
    b91c:	7f 4f       	sbci	r23, 0xFF	; 255

0000b91e <__divmodhi4_exit>:
    b91e:	08 95       	ret

0000b920 <__divmodhi4_neg1>:
    b920:	f6 f7       	brtc	.-4      	; 0xb91e <__divmodhi4_exit>
    b922:	90 95       	com	r25
    b924:	81 95       	neg	r24
    b926:	9f 4f       	sbci	r25, 0xFF	; 255
    b928:	08 95       	ret

0000b92a <__udivmodsi4>:
    b92a:	a1 e2       	ldi	r26, 0x21	; 33
    b92c:	1a 2e       	mov	r1, r26
    b92e:	aa 1b       	sub	r26, r26
    b930:	bb 1b       	sub	r27, r27
    b932:	fd 01       	movw	r30, r26
    b934:	0d c0       	rjmp	.+26     	; 0xb950 <__udivmodsi4_ep>

0000b936 <__udivmodsi4_loop>:
    b936:	aa 1f       	adc	r26, r26
    b938:	bb 1f       	adc	r27, r27
    b93a:	ee 1f       	adc	r30, r30
    b93c:	ff 1f       	adc	r31, r31
    b93e:	a2 17       	cp	r26, r18
    b940:	b3 07       	cpc	r27, r19
    b942:	e4 07       	cpc	r30, r20
    b944:	f5 07       	cpc	r31, r21
    b946:	20 f0       	brcs	.+8      	; 0xb950 <__udivmodsi4_ep>
    b948:	a2 1b       	sub	r26, r18
    b94a:	b3 0b       	sbc	r27, r19
    b94c:	e4 0b       	sbc	r30, r20
    b94e:	f5 0b       	sbc	r31, r21

0000b950 <__udivmodsi4_ep>:
    b950:	66 1f       	adc	r22, r22
    b952:	77 1f       	adc	r23, r23
    b954:	88 1f       	adc	r24, r24
    b956:	99 1f       	adc	r25, r25
    b958:	1a 94       	dec	r1
    b95a:	69 f7       	brne	.-38     	; 0xb936 <__udivmodsi4_loop>
    b95c:	60 95       	com	r22
    b95e:	70 95       	com	r23
    b960:	80 95       	com	r24
    b962:	90 95       	com	r25
    b964:	9b 01       	movw	r18, r22
    b966:	ac 01       	movw	r20, r24
    b968:	bd 01       	movw	r22, r26
    b96a:	cf 01       	movw	r24, r30
    b96c:	08 95       	ret

0000b96e <__divmodsi4>:
    b96e:	97 fb       	bst	r25, 7
    b970:	09 2e       	mov	r0, r25
    b972:	05 26       	eor	r0, r21
    b974:	0e d0       	rcall	.+28     	; 0xb992 <__divmodsi4_neg1>
    b976:	57 fd       	sbrc	r21, 7
    b978:	04 d0       	rcall	.+8      	; 0xb982 <__divmodsi4_neg2>
    b97a:	d7 df       	rcall	.-82     	; 0xb92a <__udivmodsi4>
    b97c:	0a d0       	rcall	.+20     	; 0xb992 <__divmodsi4_neg1>
    b97e:	00 1c       	adc	r0, r0
    b980:	38 f4       	brcc	.+14     	; 0xb990 <__divmodsi4_exit>

0000b982 <__divmodsi4_neg2>:
    b982:	50 95       	com	r21
    b984:	40 95       	com	r20
    b986:	30 95       	com	r19
    b988:	21 95       	neg	r18
    b98a:	3f 4f       	sbci	r19, 0xFF	; 255
    b98c:	4f 4f       	sbci	r20, 0xFF	; 255
    b98e:	5f 4f       	sbci	r21, 0xFF	; 255

0000b990 <__divmodsi4_exit>:
    b990:	08 95       	ret

0000b992 <__divmodsi4_neg1>:
    b992:	f6 f7       	brtc	.-4      	; 0xb990 <__divmodsi4_exit>
    b994:	90 95       	com	r25
    b996:	80 95       	com	r24
    b998:	70 95       	com	r23
    b99a:	61 95       	neg	r22
    b99c:	7f 4f       	sbci	r23, 0xFF	; 255
    b99e:	8f 4f       	sbci	r24, 0xFF	; 255
    b9a0:	9f 4f       	sbci	r25, 0xFF	; 255
    b9a2:	08 95       	ret

0000b9a4 <__prologue_saves__>:
    b9a4:	2f 92       	push	r2
    b9a6:	3f 92       	push	r3
    b9a8:	4f 92       	push	r4
    b9aa:	5f 92       	push	r5
    b9ac:	6f 92       	push	r6
    b9ae:	7f 92       	push	r7
    b9b0:	8f 92       	push	r8
    b9b2:	9f 92       	push	r9
    b9b4:	af 92       	push	r10
    b9b6:	bf 92       	push	r11
    b9b8:	cf 92       	push	r12
    b9ba:	df 92       	push	r13
    b9bc:	ef 92       	push	r14
    b9be:	ff 92       	push	r15
    b9c0:	0f 93       	push	r16
    b9c2:	1f 93       	push	r17
    b9c4:	cf 93       	push	r28
    b9c6:	df 93       	push	r29
    b9c8:	cd b7       	in	r28, 0x3d	; 61
    b9ca:	de b7       	in	r29, 0x3e	; 62
    b9cc:	ca 1b       	sub	r28, r26
    b9ce:	db 0b       	sbc	r29, r27
    b9d0:	0f b6       	in	r0, 0x3f	; 63
    b9d2:	f8 94       	cli
    b9d4:	de bf       	out	0x3e, r29	; 62
    b9d6:	0f be       	out	0x3f, r0	; 63
    b9d8:	cd bf       	out	0x3d, r28	; 61
    b9da:	09 94       	ijmp

0000b9dc <__epilogue_restores__>:
    b9dc:	2a 88       	ldd	r2, Y+18	; 0x12
    b9de:	39 88       	ldd	r3, Y+17	; 0x11
    b9e0:	48 88       	ldd	r4, Y+16	; 0x10
    b9e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    b9e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    b9e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    b9e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    b9ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    b9ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    b9ee:	b9 84       	ldd	r11, Y+9	; 0x09
    b9f0:	c8 84       	ldd	r12, Y+8	; 0x08
    b9f2:	df 80       	ldd	r13, Y+7	; 0x07
    b9f4:	ee 80       	ldd	r14, Y+6	; 0x06
    b9f6:	fd 80       	ldd	r15, Y+5	; 0x05
    b9f8:	0c 81       	ldd	r16, Y+4	; 0x04
    b9fa:	1b 81       	ldd	r17, Y+3	; 0x03
    b9fc:	aa 81       	ldd	r26, Y+2	; 0x02
    b9fe:	b9 81       	ldd	r27, Y+1	; 0x01
    ba00:	ce 0f       	add	r28, r30
    ba02:	d1 1d       	adc	r29, r1
    ba04:	0f b6       	in	r0, 0x3f	; 63
    ba06:	f8 94       	cli
    ba08:	de bf       	out	0x3e, r29	; 62
    ba0a:	0f be       	out	0x3f, r0	; 63
    ba0c:	cd bf       	out	0x3d, r28	; 61
    ba0e:	ed 01       	movw	r28, r26
    ba10:	08 95       	ret

0000ba12 <__tablejump2__>:
    ba12:	ee 0f       	add	r30, r30
    ba14:	ff 1f       	adc	r31, r31

0000ba16 <__tablejump__>:
    ba16:	05 90       	lpm	r0, Z+
    ba18:	f4 91       	lpm	r31, Z
    ba1a:	e0 2d       	mov	r30, r0
    ba1c:	09 94       	ijmp

0000ba1e <memset>:
    ba1e:	dc 01       	movw	r26, r24
    ba20:	01 c0       	rjmp	.+2      	; 0xba24 <memset+0x6>
    ba22:	6d 93       	st	X+, r22
    ba24:	41 50       	subi	r20, 0x01	; 1
    ba26:	50 40       	sbci	r21, 0x00	; 0
    ba28:	e0 f7       	brcc	.-8      	; 0xba22 <memset+0x4>
    ba2a:	08 95       	ret

0000ba2c <strchr>:
    ba2c:	fc 01       	movw	r30, r24
    ba2e:	81 91       	ld	r24, Z+
    ba30:	86 17       	cp	r24, r22
    ba32:	21 f0       	breq	.+8      	; 0xba3c <strchr+0x10>
    ba34:	88 23       	and	r24, r24
    ba36:	d9 f7       	brne	.-10     	; 0xba2e <strchr+0x2>
    ba38:	99 27       	eor	r25, r25
    ba3a:	08 95       	ret
    ba3c:	31 97       	sbiw	r30, 0x01	; 1
    ba3e:	cf 01       	movw	r24, r30
    ba40:	08 95       	ret

0000ba42 <strcpy>:
    ba42:	fb 01       	movw	r30, r22
    ba44:	dc 01       	movw	r26, r24
    ba46:	01 90       	ld	r0, Z+
    ba48:	0d 92       	st	X+, r0
    ba4a:	00 20       	and	r0, r0
    ba4c:	e1 f7       	brne	.-8      	; 0xba46 <strcpy+0x4>
    ba4e:	08 95       	ret

0000ba50 <_exit>:
    ba50:	f8 94       	cli

0000ba52 <__stop_program>:
    ba52:	ff cf       	rjmp	.-2      	; 0xba52 <__stop_program>
